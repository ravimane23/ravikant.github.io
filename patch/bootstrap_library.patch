diff --git a/src/BootstrapLibrarySettingsForm.php b/src/BootstrapLibrarySettingsForm.php
index 00f79e7..8bb3a64 100644
--- a/src/BootstrapLibrarySettingsForm.php
+++ b/src/BootstrapLibrarySettingsForm.php
@@ -1,25 +1,23 @@
 <?php
-/**
- * @file
- * Contains \Drupal\bootstrap_library\BootstrapLibrarySettingsForm
- */
+
 namespace Drupal\bootstrap_library;
 
-use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Form\ConfigFormBase;
-use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\FormStateInterface;
-use Symfony\Component\DependencyInjection\ContainerInterface;
 
 /**
  * Configure bootstrap_library settings for this site.
  */
 class BootstrapLibrarySettingsForm extends ConfigFormBase {
 
+  /**
+   *
+   */
   public function getFormId() {
     return 'bootstrap_library_admin_settings';
   }
-  /** 
+
+  /**
    * {@inheritdoc}
    */
   protected function getEditableConfigNames() {
@@ -28,122 +26,123 @@ class BootstrapLibrarySettingsForm extends ConfigFormBase {
     ];
   }
 
-  /** 
+  /**
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
     $config = $this->config('bootstrap_library.settings');
-	
+
     $themes = \Drupal::service('theme_handler')->listInfo();
-    $active_themes = array();
+    $active_themes = [];
     foreach ($themes as $key => $theme) {
       if ($theme->status) {
         $active_themes[$key] = $theme->info['name'];
       }
     }
-    // Load from CDN
-    $form['cdn'] = array(
+    // Load from CDN.
+    $form['cdn'] = [
       '#type' => 'fieldset',
       '#title' => t('Load Boostrap from CDN'),
       '#collapsible' => TRUE,
       '#collapsed' => TRUE,
-    );
-	$data = _bootstrap_library_data();
-    $cdn_options =  json_decode( $data );
+    ];
+    $data = _bootstrap_library_data();
+    $cdn_options = json_decode($data);
     $versions = array_keys(_bootstrap_library_object_to_array($cdn_options->bootstrap));
     $options = array_combine($versions, $versions);
-    array_unshift( $options, 'Load locally' );
-    $form['cdn']['bootstrap'] = array(
+    array_unshift($options, 'Load locally');
+    $form['cdn']['bootstrap'] = [
       '#type' => 'select',
       '#title' => t('Select Bootstrap version to load via CDN, non for local library'),
       '#options' => $options,
       '#default_value' => $config->get('cdn.bootstrap'),
-    );
-    $form['cdn']['cdn_options'] = array(
-      '#type' => 'hidden', 
-	  '#value' => $data
-	);
-	// Production or minimized version
-    $form['minimized'] = array(
+    ];
+    $form['cdn']['cdn_options'] = [
+      '#type' => 'hidden',
+      '#value' => $data,
+    ];
+    // Production or minimized version.
+    $form['minimized'] = [
       '#type' => 'fieldset',
       '#title' => t('Minimized, Non-minimized, or Composer version'),
       '#collapsible' => TRUE,
       '#collapsed' => FALSE,
-    );
-    $form['minimized']['minimized_options'] = array(
+    ];
+    $form['minimized']['minimized_options'] = [
       '#type' => 'radios',
       '#title' => t('Choose minimized, non-minimized, or composer version.'),
-      '#options' => array(
+      '#options' => [
         0 => t('Use non minimized libraries (Development)'),
         1 => t('Use minimized libraries (Production)'),
-        2 => t('Use composer installed libraries'),      ),
+        2 => t('Use composer installed libraries'),
+      ],
       '#default_value' => $config->get('minimized.options'),
-    );
+    ];
     // Per-theme visibility.
-    $form['theme'] = array(
+    $form['theme'] = [
       '#type' => 'fieldset',
       '#title' => t('Themes Visibility'),
       '#collapsible' => TRUE,
       '#collapsed' => FALSE,
-    );
-    $form['theme']['theme_visibility'] = array(
+    ];
+    $form['theme']['theme_visibility'] = [
       '#type' => 'radios',
       '#title' => t('Activate on specific themes'),
-      '#options' => array(
+      '#options' => [
         0 => t('All themes except those listed'),
         1 => t('Only the listed themes'),
-      ),
+      ],
       '#default_value' => $config->get('theme.visibility'),
-    );
-    $form['theme']['theme_themes'] = array(
+    ];
+    $form['theme']['theme_themes'] = [
       '#type' => 'select',
       '#title' => 'List of themes where library will be loaded.',
       '#options' => $active_themes,
       '#multiple' => TRUE,
       '#default_value' => $config->get('theme.themes'),
       '#description' => t("Specify in which themes you wish the library to load."),
-    );
+    ];
     // Per-path visibility.
-    $form['url'] = array(
+    $form['url'] = [
       '#type' => 'fieldset',
       '#title' => t('Activate on specific URLs'),
       '#collapsible' => TRUE,
       '#collapsed' => TRUE,
-    );
-    $form['url']['url_visibility'] = array(
+    ];
+    $form['url']['url_visibility'] = [
       '#type' => 'radios',
       '#title' => t('Load bootstrap on specific pages'),
-      '#options' => array(0 => t('All pages except those listed'), 1 => t('Only the listed pages')),
+      '#options' => [0 => t('All pages except those listed'), 1 => t('Only the listed pages')],
       '#default_value' => $config->get('url.visibility'),
-    );
-    $form['url']['url_pages'] = array(
+    ];
+    $form['url']['url_pages'] = [
       '#type' => 'textarea',
       '#title' => '<span class="element-invisible">' . t('Pages') . '</span>',
       '#default_value' => _bootstrap_library_array_to_string($config->get('url.pages')),
-      '#description' => t("Specify pages by using their paths. Enter one path per line. The '*' character is a wildcard. Example paths are %blog for the blog page and %blog-wildcard for every personal blog. %front is the front page.", array('%blog' => 'blog', '%blog-wildcard' => 'blog/*', '%front' => '<front>')),
-    );
+      '#description' => t("Specify pages by using their paths. Enter one path per line. The '*' character is a wildcard. Example paths are %blog for the blog page and %blog-wildcard for every personal blog. %front is the front page.", ['%blog' => 'blog', '%blog-wildcard' => 'blog/*', '%front' => '<front>']),
+    ];
 
     // Files settings.
-    $form['files'] = array(
+    $form['files'] = [
       '#type' => 'fieldset',
       '#title' => t('Files Settings'),
       '#collapsible' => TRUE,
       '#collapsed' => TRUE,
-    );
-    $form['files']['types'] = array(
+    ];
+    $form['files']['types'] = [
       '#type' => 'checkboxes',
       '#title' => t('Select which files to load from the library. By default you should check both, but in some cases you will need to load only CSS or JS Bootstrap files.'),
-      '#options' => array(
+      '#options' => [
         'css' => t('CSS files'),
         'js' => t('Javascript files'),
-      ),
+      ],
       '#default_value' => $config->get('files.types'),
-    );
+    ];
 
     return parent::buildForm($form, $form_state);
   }
 
-  /** 
+  /**
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -160,11 +159,12 @@ class BootstrapLibrarySettingsForm extends ConfigFormBase {
 
     parent::submitForm($form, $form_state);
   }
+
 }
 
 /**
  * Replaces CDN version options.
- * This is while find uptodate solution for CDN Version options
+ * This is while find uptodate solution for CDN Version options.
  */
 function _bootstrap_library_data() {
 
@@ -338,8 +338,8 @@ function _bootstrap_library_cdn_versions() {
   $json_response = NULL;
   try {
     $client = \Drupal::httpClient();
-    $response = $client->get($uri, array('headers' => array('Accept' => 'text/plain')));
-	$data = (string) $response->getBody();
+    $response = $client->get($uri, ['headers' => ['Accept' => 'text/plain']]);
+    $data = (string) $response->getBody();
     if (empty($data)) {
       return FALSE;
     }
@@ -350,5 +350,3 @@ function _bootstrap_library_cdn_versions() {
   }
   return $data;
 }
-
-?>
\ No newline at end of file
diff --git a/src/Tests/BootstrapLibraryUITest.php b/src/Tests/BootstrapLibraryUITest.php
index 82567e7..fb5f025 100644
--- a/src/Tests/BootstrapLibraryUITest.php
+++ b/src/Tests/BootstrapLibraryUITest.php
@@ -1,10 +1,5 @@
 <?php
 
-/**
- * @file
- * Contains \Drupal\bootstrap_library\Tests\BootstrapLibraryUITest
- */
-
 namespace Drupal\bootstrap_library\Tests;
 
 use Drupal\simpletest\WebTestBase;
@@ -21,19 +16,22 @@ class BootstrapLibraryUITest extends WebTestBase {
    *
    * @var array
    */
-  public static $modules = array('bootstrap_library');
+  public static $modules = ['bootstrap_library'];
 
   /**
    * An administrative user to configure the test environment.
    */
   protected $adminUser;
 
+  /**
+   *
+   */
   protected function setUp() {
     parent::setUp();
     // Create and log in an administrative user.
-    $this->adminUser = $this->drupalCreateUser(array(
+    $this->adminUser = $this->drupalCreateUser([
       'administer site configuration',
-    ));
+    ]);
     $this->drupalLogin($this->adminUser);
   }
 
