diff --git a/css/fpa.admin.css b/css/fpa.admin.css
index 481a425..77735fa 100644
--- a/css/fpa.admin.css
+++ b/css/fpa.admin.css
@@ -33,16 +33,16 @@ body.page-admin-people-permissions {
 .fpa-left-section,
 .fpa-right-section {
   display: table-cell;
-  border: 1px solid #D6DBDE;
+  border: 1px solid #d6dbde;
   vertical-align: top;
 }
 .fpa-left-section {
-  background-color: #F6F6F6;
+  background-color: #f6f6f6;
   width: 1px;
   /* Keep column as small as possible. Table cells automatically push wider. */
 }
 .fpa-left-section .item-list ul {
-  background-color: #EFEFEF;
+  background-color: #efefef;
   list-style: none;
   margin: 0;
   padding: 0;
@@ -50,7 +50,7 @@ body.page-admin-people-permissions {
 }
 .fpa-left-section .item-list li {
   background-color: inherit;
-  border-bottom: 1px solid #D6DBDE;
+  border-bottom: 1px solid #d6dbde;
   cursor: pointer;
   font-size: 90%;
   line-height: 100%;
@@ -283,7 +283,7 @@ html.js .fpa-filter-form {
 }
 /**
  * Tweak how the table is initially displayed to prevent premature reflow.
- * 
+ *
  * The table is displayed with a <style /> tag immediately after in the HTML.
  */
 #permissions {
diff --git a/fpa.form_alter.inc b/fpa.form_alter.inc
index 7a76c6e..afb6dbe 100644
--- a/fpa.form_alter.inc
+++ b/fpa.form_alter.inc
@@ -5,13 +5,12 @@
  * Contains form alter hooks to inject FPA functionality.
  */
 
-
 /**
  * Implements hook_form_FORM_ID_alter().
  */
 function fpa_form_node_type_form_alter(&$form, &$form_state) {
   if (!empty($form['type']['#default_value']) && user_access('administer permissions')) {
-    fpa_fieldset($form['#node_type']->type . ' content', $form, array('#group' => 'additional_settings'));
+    fpa_fieldset($form['#node_type']->type . ' content', $form, ['#group' => 'additional_settings']);
   }
 }
 
@@ -19,48 +18,48 @@ function fpa_form_node_type_form_alter(&$form, &$form_state) {
  * Implements hook_form_FORM_ID_alter().
  */
 function fpa_form_user_admin_permissions_alter(&$form, &$form_state) {
-  
+
   // Prevent duplication of memory limit warning.
   if (module_exists('filter_perms') && empty($form_state['input'])) {
-    
+
     $memory_limit = ini_get('memory_limit');
-    
+
     if (!drupal_check_memory_limit(_fpa_memory_required() . 'b', $memory_limit)) {
-      drupal_set_message(t('If you attempt to display all roles and permissions on this page at the same time, you will most likely exceed your PHP memory limit of %memory_limit.', array('%memory_limit' => $memory_limit)), 'warning');
+      drupal_set_message(t('If you attempt to display all roles and permissions on this page at the same time, you will most likely exceed your PHP memory limit of %memory_limit.', ['%memory_limit' => $memory_limit]), 'warning');
     }
   }
-    
-  $form['#theme'] = array('fpa_user_admin_permissions');
-  
+
+  $form['#theme'] = ['fpa_user_admin_permissions'];
+
   $fpa_module_path = drupal_get_path('module', 'fpa');
-  
-  $form['#attached']['library'][] = array('system', 'jquery.cookie');
+
+  $form['#attached']['library'][] = ['system', 'jquery.cookie'];
 
   $form['#attached']['css'][] = $fpa_module_path . '/css/fpa.css';
   $form['#attached']['js'][] = $fpa_module_path . '/js/fpa.min.js';
-  $form['#attached']['js'][] = array(
+  $form['#attached']['js'][] = [
     'type' => 'setting',
-    'data' => array(
-      'fpa' => array(
-        'attr' => array(
-          'permission' =>  FPA_ATTR_PERMISSION,
-          'module' =>      FPA_ATTR_MODULE,
-          'role' =>        FPA_ATTR_ROLE,
-          
-          'checked' =>     FPA_ATTR_CHECKED,
+    'data' => [
+      'fpa' => [
+        'attr' => [
+          'permission' => FPA_ATTR_PERMISSION,
+          'module' => FPA_ATTR_MODULE,
+          'role' => FPA_ATTR_ROLE,
+
+          'checked' => FPA_ATTR_CHECKED,
           'not_checked' => FPA_ATTR_NOT_CHECKED,
 
           'system_name' => FPA_ATTR_SYSTEM_NAME,
-        ),
-      ),
-    ),
-  );
+        ],
+      ],
+    ],
+  ];
 }
 
 /**
  * Implements hook_form_FORM_ID_alter().
  */
 function fpa_form_filter_perms_admin_perm_filter_alter(&$form, &$form_state) {
-  
+
   $form['#submit'][] = '_fpa_reset_filter_defaults';
 }
diff --git a/fpa.theme.inc b/fpa.theme.inc
index 66bce00..2ed294d 100644
--- a/fpa.theme.inc
+++ b/fpa.theme.inc
@@ -9,219 +9,221 @@
  * Implements hook_theme().
  */
 function fpa_theme($existing, $type, $theme, $path) {
-  return array(
-    'fpa_user_admin_permissions' => array(
+  return [
+    'fpa_user_admin_permissions' => [
       'render element' => 'form',
       'file' => 'fpa.theme.inc',
-    ),
-  );
+    ],
+  ];
 }
 
 /**
  * Theme function to pre-mark rows with FPA attributes.
- * 
+ *
  * Based on Drupal Core's permissions form theme function.
- * 
- * @see theme_user_admin_permissions().
+ *
+ * @see theme_user_admin_permissions()
  */
 function theme_fpa_user_admin_permissions($variables) {
   $form = $variables['form'];
-  
-  $nameless_checkbox = array(
+
+  $nameless_checkbox = [
     '#type' => 'html_tag',
     '#tag' => 'input',
-    '#attributes' => array(
+    '#attributes' => [
       'type' => 'checkbox',
-      'class' => array(
-        'rid-1', // Prevents Drupal core Drupal.behaviors.permissions.toggle from applying.
+      'class' => [
+  // Prevents Drupal core Drupal.behaviors.permissions.toggle from applying.
+        'rid-1',
         'form-checkbox',
         'fpa-checkboxes-toggle',
-      ),
-    ),
-  );
-  
+      ],
+    ],
+  ];
+
   $nameless_checkbox_output = drupal_render($nameless_checkbox);
-  
-  
-  $dummy_checkbox = array(
+
+  $dummy_checkbox = [
     '#type' => 'html_tag',
     '#tag' => 'input',
-    '#attributes' => array(
+    '#attributes' => [
       'type' => 'checkbox',
       'disabled' => 'disabled',
       'checked' => 'checked',
       'title' => t('This permission is inherited from the authenticated user role.'),
-      'class' => array(
+      'class' => [
         'dummy-checkbox',
-      ),
-    ),
-  );
-  
+      ],
+    ],
+  ];
+
   $dummy_checkbox_output = drupal_render($dummy_checkbox);
-  
-  
-  $permission_col_template = array(
+
+  $permission_col_template = [
     '#type' => 'container',
-    '#attributes' => array(
-      'class' => array(
+    '#attributes' => [
+      'class' => [
         'fpa-permission-container',
-      ),
-    ),
-    'description' => array(
+      ],
+    ],
+    'description' => [
       '#markup' => '',
-    ),
-    'checkbox_cell' => array(
+    ],
+    'checkbox_cell' => [
       '#type' => 'container',
-      '#attributes' => array(
-        'class' => array(
+      '#attributes' => [
+        'class' => [
           'fpa-row-toggle-container',
-        ),
-      ),
-      'checkbox_form_item' => array(
+        ],
+      ],
+      'checkbox_form_item' => [
         '#type' => 'container',
-        '#attributes' => array(
+        '#attributes' => [
           'title' => t('Toggle visible checkboxes in this row.'),
-          'class' => array(
+          'class' => [
             'form-item',
             'form-type-checkbox',
-          ),
-        ),
-        'label' => array(
+          ],
+        ],
+        'label' => [
           '#type' => 'html_tag',
           '#tag' => 'label',
-          '#attributes' => array(
-            'class' => array(
+          '#attributes' => [
+            'class' => [
               'element-invisible',
-            ),
-          ),
+            ],
+          ],
           '#value' => 'test',
-        ),
-        'checkbox' => array(
+        ],
+        'checkbox' => [
           '#markup' => $nameless_checkbox_output,
-        ),
-      ),
-    ),
-  );
-  
+        ],
+      ],
+    ],
+  ];
+
   $checkboxes_children = element_children($form['checkboxes']);
-  
+
   // Prepare role names processed by drupal_html_class() ahead of time.
-  $roles_attr_values = array();
-  
+  $roles_attr_values = [];
+
   foreach ($checkboxes_children as $rid) {
     $roles_attr_values[$rid] = drupal_html_class($form['role_names'][$rid]['#markup']);
   }
-  
+
   $first_role_index = array_shift($checkboxes_children);
-  
+
   // Lists for wrapper.
-  $modules = array();
-  $user_roles = array();
-  
+  $modules = [];
+  $user_roles = [];
+
   // Index of current module row.
   $module = NULL;
-  
+
   // Row counter.
   $i = 0;
-  
-  $rows = array();
+
+  $rows = [];
 
   // Iterate over rows in form table.
   foreach (element_children($form['permission']) as $key) {
-    
+
     // Row template.
-    $row = array(
-      'data' => array(), // Array of table cells.
-      'title' => array(), // HTML attribute on table row tag.
-      FPA_ATTR_MODULE => array(), // HTML attribute on table row tag.
-      FPA_ATTR_PERMISSION => array(), // HTML attribute on table row tag.
-      FPA_ATTR_CHECKED => array(),
-      FPA_ATTR_NOT_CHECKED => array(),
-    );
-    
+    $row = [
+    // Array of table cells.
+      'data' => [],
+    // HTML attribute on table row tag.
+      'title' => [],
+    // HTML attribute on table row tag.
+      FPA_ATTR_MODULE => [],
+    // HTML attribute on table row tag.
+      FPA_ATTR_PERMISSION => [],
+      FPA_ATTR_CHECKED => [],
+      FPA_ATTR_NOT_CHECKED => [],
+    ];
+
     // Determine if row is module or permission.
     if (is_numeric($key)) {
       // Module row.
-      
       $row['class'][] = 'fpa-module-row';
-      
+
       // Mark current row with escaped module name.
-      $row[FPA_ATTR_MODULE] = array(
-        // System name
+      $row[FPA_ATTR_MODULE] = [
+        // System name.
         0 => $form['permission'][$key]['#id'],
-        // Readable name
+        // Readable name.
         1 => strip_tags($form['permission'][$key]['#markup']),
-      );
-      
-      // Readable
-      $row['data'][] = array(
+      ];
+
+      // Readable.
+      $row['data'][] = [
         'data' => drupal_render($form['permission'][$key]),
-        'class' => array('module'),
+        'class' => ['module'],
         'id' => 'module-' . $form['permission'][$key]['#id'],
         'colspan' => count($form['role_names']['#value']) + 1,
-      );
-      
-      $row['title'] = array($form['permission'][$key]['#id']);
-      
+      ];
+
+      $row['title'] = [$form['permission'][$key]['#id']];
+
       $row[FPA_ATTR_SYSTEM_NAME] = $row[FPA_ATTR_MODULE][0];
-      
+
       $row[FPA_ATTR_MODULE] = array_unique(array_map('drupal_html_class', $row[FPA_ATTR_MODULE]));
-      
+
       // Add modules to left-side modules list.
-      $modules[$row[FPA_ATTR_MODULE][0]] = array(
+      $modules[$row[FPA_ATTR_MODULE][0]] = [
         'text' => strip_tags($form['permission'][$key]['#markup']),
-        'title' => array($form['permission'][$key]['#id']),
+        'title' => [$form['permission'][$key]['#id']],
         FPA_ATTR_MODULE => $row[FPA_ATTR_MODULE],
-        FPA_ATTR_PERMISSION => array(),
-      );
-      
+        FPA_ATTR_PERMISSION => [],
+      ];
+
       // Save row number for current module.
       $module = $i;
     }
     else {
       // Permission row.
-      
       $row['class'][] = 'fpa-permission-row';
-      
+
       $permission_system_name = '';
-      
+
       // Might be empty if no modules are displayed in Permissions Filter module.
       if (!empty($form['checkboxes'][$first_role_index])) {
         $permission_system_name = $form['checkboxes'][$first_role_index][$key]['#return_value'];
       }
-      
+
       $label = $permission_col_template;
-      
+
       $label['description']['#markup'] = drupal_render($form['permission'][$key]);
-      
+
       // Permissions filter might cause no Roles to display.
       if (count(element_children($form['checkboxes'])) == 0) {
         unset($label['checkbox_cell']);
       }
-      
-      // Readable
-      $row['data'][] = array(
+
+      // Readable.
+      $row['data'][] = [
         'data' => drupal_render($label),
-        'class' => array('permission'),
-      );
-      
+        'class' => ['permission'],
+      ];
+
       foreach (element_children($form['checkboxes']) as $rid) {
         $form['checkboxes'][$rid][$key]['#title'] = $form['role_names'][$rid]['#markup'] . ': ' . $form['permission'][$key]['#markup'];
         $form['checkboxes'][$rid][$key]['#title_display'] = 'invisible';
-        
+
         // Filter permissions strips role id class from checkbox. Used by Drupal core functionality.
         $form['checkboxes'][$rid][$key]['#attributes']['class'][] = 'rid-' . $rid;
-        
+
         // Set authenticated role behavior class on page load.
         if ($rid == 2 && $form['checkboxes'][$rid][$key]['#checked'] === TRUE) {
           $row['class'][] = 'fpa-authenticated-role-behavior';
         }
-        
+
         // For all roles that inherit permissions from 'authenticated user' role, add in dummy checkbox for authenticated role behavior.
         if ($rid > 2) {
-          $form['checkboxes'][$rid][$key]['#suffix'] = $dummy_checkbox_output; // '#suffix' doesn't have wrapping HTML like '#field_suffix'.
+          // '#suffix' doesn't have wrapping HTML like '#field_suffix'.
+          $form['checkboxes'][$rid][$key]['#suffix'] = $dummy_checkbox_output;
         }
-        
+
         // Add rid's to row attribute for checked status filter.
         if ($form['checkboxes'][$rid][$key]['#checked'] === TRUE) {
           $row[FPA_ATTR_CHECKED][] = $rid;
@@ -229,108 +231,108 @@ function theme_fpa_user_admin_permissions($variables) {
         else {
           $row[FPA_ATTR_NOT_CHECKED][] = $rid;
         }
-        
-        $row['data'][] = array(
+
+        $row['data'][] = [
           'data' => drupal_render($form['checkboxes'][$rid][$key]),
-          'class' => array(
+          'class' => [
             'checkbox',
-          ),
-          'title' => array(
+          ],
+          'title' => [
             $form['role_names'][$rid]['#markup'],
-          ),
-          // For role filter
-          FPA_ATTR_ROLE => array(
+          ],
+          // For role filter.
+          FPA_ATTR_ROLE => [
             $rid,
-          ),
-        );
+          ],
+        ];
       }
-      
+
       if (!empty($rid)) {
-        $row['title'] = array(
+        $row['title'] = [
           $form['checkboxes'][$rid][$key]['#return_value'],
-        );
-        
-        $row[FPA_ATTR_SYSTEM_NAME] = array(
+        ];
+
+        $row[FPA_ATTR_SYSTEM_NAME] = [
           $form['checkboxes'][$rid][$key]['#return_value'],
-        );
+        ];
       }
-      
+
       // Mark current row with escaped permission name.
-      $row[FPA_ATTR_PERMISSION] = array(
+      $row[FPA_ATTR_PERMISSION] = [
         // Permission system name.
         0 => $permission_system_name,
         // Readable description.
         1 => strip_tags($form['permission'][$key]['#markup']),
-      );
-      
+      ];
+
       // Mark current row with current module.
       $row[FPA_ATTR_MODULE] = $rows[$module][FPA_ATTR_MODULE];
-      
+
       $row[FPA_ATTR_PERMISSION] = array_unique(array_map('drupal_html_class', $row[FPA_ATTR_PERMISSION]));
-      
+
       // Add current permission to current module row.
       $rows[$module][FPA_ATTR_PERMISSION] = array_merge($rows[$module][FPA_ATTR_PERMISSION], $row[FPA_ATTR_PERMISSION]);
-      
+
       $rows[$module][FPA_ATTR_CHECKED] = array_unique(array_merge($rows[$module][FPA_ATTR_CHECKED], $row[FPA_ATTR_CHECKED]));
       $rows[$module][FPA_ATTR_NOT_CHECKED] = array_unique(array_merge($rows[$module][FPA_ATTR_NOT_CHECKED], $row[FPA_ATTR_NOT_CHECKED]));
-      
+
       $modules[$rows[$module][FPA_ATTR_MODULE][0]][FPA_ATTR_PERMISSION][] = $row[FPA_ATTR_PERMISSION];
     }
-    
+
     $rows[$i++] = $row;
   }
-  
-  $reset_button = array(
+
+  $reset_button = [
     '#type' => 'html_tag',
     '#tag' => 'input',
-    '#attributes' => array(
+    '#attributes' => [
       'type' => 'reset',
       'class' => 'form-submit',
       'value' => t('Reset changes'),
-    ),
-  );
-  
+    ],
+  ];
+
   // If there is no submit button, don't add the reset button.
   if (count(element_children($form['actions'])) > 0) {
-    
+
     // Have the reset button appear before the submit button.
     array_unshift($form['actions'], $reset_button);
   }
-  
+
   $actions_output = drupal_render_children($form['actions']);
-  
-  $header = array();
-  
-  $header[] = array(
+
+  $header = [];
+
+  $header[] = [
     'data' => t('Permission') . $actions_output,
-  );
-  
+  ];
+
   foreach (element_children($form['role_names']) as $rid) {
-    
-    $header[] = array(
+
+    $header[] = [
       'data' => drupal_render($form['role_names'][$rid]) . $nameless_checkbox_output,
-      'class' => array(
+      'class' => [
         'checkbox',
-      ),
-      'title' => array(
+      ],
+      'title' => [
         $form['role_names'][$rid]['#markup'],
-      ),
-      FPA_ATTR_ROLE => array(
+      ],
+      FPA_ATTR_ROLE => [
         $rid,
-      ),
-    );
+      ],
+    ];
     $user_roles[$rid] = $form['role_names'][$rid]['#markup'];
   }
-  
-  $table = array(
+
+  $table = [
     'header' => $header,
     'rows' => $rows,
-  );
-  
+  ];
+
   $output = _fpa_wrapper($table, $modules, $user_roles, $actions_output);
-  
+
   $output .= drupal_render_children($form);
-  
+
   return $output;
 }
 
@@ -338,433 +340,437 @@ function theme_fpa_user_admin_permissions($variables) {
  * Wraps table output in the FPA filter.
  */
 function _fpa_wrapper($permissions_table, $modules, $user_roles, $actions_output) {
-  
+
   $same_page = trim(parse_url($_SERVER['HTTP_REFERER'], PHP_URL_PATH), '/') == $_GET['q'];
-  
-  $render = array(
+
+  $render = [
     '#type' => 'container',
-    '#attributes' => array(
-      'class' => array(
+    '#attributes' => [
+      'class' => [
         'fpa-container',
-      ),
-    ),
-  );
-  
-  $hiders = array(
-    'fpa-hide-descriptions' => array(
+      ],
+    ],
+  ];
+
+  $hiders = [
+    'fpa-hide-descriptions' => [
       'hide' => t('Hide descriptions'),
       'show' => t('Show descriptions'),
-    ),
-    'fpa-hide-system-names' => array(
+    ],
+    'fpa-hide-system-names' => [
       'hide' => t('Hide system names'),
       'show' => t('Show system names'),
-    ),
-  );
+    ],
+  ];
 
   $render['#attributes']['class'][] = 'fpa-hide-system-names';
 
-  $hide_container = array(
+  $hide_container = [
     '#type' => 'container',
-    '#attributes' => array(
-      'class' => array(
+    '#attributes' => [
+      'class' => [
         'fpa-toggle-container',
-      ),
-    ),
-  );
-  
+      ],
+    ],
+  ];
+
   foreach ($hiders as $hide_class => $labels) {
-    
-    $hide_container[$hide_class] = array(
+
+    $hide_container[$hide_class] = [
       '#theme' => 'link',
       '#text' => '',
       '#path' => '',
-      '#options' => array(
-        'attributes' => array_merge($labels, array(
+      '#options' => [
+        'attributes' => array_merge($labels, [
           'fpa-toggle-class' => $hide_class,
-        )),
+        ]),
         'html' => TRUE,
         'fragment' => ' ',
-        'external' => TRUE, // Prevent base path from being added to link.
-      ),
-    );
+    // Prevent base path from being added to link.
+        'external' => TRUE,
+      ],
+    ];
   }
-  
+
   $render['hide_container'] = $hide_container;
-  
-  $wrapper = array(
+
+  $wrapper = [
     '#type' => 'container',
-    '#attributes' => array(
-      'class' => array(
+    '#attributes' => [
+      'class' => [
         'fpa-wrapper',
-      ),
-    ),
-  );
-  
+      ],
+    ],
+  ];
+
   $render['wrapper'] = &$wrapper;
-  
+
   /**
    * <style /> block template.
    */
-  $style_template = array(
+  $style_template = [
     '#type' => 'container',
-    '#attributes' => array(
-      'class' => array(
-        'style-wrapper-class-name', // Override on specific block.
-      ),
-    ),
-  );
-  
-  $style_template['style'] = array(
+    '#attributes' => [
+      'class' => [
+  // Override on specific block.
+        'style-wrapper-class-name',
+      ],
+    ],
+  ];
+
+  $style_template['style'] = [
     '#type' => 'html_tag',
     '#tag' => 'style',
-    '#attributes' => array(
-      'type' => array(
+    '#attributes' => [
+      'type' => [
         'text/css',
-      ),
-    ),
-    '#value' => '', // #value needed for closing tag.
-  );
-  
+      ],
+    ],
+    // #value needed for closing tag.
+    '#value' => '',
+  ];
+
   /**
    * <style /> block for role filtering.
    */
   $wrapper['role_styles'] = $style_template;
   $wrapper['role_styles']['#attributes']['class'][0] = 'fpa-role-styles';
-  
+
   /**
    * <style /> block for permission filtering.
    */
   $wrapper['perm_styles'] = $style_template;
   $wrapper['perm_styles']['#attributes']['class'][0] = 'fpa-perm-styles';
-  
+
   /**
    * Left section contains module list and form submission button.
    */
-  $left_section = array(
+  $left_section = [
     '#type' => 'container',
-    '#attributes' => array(
-      'class' => array(
+    '#attributes' => [
+      'class' => [
         'fpa-left-section',
-      ),
-    ),
-  );
-  
+      ],
+    ],
+  ];
+
   $wrapper['left_section'] = &$left_section;
-  
-  
+
   /**
    * Right section contains filter form and permissions table.
    */
-  $right_section = array(
+  $right_section = [
     '#type' => 'container',
-    '#attributes' => array(
-      'class' => array(
+    '#attributes' => [
+      'class' => [
         'fpa-right-section',
-      ),
-    ),
-  );
-  
+      ],
+    ],
+  ];
+
   $wrapper['right_section'] = &$right_section;
-  
-  $module_template = array(
-    FPA_ATTR_MODULE => array(),
-    FPA_ATTR_PERMISSION => array(),
-    'data' => array(
+
+  $module_template = [
+    FPA_ATTR_MODULE => [],
+    FPA_ATTR_PERMISSION => [],
+    'data' => [
       '#type' => 'container',
-      '#attributes' => array(),
-      
-      'link' => array(
+      '#attributes' => [],
+
+      'link' => [
         '#type' => 'markup',
-        '#markup' => '', // l($module['text'], 'admin/people/permissions', $options)
-      ),
-      
-      'counters' => array(),
-      
-      'total' => array(
+  // l($module['text'], 'admin/people/permissions', $options)
+        '#markup' => '',
+      ],
+
+      'counters' => [],
+
+      'total' => [
         '#type' => 'html_tag',
         '#tag' => 'span',
-        '#attributes' => array(
-          'class' => array('fpa-perm-total'),
+        '#attributes' => [
+          'class' => ['fpa-perm-total'],
           'fpa-total' => 0,
-        ),
-        '#value' => '', // #value needed for closing tag.
-      ),
-    ),
-  );
-  
-  $counter_template = array(
+        ],
+        // #value needed for closing tag.
+        '#value' => '',
+      ],
+    ],
+  ];
+
+  $counter_template = [
     '#type' => 'html_tag',
     '#tag' => 'span',
-    '#attributes' => array(
-      'class' => array('fpa-perm-counter'),
-      FPA_ATTR_PERMISSION => array(), // Counters only count permissions match.
-    ),
-    '#value' => '', // #value required for closing tag.
-  );
-  
-  $items = array();
-  
-  $all_modules = array(
+    '#attributes' => [
+      'class' => ['fpa-perm-counter'],
+  // Counters only count permissions match.
+      FPA_ATTR_PERMISSION => [],
+    ],
+    // #value required for closing tag.
+    '#value' => '',
+  ];
+
+  $items = [];
+
+  $all_modules = [
     'text' => t('All modules'),
-    FPA_ATTR_MODULE => array(),
-    FPA_ATTR_PERMISSION => array(),
-  );
-  
+    FPA_ATTR_MODULE => [],
+    FPA_ATTR_PERMISSION => [],
+  ];
+
   array_unshift($modules, $all_modules);
-  
-  $all_modules_counters = array();
-  
+
+  $all_modules_counters = [];
+
   foreach ($modules as $module) {
-    
+
     $module_item = $module_template;
-    
+
     $module_item[FPA_ATTR_MODULE] = $module[FPA_ATTR_MODULE];
-    $module_item[FPA_ATTR_PERMISSION] = array_reduce(array_pad($module[FPA_ATTR_PERMISSION], 1, array()), 'array_merge', array());
-    
+    $module_item[FPA_ATTR_PERMISSION] = array_reduce(array_pad($module[FPA_ATTR_PERMISSION], 1, []), 'array_merge', []);
+
     // Use link for accessibility and tabability.
-    $options = array(
+    $options = [
       'fragment' => 'all',
-    );
-    
+    ];
+
     if (!empty($module['title'])) {
       $options['fragment'] = 'module-' . $module['title'][0];
       $options['attributes']['title'] = $module['title'][0];
     }
-    
+
     $module_item['data']['link']['#markup'] = l($module['text'], 'admin/people/permissions', $options);
-    
+
     foreach ($module[FPA_ATTR_PERMISSION] as $module_perm) {
-      
+
       $counter_item = $counter_template;
-      
+
       $counter_item['#attributes'][FPA_ATTR_PERMISSION] = $module_perm;
-      
+
       $all_modules_counters[] = $counter_item;
-      
+
       $module_item['data']['counters'][] = $counter_item;
     }
-    
+
     $module_item['data']['total']['#attributes']['fpa-total'] = count($module[FPA_ATTR_PERMISSION]);
-    
+
     $items[] = $module_item;
   }
-  
+
   $items[0]['data']['counters'] = $all_modules_counters;
   $items[0]['data']['total']['#attributes']['fpa-total'] = count($all_modules_counters);
-  
+
   foreach ($items as &$item) {
     $item['data'] = drupal_render($item['data']);
   }
-  
-  $left_section['list'] = array(
+
+  $left_section['list'] = [
     '#items' => $items,
     '#theme' => 'item_list',
-  );
-  
-  $left_section['buttons'] = array(
+  ];
+
+  $left_section['buttons'] = [
     '#type' => 'markup',
     '#markup' => $actions_output,
-  );
-  
-  $filter_form = array(
+  ];
+
+  $filter_form = [
     '#type' => 'container',
-    '#attributes' => array(
-      'class' => array(
+    '#attributes' => [
+      'class' => [
         'fpa-filter-form',
-      ),
-    ),
-  );
-  
-  $clear_button = array(
+      ],
+    ],
+  ];
+
+  $clear_button = [
     '#type' => 'html_tag',
     '#tag' => 'input',
-    '#attributes' => array(
-      'type' => array(
+    '#attributes' => [
+      'type' => [
         'button',
-      ),
-      'class' => array(
+      ],
+      'class' => [
         'fpa-clear-search',
         'form-submit',
-      ),
+      ],
       'value' => 'Clear filter',
-    ),
-  );
-  
+    ],
+  ];
+
   $default_filter = '';
-  
+
   if (!empty($_GET['fpa_perm'])) {
     $default_filter = $_GET['fpa_perm'];
   }
-  
+
   if (!empty($_COOKIE['fpa_filter']) && $same_page) {
     $default_filter = $_COOKIE['fpa_filter'];
   }
-  
-  
-  $filter_form['permission_module_filter'] = array(
+
+  $filter_form['permission_module_filter'] = [
     '#type' => 'textfield',
     '#title' => t('Filter:'),
     '#description' => t('<p>Enter in the format of "permission@module",</p><p>e.g. <em>admin@system</em> will show only permissions with the<br>text "admin" in modules with the text "system".</p><p>This will also match on system name of a permission.</p>'),
     '#size' => 25,
     '#field_suffix' => drupal_render($clear_button),
-    '#attributes' => array(
-      'placeholder' => array(
+    '#attributes' => [
+      'placeholder' => [
         'permission@module',
-      ),
+      ],
       'autofocus' => 'autofocus',
-    ),
+    ],
     '#value' => $default_filter,
-  );
-  
+  ];
+
   /*
    * Populate the permission filter styles.
    */
-  $matches = array();
-  
+  $matches = [];
+
   preg_match('/^\s*([^@]*)@?(.*?)\s*$/i', $filter_form['permission_module_filter']['#value'], $matches);
-  
-  array_shift($matches); // Remove whole match item.
-  
+
+  // Remove whole match item.
+  array_shift($matches);
+
   $safe_matches = array_map('drupal_html_class', $matches);
-  
+
   $module_match = !empty($_COOKIE['module_match']) ? $_COOKIE['module_match'] : '*=';
-  
-  $filters = array(
-    drupal_strlen($safe_matches[0]) > 0 ? ('[' . FPA_ATTR_PERMISSION .               '*="' . $safe_matches[0] . '"]') : '',
-    drupal_strlen($safe_matches[1]) > 0 ? ('[' . FPA_ATTR_MODULE     . $module_match . '"' . $safe_matches[1] . '"]') : '',
-  );
-  
-  $filter_styles = array(
+
+  $filters = [
+    drupal_strlen($safe_matches[0]) > 0 ? ('[' . FPA_ATTR_PERMISSION . '*="' . $safe_matches[0] . '"]') : '',
+    drupal_strlen($safe_matches[1]) > 0 ? ('[' . FPA_ATTR_MODULE . $module_match . '"' . $safe_matches[1] . '"]') : '',
+  ];
+
+  $filter_styles = [
     '.fpa-table-wrapper tr[' . FPA_ATTR_MODULE . ']{display: none;}',
-    
+
     '.fpa-table-wrapper tr[' . FPA_ATTR_MODULE . ']',
     $filters[0],
     $filters[1],
     '{display: table-row;}',
-    
-    
+
     '.fpa-perm-counter{display: none;}',
     '.fpa-perm-counter',
     $filters[0],
     '{display: inline;}',
-    
-    
+
     '.fpa-left-section li[' . FPA_ATTR_MODULE . ']',
     drupal_strlen($filters[1]) > 0 ? $filters[1] : '[' . FPA_ATTR_MODULE . '=""]',
     '{margin-right:-1px; background-color: white; border-right: solid 1px transparent;}',
-  );
-  
+  ];
+
   $wrapper['perm_styles']['style']['#value'] = implode('', $filter_styles);
-  
-  
-  $cookie_roles = (!empty($_COOKIE['fpa_roles']) && $same_page) ? json_decode($_COOKIE['fpa_roles']) : array();
-  
-  $options = array(
+
+  $cookie_roles = (!empty($_COOKIE['fpa_roles']) && $same_page) ? json_decode($_COOKIE['fpa_roles']) : [];
+
+  $options = [
     '*' => t('--All Roles'),
-  );
-  
+  ];
+
   if (!empty($user_roles)) {
-    $options += $user_roles; // Preserves keys.
+    // Preserves keys.
+    $options += $user_roles;
   }
-  
+
   if (in_array('*', $cookie_roles)) {
-    $cookie_roles  = array('*');
+    $cookie_roles = ['*'];
   }
-  
-  $filter_form['role_filter'] = array(
+
+  $filter_form['role_filter'] = [
     '#type' => 'select',
     '#title' => t('Roles:'),
     '#description' => t('Select which roles to display.<br>Ctrl+click to select multiple.'),
     '#size' => 5,
     '#options' => $options,
-    '#attributes' => array(
+    '#attributes' => [
       'multiple' => 'multiple',
-      'autocomplete' => 'off', // Keep browser from populating this from 'cached' input.
-    ),
-    '#value' => count(array_intersect($cookie_roles, array_keys($options))) > 0 ? $cookie_roles : array('*'),
-  );
-  
+  // Keep browser from populating this from 'cached' input.
+      'autocomplete' => 'off',
+    ],
+    '#value' => count(array_intersect($cookie_roles, array_keys($options))) > 0 ? $cookie_roles : ['*'],
+  ];
+
   /*
    * Populate the roles styles.
    */
   if (!in_array('*', $filter_form['role_filter']['#value'])) {
-    
-    $role_styles = array(
+
+    $role_styles = [
       '.fpa-table-wrapper [' . FPA_ATTR_ROLE . '] {display: none;}',
-    );
-    
+    ];
+
     foreach ($filter_form['role_filter']['#value'] as $value) {
-      
+
       $role_styles[] = '.fpa-table-wrapper [' . FPA_ATTR_ROLE . '="' . $value . '"] {display: table-cell;}';
     }
-    
+
     $role_styles[] = '.fpa-table-wrapper [' . FPA_ATTR_ROLE . '="' . end($filter_form['role_filter']['#value']) . '"] {border-right: 1px solid #bebfb9;}';
-    
+
     $wrapper['role_styles']['style']['#value'] = implode('', $role_styles);
   }
-  
-  $checked_status = array(
+
+  $checked_status = [
     '#type' => 'checkboxes',
     '#title' => t('Display permissions that are:'),
-    '#options' => array(
+    '#options' => [
       FPA_ATTR_CHECKED => t('Checked'),
       FPA_ATTR_NOT_CHECKED => t('Not Checked'),
-    ),
-    '#attributes' => array(),
+    ],
+    '#attributes' => [],
     '#title_display' => 'before',
     '#description' => t('Applies to all visible roles.<br />Unsaved changes are not counted.<br />Most effective when a single role is visible.<br />Empty module rows sometimes display when used with permission filter.'),
-  );
-  
+  ];
+
   $checked_status_keys = array_keys($checked_status['#options']);
-  
+
   $checked_status['#value'] = array_combine($checked_status_keys, $checked_status_keys);
-  
+
   $filter_form['checked_status'] = form_process_checkboxes($checked_status);
-  
+
   foreach (element_children($filter_form['checked_status']) as $key) {
     $filter_form['checked_status'][$key]['#checked'] = TRUE;
     $filter_form['checked_status'][$key]['#id'] = drupal_html_id('edit-checkboxes-' . $key);
   }
-  
+
   $right_section['filter_form'] = $filter_form;
-  
-  $table_wrapper = array(
+
+  $table_wrapper = [
     '#type' => 'container',
-    '#attributes' => array(
-      'class' => array(
+    '#attributes' => [
+      'class' => [
         'fpa-table-wrapper',
-      ),
-    ),
-  );
-  
-  $table_wrapper['table'] = array(
+      ],
+    ],
+  ];
+
+  $table_wrapper['table'] = [
     '#theme' => 'table',
     '#header' => $permissions_table['header'],
     '#rows' => $permissions_table['rows'],
-    '#attributes' => array(
+    '#attributes' => [
       'id' => 'permissions',
-    ),
-  );
-  
+    ],
+  ];
+
   // Show after full table HTML is loaded. Reduces progressive table load reflow/repaint.
-  $table_wrapper['show_table'] = array(
+  $table_wrapper['show_table'] = [
     '#type' => 'html_tag',
     '#tag' => 'style',
-    '#attributes' => array(
-      'type' => array(
+    '#attributes' => [
+      'type' => [
         'text/css',
-      ),
-    ),
+      ],
+    ],
     '#value' => '#permissions {display: table;} .fpa-table-wrapper {background: none;}',
-  );
-  
-  $table_wrapper['buttons'] = array(
+  ];
+
+  $table_wrapper['buttons'] = [
     '#type' => 'markup',
     '#markup' => $actions_output,
-  );
-  
+  ];
+
   $right_section['table_wrapper'] = $table_wrapper;
-  
-  
+
   return drupal_render($render);
 }
diff --git a/js/fpa.js b/js/fpa.js
index 06ec7bd..4219dd7 100644
--- a/js/fpa.js
+++ b/js/fpa.js
@@ -1,101 +1,101 @@
-/**
+;/**
  * @file
  * JS functionality that creates dynamic CSS which hides permission rows and role columns.
  */
 
 // Wrapper normalizes 'jQuery' to '$'.
-;(function fpa_scope($, Drupal, window, document) {
+(function fpa_scope($, Drupal, window, document) {
   "use strict";
-  
+
   var Fpa = function (context, settings) {
     this.init(context, settings);
-    
+
     return this;
   };
-  
+
   Fpa.prototype.selector = {
     form: '#user-admin-permissions',
     table : '#permissions'
   };
-  
+
   Fpa.prototype.init = function (context, settings) {
-    
+
     this.drupal_html_class_cache = {};
-    
+
     this.dom = {};
-    
+
     this.attr = settings.attr;
-    
-    this.filter_timeout= null;
+
+    this.filter_timeout = null;
     this.filter_timeout_time = 0;
-    
+
     this.module_match = '*=';
-    
+
     this.filter_selector_cache = {
       '*=': {},
       '~=': {}
     };
-    
+
     this.selector.table_base_selector = '.fpa-table-wrapper tr[' + this.attr.module + ']';
     this.selector.list_counter_selector = '.fpa-perm-counter';
     this.selector.list_base_selector = '.fpa-left-section li[' + this.attr.module + ']';
-    
+
     if (this.select(context)) {
-      
+
       this.prepare();
-      
+
       this.authenticated_role_behavior();
     }
   };
-  
+
   Fpa.prototype.styles = {
     module_active_style: '{margin-right:-1px; background-color: white; border-right: solid 1px transparent;}'
   };
-  
+
   /**
    * Select all elements that are used by FPA ahead of time and cache on 'Fpa' instance.
    */
   Fpa.prototype.select = function (context) {
-    
+
     this.dom.context = $(context);
-    
+
     this.dom.form = this.dom.context.find(this.selector.form);
-    
+
     // Prevent anything else from running if the form is not found.
     if (this.dom.form.length === 0) {
       return false;
     }
-    
+
     this.dom.container = this.dom.form.find('.fpa-container');
-    
+
     // Raw element since $().html(); does not work for <style /> elements.
     this.dom.perm_style = this.dom.container.find('.fpa-perm-styles style').get(0);
     this.dom.role_style = this.dom.container.find('.fpa-role-styles style').get(0);
-    
+
     this.dom.section_left = this.dom.container.find('.fpa-left-section');
     this.dom.section_right = this.dom.container.find('.fpa-right-section');
-    
+
     this.dom.table_wrapper = this.dom.section_right.find('.fpa-table-wrapper');
     this.dom.table = this.dom.table_wrapper.find(this.selector.table);
-    
+
     this.dom.module_list = this.dom.section_left.find('ul');
-    
+
     this.dom.filter_form = this.dom.container.find('.fpa-filter-form');
-    
+
     this.dom.filter = this.dom.filter_form.find('input[type="text"]');
     this.dom.role_select = this.dom.filter_form.find('select');
     this.dom.checked_status = this.dom.filter_form.find('input[type="checkbox"]');
-    
+
     return true;
   };
-  
+
   /**
    * Prepares a string for use as a CSS identifier (element, class, or ID name).
-   * 
+   *
    * @see https://api.drupal.org/api/drupal/includes!common.inc/function/drupal_clean_css_identifier/7
    */
   Fpa.prototype.drupal_clean_css_identifier = function (str) {
-    
+
     return str
     // replace ' ', '_', '/', '[' with '-'
     .replace(/[ _\/\[]/g, '-')
@@ -111,312 +111,310 @@
     // We strip out any character not in the above list.
     .replace(/[^\u002D\u0030-\u0039\u0041-\u005A\u005F\u0061-\u007A\u00A1-\uFFFF]/, '');
   };
-  
+
   /**
    * Prepares a string for use as a valid class name.
-   * 
+   *
    * @see https://api.drupal.org/api/drupal/includes!common.inc/function/drupal_html_class/7
    */
   Fpa.prototype.drupal_html_class = function (str) {
-    
+
     if (this.drupal_html_class_cache[str] === undefined) {
       this.drupal_html_class_cache[str] = this.drupal_clean_css_identifier(str.toLowerCase());
     }
-    
+
     return this.drupal_html_class_cache[str];
   };
-  
+
   /**
    * Handles applying styles to <style /> tags.
    */
   Fpa.prototype.set_style = (function () {
-    
+
     // Feature detection. Mainly for IE8.
     if ($('<style type="text/css" />').get(0).styleSheet) {
       return function (element, styles) {
-        
+
         element.styleSheet.cssText = styles;
       };
     }
-    
+
     // Default that works in modern browsers.
     return function (element, styles) {
       element.innerHTML = styles;
     };
   })();
-  
+
   /**
    * Callback for click events on module list.
    */
   Fpa.prototype.filter_module = function (e) {
-    
+
     e.preventDefault();
     e.stopPropagation();
-    
+
     var $this = $(e.currentTarget);
-    
+
     this.dom.filter.val([
-      
+
       // remove current module filter string.
       this.dom.filter.val().replace(/(@.*)/, ''),
-      
+
       // remove trailing @ as that means no module; clean 'All' filter value
       ($this.attr(this.attr.module) !== undefined && $this.attr(this.attr.module) !== '') ? '@' + $this.find('a[href]').text() : ''
-      
-    ].join('')); 
-    
+
+    ].join(''));
+
     /**
      * ~= matches exactly one whitespace separated word in attribute.
-     * 
+     *
      * @see http://www.w3.org/TR/CSS2/selector.html#matching-attrs
      */
     this.module_match = '~=';
-    
+
     this.filter();
   };
-  
+
   Fpa.prototype.build_filter_selectors = function (filter_string) {
-    
+
     // Extracts 'permissions@module', trimming leading and trailing whitespace.
     var matches = filter_string.match(/^\s*([^@]*)@?(.*?)\s*$/i);
-    
+
     matches.shift(); // Remove whole match item.
-    
+
     var safe_matches = $.map(matches, $.proxy(this.drupal_html_class, this));
-    
+
     this.filter_selector_cache[this.module_match][filter_string] = [
-      safe_matches[0].length > 0 ? '[' + this.attr.permission          + '*="' + safe_matches[0] + '"]' : '',
+      safe_matches[0].length > 0 ? '[' + this.attr.permission + '*="' + safe_matches[0] + '"]' : '',
       safe_matches[1].length > 0 ? '[' + this.attr.module + this.module_match + '"' + safe_matches[1] + '"]' : ''
     ];
-    
+
     return this.filter_selector_cache[this.module_match][filter_string];
   };
-  
+
   Fpa.prototype.get_filter_selectors = function (filter_string) {
-    
+
     filter_string = filter_string || this.dom.filter.val();
-    
+
     return this.filter_selector_cache[this.module_match][filter_string] || this.build_filter_selectors(filter_string);
   };
-  
+
   Fpa.prototype.permission_grid_styles = function (filters) {
-    
+
     filters = filters || this.get_filter_selectors();
-    
+
     var checked_filters = this.build_checked_selectors();
-    
+
     var styles = [
       this.selector.table_base_selector,
       '{display: none;}'
     ];
-    
+
     for (var i = 0; i < checked_filters.length; i++) {
-      
+
       styles = styles.concat([
         this.selector.table_base_selector,
-        
+
         checked_filters[i],
-        
+
         filters[0],
         filters[1],
         '{display: table-row;}'
       ]);
     }
-    
+
     return styles.join('');
-    
+
   };
-  
+
   Fpa.prototype.counter_styles = function (filters) {
-    
+
     filters = filters || this.get_filter_selectors();
-    
+
     return [
       this.selector.list_counter_selector,
       '{display: none;}',
-      
+
       this.selector.list_counter_selector,
       filters[0],
       '{display: inline;}'
     ].join('');
-    
+
   };
-  
+
   Fpa.prototype.module_list_styles = function (filters) {
-    
+
     filters = filters || this.get_filter_selectors();
-    
-    return [ 
+
+    return [
       this.selector.list_base_selector,
       (filters[1].length > 0 ? filters[1] : '[' + this.attr.module + '=""]'),
       this.styles.module_active_style
     ].join('');
-    
+
   };
-  
+
   Fpa.prototype.filter = function () {
-    
+
     var perm = this.dom.filter.val();
-    
+
     $.cookie('fpa_filter', perm, {path: '/'});
     $.cookie('fpa_module_match', this.module_match, {path: '/'});
-          
+
     this.save_filters();
-    
+
     var filter_selector = this.get_filter_selectors(perm);
-    
+
     this.set_style(this.dom.perm_style, [
-      
+
       this.permission_grid_styles(filter_selector),
-      
+
       this.counter_styles(filter_selector),
-      
+
       this.module_list_styles(filter_selector)
-      
+
     ].join(''));
   };
-  
+
   Fpa.prototype.build_role_selectors = function (roles) {
-    
+
     roles = roles || this.dom.role_select.val();
-    
+
     var selectors = ['*'];
-    
+
     if ($.inArray('*', roles) === -1) {
-      
+
       selectors = $.map(roles, $.proxy(function (value, index) {
-        
+
         return '[' + this.attr.role + '="' + value + '"]';
-        
+
       }, this));
     }
-    
+
     return selectors;
   };
-  
+
   Fpa.prototype.build_checked_selectors = function (roles) {
-    
+
     roles = roles || this.dom.role_select.val();
-    
+
     var checked_boxes = $.map(this.dom.checked_status, function (element, index) {
       return element.checked ? $(element).val() : null;
     });
-    
+
     var selectors = [''];
-    
+
     if ($.inArray('*', roles) !== -1) {
       roles = $.map(this.dom.role_select.find('option').not('[value="*"]'), $.proxy(function (element, index) {
-        
+
         return $(element).attr('value');
-        
+
       }, this));
     }
-    
+
     if (checked_boxes.length != this.dom.checked_status.length) {
-      
+
       selectors = $.map(roles, $.proxy(function (value, index) {
-        
+
         return $.map(checked_boxes, $.proxy(function (checked_attr, index) {
-          
+
           return '[' + checked_attr + '~="' + value + '"]';
-          
+
         }, this));
-        
+
       }, this));
     }
-    
+
     return selectors;
   };
-  
+
   // Even handler for role selection.
   Fpa.prototype.filter_roles = function () {
-    
+
     this.save_filters();
-    
+
     var values = this.dom.role_select.val() || [];
     var role_style_code = [];
-    
+
     $.cookie('fpa_roles', JSON.stringify(values), {path: '/'});
-    
+
     // Only filter if "All Roles" is not selected.
     if ($.inArray('*', values) === -1) {
-      
+
       role_style_code.push('.fpa-table-wrapper [' + this.attr.role + '] {display: none;}');
-      
+
       if (values.length > 0) {
-        
+
         var role_selectors = this.build_role_selectors(values);
-        
+
         role_style_code = role_style_code.concat($.map(role_selectors, $.proxy(function (value, index) {
-          
+
           return '.fpa-table-wrapper ' + value + ' {display: table-cell;}';
-          
+
         }, this)));
-        
+
         // Ensure right border on last visible role.
         role_style_code.push('.fpa-table-wrapper ' + role_selectors.pop() + ' {border-right: 1px solid #bebfb9;}');
       }
       else {
         role_style_code.push('td[class="permission"] {border-right: 1px solid #bebfb9;}');
       }
-      
+
     }
-    
+
     this.set_style(this.dom.role_style, role_style_code.join(''));
-    
+
     this.filter();
   };
-  
+
   /**
    * Prevent the current filter from being cleared on form reset.
    */
   Fpa.prototype.save_filters = function () {
-    
+
     /**
      * element.defaultValue is what 'text' elements reset to.
-     * 
+     *
      * @link http://www.w3.org/TR/REC-DOM-Level-1/level-one-html.html#ID-26091157
      */
     this.dom.filter.get(0).defaultValue = this.dom.filter.val();
-    
+
     /**
      * element.defaultSelected is what 'option' elements reset to.
-     * 
+     *
      * @see http://www.w3.org/TR/REC-DOM-Level-1/level-one-html.html#ID-37770574
      */
     this.dom.role_select.find('option').each(function (index, element) {
       element.defaultSelected = element.selected;
     });
-    
+
     /**
      * element.defaultChecked is what 'checkbox' elements reset to.
-     * 
+     *
      * @see http://www.w3.org/TR/REC-DOM-Level-1/level-one-html.html#ID-20509171
      */
     this.dom.checked_status.each(function (index, element) {
       element.defaultChecked = element.checked;
     });
   };
-  
+
   Fpa.prototype.prepare = function () {
-    
+
     this.filter_timeout_time = Math.min(this.dom.table.find('tr').length, 200);
-    
+
     this.dom.form
       .delegate('.fpa-toggle-container a', 'click', $.proxy(function fpa_toggle(e) {
         e.preventDefault();
-        
+
         var toggle_class = $(e.currentTarget).attr('fpa-toggle-class');
-        
+
         this.dom.container.toggleClass(toggle_class).hasClass(toggle_class);
-        
-      }, this))
-    ;
-    
+
+      }, this));
+
     this.dom.section_left
-      .delegate('li', 'click', $.proxy(this.filter_module, this))
-    ;
-    
+      .delegate('li', 'click', $.proxy(this.filter_module, this));
+
     this.dom.filter
       // Prevent Enter/Return from submitting form.
       .keypress(function fpa_prevent_form_submission(e) {
@@ -427,171 +425,153 @@
       })
       // Prevent non-character keys from triggering filter.
       .keyup($.proxy(function fpa_filter_keyup(e) {
-        
+
         // Prevent ['Enter', 'Shift', 'Ctrl', 'Alt'] from triggering filter.
         if ($.inArray(e.which, [13, 16, 17, 18]) === -1) {
-          
+
           window.clearTimeout(this.filter_timeout);
-          
+
           this.filter_timeout = window.setTimeout($.proxy(function () {
-            
+
             this.dom.table_wrapper
               .detach()
               .each($.proxy(function (index, element) {
-                
+
                 this.module_match = '*=';
-                
+
                 this.filter();
               }, this))
-              .appendTo(this.dom.section_right)
-            ;
-            
+              .appendTo(this.dom.section_right);
+
           }, this), this.filter_timeout_time);
         }
-      }, this))
-    ;
-    
+      }, this));
+
     // Handle links to sections on permission admin page.
     this.dom.form
       .delegate('a[href*="admin/people/permissions#"]', 'click', $.proxy(function fpa_inter_page_links_click(e) {
         e.preventDefault();
         e.stopPropagation();
-        
+
         this.dom.module_list
           .find('li[' + this.attr.module + '~="' + this.drupal_html_class(e.currentTarget.hash.substring(8)) + '"]')
-          .click()
-        ;
-        
+          .click();
+
         $('body').scrollTop(this.dom.container.position().top);
-      }, this))
-    ;
-    
+      }, this));
+
     // Handler for links that use #hash and can't be capture server side.
     if(window.location.hash.indexOf('module-') === 1) {
-      
+
       this.dom.module_list
         .find('li[' + this.attr.module + '~="' + this.drupal_html_class(window.location.hash.substring(8)) + '"]')
-        .click()
-      ;
+        .click();
     }
-    
+
     /**
      * Reset authenticated role behavior when form resets.
-     * 
+     *
      * @todo should this be synchronous? Would have to trigger reset on elements while detached.
      */
     this.dom.form.bind('reset', $.proxy(function fpa_form_reset(e) {
-      
+
       // Wait till after the form elements have been reset.
       window.setTimeout($.proxy(function fpa_fix_authenticated_behavior() {
-        
+
         this.dom.table_wrapper
           .detach() // Don't make numerous changes while elements are in the rendered DOM.
           .each($.proxy(function (index, element) {
-            
+
             $(element)
               .find('input[type="checkbox"].rid-2')
-              .each(this.dummy_checkbox_behavior)
-            ;
+              .each(this.dummy_checkbox_behavior);
           }, this))
-          .appendTo(this.dom.section_right)
-        ;
-        
+          .appendTo(this.dom.section_right);
+
       }, this), 0);
     }, this));
-    
-    
+
     // Role checkboxes toggle all visible permissions for this column.
     this.dom.section_right
       .delegate('th[' + this.attr.role + '] input[type="checkbox"].fpa-checkboxes-toggle', 'change', $.proxy(function fpa_role_permissions_toggle(e) {
-        
+
         var $this = $(e.currentTarget);
-        
+
         // Get visible rows selectors.
         var filters = this.get_filter_selectors(this.dom.filter.val());
-        
+
         this.dom.table_wrapper
           .detach()
           .each($.proxy(function (index, element) {
-            
+
             var rid = $this.closest('[' + this.attr.role + ']').attr(this.attr.role);
-            
+
             $(element)
               .find([
                 'tr' + filters.join(''),
                 'td.checkbox[' + this.attr.role + '="' + rid + '"]',
                 'input[type="checkbox"][name]'
               ].join(' ')) // Array is easier to read, separated for descendant selectors.
-              
+
               .attr('checked', $this.attr('checked'))
-              
+
               .filter('.rid-2') // Following only applies to "Authenticated User" role.
-              .each(this.dummy_checkbox_behavior)
-            ;
+              .each(this.dummy_checkbox_behavior);
           }, this))
-          .appendTo(this.dom.section_right)
-        ;
-        
-      }, this))
-    ;
-    
+          .appendTo(this.dom.section_right);
+
+      }, this));
+
     // Permission checkboxes toggle all visible permissions for this row.
     this.dom.section_right
       .delegate('td.permission input[type="checkbox"].fpa-checkboxes-toggle', 'change', $.proxy(function fpa_role_permissions_toggle(e) {
-        
+
         // Get visible rows selectors.
-        
+
         var $row = $(e.currentTarget).closest('tr');
-        
+
         $row.prev('tr').after(
-          
           $row
           .detach()
           .each($.proxy(function (index, element) {
-            
+
             $(element)
               .find('td.checkbox')
               .filter(this.build_role_selectors().join(','))
               .find('input[type="checkbox"][name]')
-              
+
               .attr('checked', e.currentTarget.checked)
-              
+
               .filter('.rid-2') // Following only applies to "Authenticated User" role.
-              .each(this.dummy_checkbox_behavior)
-            ;
-            
+              .each(this.dummy_checkbox_behavior);
+
           }, this))
         );
-        
-      }, this))
-    ;
-    
+
+      }, this));
+
     // Clear contents of search field and reset visible permissions.
     this.dom.section_right
       .delegate('.fpa-clear-search', 'click', $.proxy(function (e) {
-        
+
         this.dom.filter
-          .val('')
-        ;
-        
+          .val('');
+
         this.filter();
-      }, this))
-    ;
-    
+      }, this));
+
     // Change visible roles.
     this.dom.role_select
-      .bind('change blur', $.proxy(this.filter_roles, this))
-    ;
-    
+      .bind('change blur', $.proxy(this.filter_roles, this));
+
     this.dom.checked_status
       .bind('change', $.proxy(function (e) {
-        
+
         this.save_filters();
-        
+
         this.filter();
-        
-      }, this))
-    ;
+
+      }, this));
 
     /**
      * System name is not normally selectable because its a pseudo-element.
@@ -608,59 +588,56 @@
 
           window.prompt('You can grab the system name here', $target.attr(this.attr.system_name));
         }
-      }, this))
-    ;
-    
+      }, this));
+
     // Focus on element takes long time, bump after normal execution.
     window.setTimeout($.proxy(function fpa_filter_focus() {
       this.dom.filter.focus();
     }, this), 0);
-    
+
   };
-  
+
   /**
    * Event handler/iterator.
-   * 
+   *
    * Should not be $.proxy()'d.
    */
   Fpa.prototype.dummy_checkbox_behavior = function () {
     // 'this' refers to the element, not the 'Fpa' instance.
     $(this).closest('tr').toggleClass('fpa-authenticated-role-behavior', this.checked);
   };
-  
+
   Fpa.prototype.authenticated_role_behavior = function () {
-    
+
     this.dom.table_wrapper
       .delegate('input[type=checkbox].rid-2', 'mousedown', function (e) {
-        
+
         $(e.currentTarget).unbind('click.permissions');
       })
-      .delegate('input[type=checkbox].rid-2', 'change.fpa_authenticated_role', this.dummy_checkbox_behavior)
-    ;
+      .delegate('input[type=checkbox].rid-2', 'change.fpa_authenticated_role', this.dummy_checkbox_behavior);
   };
-  
+
   Drupal.behaviors.fpa = {
     attach: function (context, settings) {
-      
+
       // Add touch-screen styling for checkboxes to make easier to use.
       if (document.documentElement.ontouchstart !== undefined) {
         $(document.body).addClass('fpa-mobile');
       }
-      
+
       // Fix table sticky table headers width due to changes in visible roles.
       $(window)
         .bind('scroll', function fpa_fix_tableheader(e) {
           $(e.currentTarget).triggerHandler('resize.drupal-tableheader');
-        })
-      ;
+        });
 
       console.log('fpa');
       new Fpa(context, settings.fpa);
     }
   };
-  
+
   // Override Drupal core's Authenticated role checkbox behavior.
   Drupal.behaviors.permissions.attach = $.noop;
-  
+
   // Drupal.behaviors.formUpdated.attach = $.noop;
 })(jQuery, Drupal, window, document);
diff --git a/src/Controller/FPAController.php b/src/Controller/FPAController.php
index 8018e5d..1826aac 100644
--- a/src/Controller/FPAController.php
+++ b/src/Controller/FPAController.php
@@ -1,10 +1,5 @@
 <?php
 
-/**
- * @file
- * Contains Drupal\fpa\Controller\FPAController.
- */
-
 namespace Drupal\fpa\Controller;
 
 use Drupal\Core\Controller\ControllerBase;
@@ -17,6 +12,9 @@ use Drupal\fpa\FPAFormBuilder;
  */
 class FPAController extends ControllerBase {
 
+  /**
+   *
+   */
   public function permissionsList() {
     $render = FPAFormBuilder::buildFPAPage();
 
diff --git a/src/FPAFormBuilder.php b/src/FPAFormBuilder.php
index 33c2abc..03c31bf 100644
--- a/src/FPAFormBuilder.php
+++ b/src/FPAFormBuilder.php
@@ -1,10 +1,5 @@
 <?php
 
-/**
- * @file
- * Contains Drupal\fpa\FPAFormBuilder.
- */
-
 namespace Drupal\fpa;
 
 use Drupal\Component\Utility\Bytes;
@@ -20,7 +15,7 @@ use Drupal\Core\Link;
  *
  * @package Drupal\fpa
  */
-class FPAFormBuilder{
+class FPAFormBuilder {
 
   /**
    * @return int Approximate number of bytes of ram required to render the permissions form.
@@ -37,126 +32,136 @@ class FPAFormBuilder{
     $bytes_per_checkbox = 18924.508820799;
     $checkboxes_ram_required = $permissions_count * $user_roles_count * $bytes_per_checkbox;
     $output = (int) ($page_ram_required + $permissions_ram_required + $checkboxes_ram_required);
-    if (!empty($suffix)) return $output . $suffix;
+    if (!empty($suffix)) {
+      return $output . $suffix;
+    }
     return $output;
   }
 
+  /**
+   *
+   */
   public static function checkMemoryLimit() {
     $permissions_memory_required = static::getRequiredMemory('b');
     $memory_limit = ini_get('memory_limit');
     return ((!$memory_limit) || ($memory_limit == -1) || (Bytes::toInt($memory_limit) >= Bytes::toInt($permissions_memory_required)));
   }
 
+  /**
+   *
+   */
   public static function buildFPAPage() {
     $form = \Drupal::service('form_builder')->getForm('\Drupal\user\Form\UserPermissionsForm');
 
     $render = static::buildTable($form);
     $render['#attached']['library'][] = 'fpa/fpa.permissions';
-    $render['#attached']['drupalSettings'] = array(
-      'fpa' => array(
-        'attr' => array(
-          'permission' =>  FPA_ATTR_PERMISSION,
-          'module' =>      FPA_ATTR_MODULE,
-          'role' =>        FPA_ATTR_ROLE,
-
-          'checked' =>     FPA_ATTR_CHECKED,
+    $render['#attached']['drupalSettings'] = [
+      'fpa' => [
+        'attr' => [
+          'permission' => FPA_ATTR_PERMISSION,
+          'module' => FPA_ATTR_MODULE,
+          'role' => FPA_ATTR_ROLE,
+
+          'checked' => FPA_ATTR_CHECKED,
           'not_checked' => FPA_ATTR_NOT_CHECKED,
 
           'system_name' => FPA_ATTR_SYSTEM_NAME,
-        )
-      )
-    );
+        ],
+      ],
+    ];
 
     return $render;
   }
 
+  /**
+   *
+   */
   protected static function buildTable($form) {
     $renderer = \Drupal::service('renderer');
 
-    $nameless_checkbox = array(
+    $nameless_checkbox = [
       '#type' => 'html_tag',
       '#tag' => 'input',
-      '#attributes' => array(
+      '#attributes' => [
         'type' => 'checkbox',
-        'class' => array(
-          'rid-anonymous', // Prevents Drupal core Drupal.behaviors.permissions.toggle from applying.
+        'class' => [
+    // Prevents Drupal core Drupal.behaviors.permissions.toggle from applying.
+          'rid-anonymous',
           'form-checkbox',
           'fpa-checkboxes-toggle',
-        ),
-      ),
-    );
+        ],
+      ],
+    ];
 
-    $dummy_checkbox = array(
+    $dummy_checkbox = [
       '#type' => 'html_tag',
       '#tag' => 'input',
-      '#attributes' => array(
+      '#attributes' => [
         'type' => 'checkbox',
         'disabled' => 'disabled',
         'checked' => 'checked',
         'title' => t('This permission is inherited from the authenticated user role.'),
-        'class' => array(
+        'class' => [
           'dummy-checkbox',
-        ),
-      ),
-    );
+        ],
+      ],
+    ];
 
     $dummy_checkbox_output = $renderer->render($dummy_checkbox);
 
-    $permission_col_template = array(
+    $permission_col_template = [
       '#type' => 'container',
-      '#attributes' => array(
-        'class' => array(
+      '#attributes' => [
+        'class' => [
           'fpa-permission-container',
-        ),
-      ),
-      'description' => array(),
-      'checkbox_cell' => array(
+        ],
+      ],
+      'description' => [],
+      'checkbox_cell' => [
         '#type' => 'container',
-        '#attributes' => array(
-          'class' => array(
+        '#attributes' => [
+          'class' => [
             'fpa-row-toggle-container',
-          ),
-        ),
-        'checkbox_form_item' => array(
+          ],
+        ],
+        'checkbox_form_item' => [
           '#type' => 'container',
-          '#attributes' => array(
+          '#attributes' => [
             'title' => t('Toggle visible checkboxes in this row.'),
-            'class' => array(
+            'class' => [
               'form-item',
               'form-type-checkbox',
-            ),
-          ),
-          'label' => array(
+            ],
+          ],
+          'label' => [
             '#type' => 'html_tag',
             '#tag' => 'label',
-            '#attributes' => array(
-              'class' => array(
+            '#attributes' => [
+              'class' => [
                 'visually-hidden',
-              ),
-            ),
+              ],
+            ],
             '#value' => 'test',
-          ),
-          'checkbox' => $nameless_checkbox
-        ),
-      ),
-    );
+          ],
+          'checkbox' => $nameless_checkbox,
+        ],
+      ],
+    ];
 
     $roles = \Drupal::service('entity.manager')->getStorage('user_role')->loadMultiple();
-//    $site_modules = array_keys(\Drupal::service('module_handler')->getModuleList());
-
+    // $site_modules = array_keys(\Drupal::service('module_handler')->getModuleList());
     // Prepare role names processed by Html::getClass() ahead of time.
-    $roles_attr_values = array();
+    $roles_attr_values = [];
 
     foreach ($roles as $role) {
       $roles_attr_values[$role->get('id')] = Html::getClass($role->get('label'));
     }
 
-//    reset($array);
-//    $first_role_index = key($array);
-
+    // reset($array);
+    //    $first_role_index = key($array);
     // Lists for wrapper.
-    $modules = array();
-    $user_roles = array();
+    $modules = [];
+    $user_roles = [];
 
     // Index of current module row.
     $module = NULL;
@@ -164,19 +169,23 @@ class FPAFormBuilder{
     // Row counter.
     $i = 0;
 
-    $rows = array();
+    $rows = [];
 
     foreach (Element::children($form['permissions']) as $key) {
 
       // Row template.
-      $row = array(
-        'data' => array(), // Array of table cells.
-        'title' => array(), // HTML attribute on table row tag.
-        FPA_ATTR_MODULE => array(), // HTML attribute on table row tag.
-        FPA_ATTR_PERMISSION => array(), // HTML attribute on table row tag.
-        FPA_ATTR_CHECKED => array(),
-        FPA_ATTR_NOT_CHECKED => array(),
-      );
+      $row = [
+      // Array of table cells.
+        'data' => [],
+      // HTML attribute on table row tag.
+        'title' => [],
+      // HTML attribute on table row tag.
+        FPA_ATTR_MODULE => [],
+      // HTML attribute on table row tag.
+        FPA_ATTR_PERMISSION => [],
+        FPA_ATTR_CHECKED => [],
+        FPA_ATTR_NOT_CHECKED => [],
+      ];
 
       $current_element = $form['permissions'][$key];
       hide($form['permissions'][$key]);
@@ -185,43 +194,42 @@ class FPAFormBuilder{
       // Determine if row is module or permission.
       if (is_numeric($sub_children[0])) {
         // Module row.
-
         $row['class'][] = 'fpa-module-row';
 
         // Mark current row with escaped module name.
-        $row[FPA_ATTR_MODULE] = array(
-          // System name
+        $row[FPA_ATTR_MODULE] = [
+          // System name.
           0 => $key,
-          // Readable name
+          // Readable name.
           1 => strip_tags($current_element[0]['#markup']),
-        );
+        ];
 
-        // Readable
+        // Readable.
         hide($form['permissions'][$key][0]);
-        $row['data'][] = array(
+        $row['data'][] = [
           'data' => $form['permissions'][$key][0],
-          'class' => array('module'),
+          'class' => ['module'],
           'id' => 'module-' . $key,
           'colspan' => count($form['role_names']['#value']) + 1,
-        );
+        ];
 
-        $row['title'] = array($key);
+        $row['title'] = [$key];
 
         $row[FPA_ATTR_SYSTEM_NAME] = $row[FPA_ATTR_MODULE][0];
 
-        $classes = array();
+        $classes = [];
         foreach ($row[FPA_ATTR_MODULE] as $item) {
           $classes[] = Html::getClass($item);
         }
         $row[FPA_ATTR_MODULE] = array_unique($classes);
 
         // Add modules to left-side modules list.
-        $modules[$row[FPA_ATTR_MODULE][0]] = array(
+        $modules[$row[FPA_ATTR_MODULE][0]] = [
           'text' => strip_tags($current_element[0]['#markup']),
-          'title' => array($key),
+          'title' => [$key],
           FPA_ATTR_MODULE => $row[FPA_ATTR_MODULE],
-          FPA_ATTR_PERMISSION => array(),
-        );
+          FPA_ATTR_PERMISSION => [],
+        ];
 
         // Save row number for current module.
         $module = $i;
@@ -233,27 +241,25 @@ class FPAFormBuilder{
 
         $permission_system_name = $form['permissions'][$key]['description']['#context']['title']->render();
         // TODO: find out why this was done in D7
-//        $permission_system_name = '';
-//        // Might be empty if no modules are displayed in Permissions Filter module.
-//        if (!empty($sub_children[$roles_keys[0]])) {
-//          $permission_system_name = $sub_children[$roles_keys[0]['#return_value'];
-//        }
-
+        //        $permission_system_name = '';
+        //        // Might be empty if no modules are displayed in Permissions Filter module.
+        //        if (!empty($sub_children[$roles_keys[0]])) {
+        //          $permission_system_name = $sub_children[$roles_keys[0]['#return_value'];
+        //        }.
         $label = $permission_col_template;
 
         $label['description'] = $current_element['description'];
 
         // TODO: work on integration with permission filter module
-//        // Permissions filter might cause no Roles to display.
-//        if (count(element_children($form['checkboxes'])) == 0) {
-//          unset($label['checkbox_cell']);
-//        }
-
-        // Readable
-        $row['data'][] = array(
+        //        // Permissions filter might cause no Roles to display.
+        //        if (count(element_children($form['checkboxes'])) == 0) {
+        //          unset($label['checkbox_cell']);
+        //        }
+        // Readable.
+        $row['data'][] = [
           'data' => $label,
-          'class' => array('permission'),
-        );
+          'class' => ['permission'],
+        ];
 
         foreach ($roles_keys as $rid) {
           $checkbox = $form['permissions'][$key][$rid];
@@ -270,9 +276,10 @@ class FPAFormBuilder{
           }
 
           // For all roles that inherit permissions from 'authenticated user' role, add in dummy checkbox for authenticated role behavior.
-          // TODO: needs further testing
+          // TODO: needs further testing.
           if ($rid != 'anonymous' && $rid != 'authenticated') {
-            $checkbox['#suffix'] = $dummy_checkbox_output; // '#suffix' doesn't have wrapping HTML like '#field_suffix'.
+            // '#suffix' doesn't have wrapping HTML like '#field_suffix'.
+            $checkbox['#suffix'] = $dummy_checkbox_output;
           }
 
           // Add rid's to row attribute for checked status filter.
@@ -283,43 +290,43 @@ class FPAFormBuilder{
             $row[FPA_ATTR_NOT_CHECKED][] = $rid;
           }
 
-          $row['data'][] = array(
+          $row['data'][] = [
             'data' => $checkbox,
-            'class' => array(
+            'class' => [
               'checkbox',
-            ),
-            'title' => array(
+            ],
+            'title' => [
               $roles[$rid]->get('label'),
-            ),
-            // For role filter
-            FPA_ATTR_ROLE => array(
+            ],
+            // For role filter.
+            FPA_ATTR_ROLE => [
               $rid,
-            ),
-          );
+            ],
+          ];
         }
 
         if (!empty($rid)) {
-          $row['title'] = array(
+          $row['title'] = [
             $key,
-          );
+          ];
 
-          $row[FPA_ATTR_SYSTEM_NAME] = array(
+          $row[FPA_ATTR_SYSTEM_NAME] = [
             $key,
-          );
+          ];
         }
 
         // Mark current row with escaped permission name.
-        $row[FPA_ATTR_PERMISSION] = array(
+        $row[FPA_ATTR_PERMISSION] = [
           // Permission system name.
           0 => $permission_system_name,
           // Readable description.
           1 => $form['permissions'][$key]['description']['#context']['title']->render(),
-        );
+        ];
 
         // Mark current row with current module.
         $row[FPA_ATTR_MODULE] = $rows[$module][FPA_ATTR_MODULE];
 
-        $classes = array();
+        $classes = [];
         foreach ($row[FPA_ATTR_PERMISSION] as $item) {
           $classes[] = Html::getClass($item);
         }
@@ -337,15 +344,15 @@ class FPAFormBuilder{
       $rows[$i++] = $row;
     }
 
-    $reset_button = array(
+    $reset_button = [
       '#type' => 'html_tag',
       '#tag' => 'input',
-      '#attributes' => array(
+      '#attributes' => [
         'type' => 'reset',
         'class' => 'form-submit',
         'value' => t('Reset changes'),
-      ),
-    );
+      ],
+    ];
 
     // If there is no submit button, don't add the reset button.
     if (count(Element::children($form['actions'])) > 0) {
@@ -359,51 +366,53 @@ class FPAFormBuilder{
       $actions_output[] = $form['actions'][$key];
     }
 
-    $header = array();
+    $header = [];
 
-    $header[] = array(
+    $header[] = [
       'data' => [
         'label' => [
           '#type' => 'markup',
           '#markup' => t('Permission'),
         ],
-        'actions' => $actions_output
+        'actions' => $actions_output,
       ],
-    );
+    ];
 
     foreach ($form['role_names']['#value'] as $rid => $label) {
       hide($form['role_names']['#value'][$rid]);
 
-      $header[] = array(
+      $header[] = [
         'data' => [
           'label' => [
             '#type' => 'markup',
-            '#markup' => $label
+            '#markup' => $label,
           ],
-          'checkbox' => $nameless_checkbox
+          'checkbox' => $nameless_checkbox,
         ],
-        'class' => array(
+        'class' => [
           'checkbox',
-        ),
-        'title' => array(
+        ],
+        'title' => [
           $label,
-        ),
-        FPA_ATTR_ROLE => array(
+        ],
+        FPA_ATTR_ROLE => [
           $rid,
-        ),
-      );
+        ],
+      ];
       $user_roles[$rid] = $label;
     }
 
-    $table = array(
+    $table = [
       'header' => $header,
       'rows' => $rows,
-    );
+    ];
 
     $table_wrapper = static::buildTableWrapper($table, $modules, $user_roles, $actions_output);
 
     foreach (Element::children($form) as $key) {
-      if ($key == 'actions' || $key == 'permissions') continue;
+      if ($key == 'actions' || $key == 'permissions') {
+        continue;
+      }
       $table_wrapper[$key] = $form[$key];
     }
 
@@ -415,95 +424,100 @@ class FPAFormBuilder{
     return $form;
   }
 
+  /**
+   *
+   */
   protected static function buildTableWrapper($permissions_table, $modules, $user_roles, $actions_output) {
     $renderer = \Drupal::service('renderer');
 
-    // TODO: find out if there is a sf way to do this
+    // TODO: find out if there is a sf way to do this.
     $same_page = trim(parse_url($_SERVER['HTTP_REFERER'], PHP_URL_PATH), '/') == $_GET['q'];
 
-    $render = array(
+    $render = [
       '#type' => 'container',
-      '#attributes' => array(
-        'class' => array(
+      '#attributes' => [
+        'class' => [
           'fpa-container',
-        ),
-      ),
-    );
+        ],
+      ],
+    ];
 
-    $hiders = array(
-      'fpa-hide-descriptions' => array(
+    $hiders = [
+      'fpa-hide-descriptions' => [
         'hide' => t('Hide descriptions'),
         'show' => t('Show descriptions'),
-      ),
-      'fpa-hide-system-names' => array(
+      ],
+      'fpa-hide-system-names' => [
         'hide' => t('Hide system names'),
         'show' => t('Show system names'),
-      ),
-    );
+      ],
+    ];
 
     $render['#attributes']['class'][] = 'fpa-hide-system-names';
 
-    $hide_container = array(
+    $hide_container = [
       '#type' => 'container',
-      '#attributes' => array(
-        'class' => array(
+      '#attributes' => [
+        'class' => [
           'fpa-toggle-container',
-        ),
-      ),
-    );
+        ],
+      ],
+    ];
 
     foreach ($hiders as $hide_class => $labels) {
-      $hide_container[$hide_class] = array(
+      $hide_container[$hide_class] = [
         '#theme' => 'link',
         '#text' => '',
         '#path' => '',
-        '#options' => array(
-          'attributes' => array_merge($labels, array(
+        '#options' => [
+          'attributes' => array_merge($labels, [
             'fpa-toggle-class' => $hide_class,
-          )),
+          ]),
           'html' => TRUE,
           'fragment' => ' ',
-          'external' => TRUE, // Prevent base path from being added to link.
-        ),
-      );
+      // Prevent base path from being added to link.
+          'external' => TRUE,
+        ],
+      ];
     }
 
     $render['hide_container'] = $hide_container;
 
-    $wrapper = array(
+    $wrapper = [
       '#type' => 'container',
-      '#attributes' => array(
-        'class' => array(
+      '#attributes' => [
+        'class' => [
           'fpa-wrapper',
-        ),
-      ),
-    );
+        ],
+      ],
+    ];
 
     $render['wrapper'] = &$wrapper;
 
-
     /**
      * <style /> block template.
      */
-    $style_template = array(
+    $style_template = [
       '#type' => 'container',
-      '#attributes' => array(
-        'class' => array(
-          'style-wrapper-class-name', // Override on specific block.
-        ),
-      ),
-    );
-
-    $style_template['style'] = array(
+      '#attributes' => [
+        'class' => [
+    // Override on specific block.
+          'style-wrapper-class-name',
+        ],
+      ],
+    ];
+
+    $style_template['style'] = [
       '#type' => 'html_tag',
       '#tag' => 'style',
-      '#attributes' => array(
-        'type' => array(
+      '#attributes' => [
+        'type' => [
           'text/css',
-        ),
-      ),
-      '#value' => '', // #value needed for closing tag.
-    );
+        ],
+      ],
+      // #value needed for closing tag.
+      '#value' => '',
+    ];
 
     /**
      * <style /> block for role filtering.
@@ -520,97 +534,99 @@ class FPAFormBuilder{
     /**
      * Left section contains module list and form submission button.
      */
-    $left_section = array(
+    $left_section = [
       '#type' => 'container',
-      '#attributes' => array(
-        'class' => array(
+      '#attributes' => [
+        'class' => [
           'fpa-left-section',
-        ),
-      ),
-    );
+        ],
+      ],
+    ];
 
     $wrapper['left_section'] = &$left_section;
 
-
     /**
      * Right section contains filter form and permissions table.
      */
-    $right_section = array(
+    $right_section = [
       '#type' => 'container',
-      '#attributes' => array(
-        'class' => array(
+      '#attributes' => [
+        'class' => [
           'fpa-right-section',
-        ),
-      ),
-    );
+        ],
+      ],
+    ];
 
     $wrapper['right_section'] = &$right_section;
 
-    $module_template = array(
-      '#wrapper_attributes' => array(
-        FPA_ATTR_MODULE => array(),
-        FPA_ATTR_PERMISSION => array()
-      ),
-      'data' => array(
+    $module_template = [
+      '#wrapper_attributes' => [
+        FPA_ATTR_MODULE => [],
+        FPA_ATTR_PERMISSION => [],
+      ],
+      'data' => [
         '#type' => 'container',
-        '#attributes' => array(),
+        '#attributes' => [],
 
         'link' => NULL,
 
-        'counters' => array(),
+        'counters' => [],
 
-        'total' => array(
+        'total' => [
           '#type' => 'html_tag',
           '#tag' => 'span',
-          '#attributes' => array(
-            'class' => array('fpa-perm-total'),
+          '#attributes' => [
+            'class' => ['fpa-perm-total'],
             'fpa-total' => 0,
-          ),
-          '#value' => '', // #value needed for closing tag.
-        ),
-      ),
-    );
+          ],
+          // #value needed for closing tag.
+          '#value' => '',
+        ],
+      ],
+    ];
 
-    $counter_template = array(
+    $counter_template = [
       '#type' => 'html_tag',
       '#tag' => 'span',
-      '#attributes' => array(
-        'class' => array('fpa-perm-counter'),
-        FPA_ATTR_PERMISSION => array(), // Counters only count permissions match.
-      ),
-      '#value' => '', // #value required for closing tag.
-    );
+      '#attributes' => [
+        'class' => ['fpa-perm-counter'],
+    // Counters only count permissions match.
+        FPA_ATTR_PERMISSION => [],
+      ],
+      // #value required for closing tag.
+      '#value' => '',
+    ];
 
-    $items = array();
+    $items = [];
 
-    $all_modules = array(
+    $all_modules = [
       'text' => t('All modules'),
-      FPA_ATTR_MODULE => array(),
-      FPA_ATTR_PERMISSION => array(),
-    );
+      FPA_ATTR_MODULE => [],
+      FPA_ATTR_PERMISSION => [],
+    ];
 
     array_unshift($modules, $all_modules);
 
-    $all_modules_counters = array();
+    $all_modules_counters = [];
 
     foreach ($modules as $module) {
 
       $module_item = $module_template;
 
       $module_item['#wrapper_attributes'][FPA_ATTR_MODULE] = $module[FPA_ATTR_MODULE];
-      $module_item['#wrapper_attributes'][FPA_ATTR_PERMISSION] = array_reduce($module[FPA_ATTR_PERMISSION], 'array_merge', array());
+      $module_item['#wrapper_attributes'][FPA_ATTR_PERMISSION] = array_reduce($module[FPA_ATTR_PERMISSION], 'array_merge', []);
 
       // Use link for accessibility and tabability.
-      $options = array(
+      $options = [
         'fragment' => 'all',
-      );
+      ];
 
       if (!empty($module['title'])) {
         $options['fragment'] = 'module-' . $module['title'][0];
         $options['attributes']['title'] = $module['title'][0];
       }
 
-      $module_item['data']['link'] = Link::createFromRoute($module['text'], 'user.admin_permissions', array(), $options)->toRenderable();
+      $module_item['data']['link'] = Link::createFromRoute($module['text'], 'user.admin_permissions', [], $options)->toRenderable();
 
       foreach ($module[FPA_ATTR_PERMISSION] as $module_perm) {
         $counter_item = $counter_template;
@@ -627,36 +643,36 @@ class FPAFormBuilder{
     $items[0]['data']['counters'] = $all_modules_counters;
     $items[0]['data']['total']['#attributes']['fpa-total'] = count($all_modules_counters);
 
-    $left_section['list'] = array(
+    $left_section['list'] = [
       '#items' => $items,
       '#theme' => 'item_list',
-    );
+    ];
 
     $left_section['buttons'] = $actions_output;
 
-    $filter_form = array(
+    $filter_form = [
       '#type' => 'container',
-      '#attributes' => array(
-        'class' => array(
+      '#attributes' => [
+        'class' => [
           'fpa-filter-form',
-        ),
-      ),
-    );
+        ],
+      ],
+    ];
 
-    $clear_button = array(
+    $clear_button = [
       '#type' => 'html_tag',
       '#tag' => 'input',
-      '#attributes' => array(
-        'type' => array(
+      '#attributes' => [
+        'type' => [
           'button',
-        ),
-        'class' => array(
+        ],
+        'class' => [
           'fpa-clear-search',
           'form-submit',
-        ),
+        ],
         'value' => 'Clear filter',
-      ),
-    );
+      ],
+    ];
 
     $default_filter = '';
 
@@ -668,44 +684,44 @@ class FPAFormBuilder{
       $default_filter = $_COOKIE['fpa_filter'];
     }
 
-
-    $filter_form['permission_module_filter'] = array(
+    $filter_form['permission_module_filter'] = [
       '#type' => 'textfield',
       '#title' => t('Filter:'),
       '#size' => 25,
       '#field_suffix' => $renderer->render($clear_button),
-      '#attributes' => array(
-        'placeholder' => array(
+      '#attributes' => [
+        'placeholder' => [
           'permission@module',
-        ),
+        ],
         'autofocus' => 'autofocus',
-      ),
+      ],
       '#value' => $default_filter,
       '#description' => t('<p>Enter in the format of "permission@module",</p><p>e.g. <em>admin@system</em> will show only permissions with the<br>text "admin" in modules with the text "system".</p><p>This will also match on system name of a permission.</p>'),
-    );
+    ];
 
     /*
      * Populate the permission filter styles.
      */
-    $matches = array();
+    $matches = [];
 
     preg_match('/^\s*([^@]*)@?(.*?)\s*$/i', $filter_form['permission_module_filter']['#value'], $matches);
 
-    array_shift($matches); // Remove whole match item.
+    // Remove whole match item.
+    array_shift($matches);
 
-    $safe_matches = array();
-    foreach($matches as $match) {
+    $safe_matches = [];
+    foreach ($matches as $match) {
       $safe_matches[] = Html::getClass($match);
     }
 
     $module_match = !empty($_COOKIE['module_match']) ? $_COOKIE['module_match'] : '*=';
 
-    $filters = array(
-      Unicode::strlen($safe_matches[0]) > 0 ? ('[' . FPA_ATTR_PERMISSION .               '*="' . $safe_matches[0] . '"]') : '',
-      Unicode::strlen($safe_matches[1]) > 0 ? ('[' . FPA_ATTR_MODULE     . $module_match . '"' . $safe_matches[1] . '"]') : '',
-    );
+    $filters = [
+      Unicode::strlen($safe_matches[0]) > 0 ? ('[' . FPA_ATTR_PERMISSION . '*="' . $safe_matches[0] . '"]') : '',
+      Unicode::strlen($safe_matches[1]) > 0 ? ('[' . FPA_ATTR_MODULE . $module_match . '"' . $safe_matches[1] . '"]') : '',
+    ];
 
-    $filter_styles = array(
+    $filter_styles = [
       '.fpa-table-wrapper tr[' . FPA_ATTR_MODULE . ']{display: none;}',
 
       '.fpa-table-wrapper tr[' . FPA_ATTR_MODULE . ']',
@@ -713,56 +729,55 @@ class FPAFormBuilder{
       $filters[1],
       '{display: table-row;}',
 
-
       '.fpa-perm-counter{display: none;}',
       '.fpa-perm-counter',
       $filters[0],
       '{display: inline;}',
 
-
       '.fpa-left-section li[' . FPA_ATTR_MODULE . ']',
       Unicode::strlen($filters[1]) > 0 ? $filters[1] : '[' . FPA_ATTR_MODULE . '=""]',
       '{margin-right:-1px; background-color: white; border-right: solid 1px transparent;}',
-    );
+    ];
 
     $wrapper['perm_styles']['style']['#value'] = implode('', $filter_styles);
 
+    $cookie_roles = (!empty($_COOKIE['fpa_roles']) && $same_page) ? json_decode($_COOKIE['fpa_roles']) : [];
 
-    $cookie_roles = (!empty($_COOKIE['fpa_roles']) && $same_page) ? json_decode($_COOKIE['fpa_roles']) : array();
-
-    $options = array(
+    $options = [
       '*' => t('--All Roles'),
-    );
+    ];
 
     if (!empty($user_roles)) {
-      $options += $user_roles; // Preserves keys.
+      // Preserves keys.
+      $options += $user_roles;
     }
 
     if (in_array('*', $cookie_roles)) {
-      $cookie_roles  = array('*');
+      $cookie_roles = ['*'];
     }
 
-    $filter_form['role_filter'] = array(
+    $filter_form['role_filter'] = [
       '#type' => 'select',
       '#title' => t('Roles:'),
       '#description' => t('Select which roles to display.<br>Ctrl+click to select multiple.'),
       '#size' => 5,
       '#options' => $options,
-      '#attributes' => array(
+      '#attributes' => [
         'multiple' => 'multiple',
-        'autocomplete' => 'off', // Keep browser from populating this from 'cached' input.
-      ),
-      '#value' => count(array_intersect($cookie_roles, array_keys($options))) > 0 ? $cookie_roles : array('*'),
-    );
+    // Keep browser from populating this from 'cached' input.
+        'autocomplete' => 'off',
+      ],
+      '#value' => count(array_intersect($cookie_roles, array_keys($options))) > 0 ? $cookie_roles : ['*'],
+    ];
 
     /*
      * Populate the roles styles.
      */
     if (!in_array('*', $filter_form['role_filter']['#value'])) {
 
-      $role_styles = array(
+      $role_styles = [
         '.fpa-table-wrapper [' . FPA_ATTR_ROLE . '] {display: none;}',
-      );
+      ];
 
       foreach ($filter_form['role_filter']['#value'] as $value) {
 
@@ -774,23 +789,23 @@ class FPAFormBuilder{
       $wrapper['role_styles']['style']['#value'] = implode('', $role_styles);
     }
 
-    $checked_status = array(
+    $checked_status = [
       '#type' => 'checkboxes',
       '#title' => t('Display permissions that are:'),
-      '#options' => array(
+      '#options' => [
         FPA_ATTR_CHECKED => t('Checked'),
         FPA_ATTR_NOT_CHECKED => t('Not Checked'),
-      ),
-      '#attributes' => array(),
+      ],
+      '#attributes' => [],
       '#title_display' => 'before',
       '#description' => t('Applies to all visible roles.<br />Unsaved changes are not counted.<br />Most effective when a single role is visible.<br />Empty module rows sometimes display when used with permission filter.'),
-    );
+    ];
 
     $checked_status_keys = array_keys($checked_status['#options']);
 
     $checked_status['#value'] = array_combine($checked_status_keys, $checked_status_keys);
 
-    $pseudo_form = array();
+    $pseudo_form = [];
     $filter_form['checked_status'] = Checkboxes::processCheckboxes($checked_status, new FormState(), $pseudo_form);
 
     foreach (Element::children($filter_form['checked_status']) as $key) {
@@ -799,35 +814,35 @@ class FPAFormBuilder{
 
     $right_section['filter_form'] = $filter_form;
 
-    $table_wrapper = array(
+    $table_wrapper = [
       '#type' => 'container',
-      '#attributes' => array(
-        'class' => array(
+      '#attributes' => [
+        'class' => [
           'fpa-table-wrapper',
-        ),
-      ),
-    );
+        ],
+      ],
+    ];
 
-    $table_wrapper['table'] = array(
+    $table_wrapper['table'] = [
       '#theme' => 'table',
       '#header' => $permissions_table['header'],
       '#rows' => $permissions_table['rows'],
-      '#attributes' => array(
+      '#attributes' => [
         'id' => 'permissions',
-      ),
-    );
+      ],
+    ];
 
     // Show after full table HTML is loaded. Reduces progressive table load reflow/repaint.
-    $table_wrapper['show_table'] = array(
+    $table_wrapper['show_table'] = [
       '#type' => 'html_tag',
       '#tag' => 'style',
-      '#attributes' => array(
-        'type' => array(
+      '#attributes' => [
+        'type' => [
           'text/css',
-        ),
-      ),
+        ],
+      ],
       '#value' => '#permissions {display: table;} .fpa-table-wrapper {background: none;}',
-    );
+    ];
 
     $table_wrapper['buttons'] = $actions_output;
 
@@ -835,4 +850,5 @@ class FPAFormBuilder{
 
     return $render;
   }
-}
\ No newline at end of file
+
+}
diff --git a/src/Routing/RouteSubscriber.php b/src/Routing/RouteSubscriber.php
index 82d92b9..93c7786 100644
--- a/src/Routing/RouteSubscriber.php
+++ b/src/Routing/RouteSubscriber.php
@@ -1,13 +1,7 @@
 <?php
 
-/**
- * @file
- * Contains \Drupal\fpa\Routing\RouteSubscriber.
- */
-
 namespace Drupal\fpa\Routing;
 
-
 use Drupal\Core\Routing\RouteSubscriberBase;
 use Symfony\Component\Routing\RouteCollection;
 
@@ -15,17 +9,18 @@ use Symfony\Component\Routing\RouteCollection;
  * Listens to the dynamic route events.
  */
 class RouteSubscriber extends RouteSubscriberBase {
+
   /**
    * {@inheritdoc}
    */
   protected function alterRoutes(RouteCollection $collection) {
     $route = $collection->get('user.admin_permissions');
     if ($route) {
-      $route->setDefaults(array(
+      $route->setDefaults([
         '_title' => 'Permissions',
-        '_controller' => '\Drupal\fpa\Controller\FPAController::permissionsList'
-      ));
+        '_controller' => '\Drupal\fpa\Controller\FPAController::permissionsList',
+      ]);
     }
   }
 
-}
\ No newline at end of file
+}
