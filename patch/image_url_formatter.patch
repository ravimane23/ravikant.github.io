diff --git a/src/Plugin/Field/FieldFormatter/ImageUrlFormatter.php b/src/Plugin/Field/FieldFormatter/ImageUrlFormatter.php
index 4695e32..7ace4d6 100644
--- a/src/Plugin/Field/FieldFormatter/ImageUrlFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/ImageUrlFormatter.php
@@ -1,10 +1,5 @@
 <?php
 
-/**
- * @file
- * Contains \Drupal\image_url_formatter\Plugin\Field\FieldFormatter\ImageUrlFormatter.
- */
-
 namespace Drupal\image_url_formatter\Plugin\Field\FieldFormatter;
 
 use Drupal\Core\Entity\EntityStorageInterface;
@@ -103,54 +98,53 @@ class ImageUrlFormatter extends ImageFormatterBase implements ContainerFactoryPl
    * {@inheritdoc}
    */
   public static function defaultSettings() {
-    return array(
+    return [
       'url_type' => '',
       'image_style' => '',
       'image_link' => '',
-    ) + parent::defaultSettings();
+    ] + parent::defaultSettings();
   }
 
   /**
    * {@inheritdoc}
    */
   public function settingsForm(array $form, FormStateInterface $form_state) {
-    $element['url_type'] = array(
+    $element['url_type'] = [
       '#title' => t('URL type'),
       '#type' => 'select',
-      '#options' => array(
-	    0 => t('Full URL'),
+      '#options' => [
+        0 => t('Full URL'),
         1 => t('Absolute file path'),
         2 => t('Relative file path'),
-      ),
+      ],
       '#default_value' => $this->getSetting('url_type'),
-    );
-    //$element['url_type'][0]['#description'] = t("Like: 'http://example.com/sites/default/files/image.png'"); 
-    //$element['url_type'][1]['#description'] = t("With leading slash, no base URL, like: '/sites/default/files/image.png'");
-    //$element['url_type'][2]['#description'] = t("No base URL or leading slash, like: 'sites/default/files/image.png'");
-
+    ];
+    // $element['url_type'][0]['#description'] = t("Like: 'http://example.com/sites/default/files/image.png'");
+    // $element['url_type'][1]['#description'] = t("With leading slash, no base URL, like: '/sites/default/files/image.png'");
+    // $element['url_type'][2]['#description'] = t("No base URL or leading slash, like: 'sites/default/files/image.png'");
     $image_styles = image_style_options(FALSE);
-    $element['image_style'] = array(
+    $element['image_style'] = [
       '#title' => t('Image style'),
       '#type' => 'select',
       '#default_value' => $this->getSetting('image_style'),
       '#empty_option' => t('None (original image)'),
       '#options' => $image_styles,
-      '#description' => array(
+      '#description' => [
         '#markup' => $this->linkGenerator->generate($this->t('Configure Image Styles'), new Url('entity.image_style.collection')),
         '#access' => $this->currentUser->hasPermission('administer image styles'),
-      ),
-    );
-    $link_types = array(
+      ],
+    ];
+    $link_types = [
       'content' => t('Content'),
       'file' => t('File'),
-    );
-    $element['image_link'] = array(
+    ];
+    $element['image_link'] = [
       '#title' => t('Link image to'),
       '#type' => 'select',
       '#default_value' => $this->getSetting('image_link'),
       '#empty_option' => t('Nothing'),
       '#options' => $link_types,
-    );
+    ];
 
     return $element;
   }
@@ -159,7 +153,7 @@ class ImageUrlFormatter extends ImageFormatterBase implements ContainerFactoryPl
    * {@inheritdoc}
    */
   public function settingsSummary() {
-    $summary = array();
+    $summary = [];
 
     switch ($this->getSetting('url_type')) {
       case 2:
@@ -182,16 +176,16 @@ class ImageUrlFormatter extends ImageFormatterBase implements ContainerFactoryPl
     // their styles in code.
     $image_style_setting = $this->getSetting('image_style');
     if (isset($image_styles[$image_style_setting])) {
-      $summary[] = t('URL for Image style: @style', array('@style' => $image_styles[$image_style_setting]));
+      $summary[] = t('URL for Image style: @style', ['@style' => $image_styles[$image_style_setting]]);
     }
     else {
       $summary[] = t('Original image');
     }
 
-    $link_types = array(
+    $link_types = [
       'content' => t('Linked to content'),
       'file' => t('Linked to file'),
-    );
+    ];
     // Display this setting only if image is linked.
     $image_link_setting = $this->getSetting('image_link');
     if (isset($link_types[$image_link_setting])) {
@@ -204,7 +198,7 @@ class ImageUrlFormatter extends ImageFormatterBase implements ContainerFactoryPl
    * {@inheritdoc}
    */
   public function viewElements(FieldItemListInterface $items, $langcode) {
-    $elements = array();
+    $elements = [];
     $files = $this->getEntitiesToView($items, $langcode);
 
     // Early opt-out if the field is empty.
@@ -228,7 +222,7 @@ class ImageUrlFormatter extends ImageFormatterBase implements ContainerFactoryPl
     $image_style_setting = $this->getSetting('image_style');
     $url_type_setting = $this->getSetting('url_type');
     // Collect cache tags to be added for each item in the field.
-    $cache_tags = array();
+    $cache_tags = [];
     if (!empty($image_style_setting)) {
       $image_style = $this->imageStyleStorage->load($image_style_setting);
       $cache_tags = $image_style->getCacheTags();
@@ -247,17 +241,17 @@ class ImageUrlFormatter extends ImageFormatterBase implements ContainerFactoryPl
       $item_attributes = $item->_attributes;
       unset($item->_attributes);
 
-      $elements[$delta] = array(
+      $elements[$delta] = [
         '#theme' => 'image_url_formatter',
         '#item' => $item,
         '#item_attributes' => $item_attributes,
         '#image_style' => $image_style_setting,
         '#url_type' => $url_type_setting,
         '#url' => $url,
-        '#cache' => array(
+        '#cache' => [
           'tags' => $cache_tags,
-        ),
-      );
+        ],
+      ];
     }
 
     return $elements;
