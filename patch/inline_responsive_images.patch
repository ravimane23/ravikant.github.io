diff --git a/src/Form/ResponsiveEditorImageDialog.php b/src/Form/ResponsiveEditorImageDialog.php
index c585c7b..6707507 100644
--- a/src/Form/ResponsiveEditorImageDialog.php
+++ b/src/Form/ResponsiveEditorImageDialog.php
@@ -1,51 +1,45 @@
 <?php
-/**
- * @file
- * Contains \Drupal\inline_responsive_images\Form\ResponsiveEditorImageDialog.
- */
 
 namespace Drupal\inline_responsive_images\Form;
 
-use Drupal\Component\Utility\Bytes;
-use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
-use Drupal\filter\Entity\FilterFormat;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\HtmlCommand;
 use Drupal\editor\Ajax\EditorDialogSave;
 use Drupal\Core\Ajax\CloseModalDialogCommand;
-use Symfony\Component\DependencyInjection\ContainerInterface;
-use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\editor\Form\EditorImageDialog;
 
 /**
  * Provides an image dialog for text editors.
  */
-class ResponsiveEditorImageDialog extends EditorImageDialog{
+class ResponsiveEditorImageDialog extends EditorImageDialog {
 
+  /**
+   *
+   */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $response = new AjaxResponse();
-    
+
     // Convert any uploaded files from the FID values to data-entity-uuid
     // attributes and set data-entity-type to 'file'.
-    $fid = $form_state->getValue(array('fid', 0));
+    $fid = $form_state->getValue(['fid', 0]);
     if (!empty($fid)) {
       $file = $this->fileStorage->load($fid);
       $file_url = file_create_url($file->getFileUri());
       // Transform absolute image URLs to relative image URLs: prevent problems
       // on multisite set-ups and prevent mixed content errors.
       $file_url = file_url_transform_relative($file_url);
-      if(!$form_state->getValue(array('attributes', 'src'))) {
-        $form_state->setValue(array('attributes', 'src'), $file_url);
+      if (!$form_state->getValue(['attributes', 'src'])) {
+        $form_state->setValue(['attributes', 'src'], $file_url);
       }
-      $form_state->setValue(array('attributes', 'data-entity-uuid'), $file->uuid());
-      $form_state->setValue(array('attributes', 'data-entity-type'), 'file');
+      $form_state->setValue(['attributes', 'data-entity-uuid'], $file->uuid());
+      $form_state->setValue(['attributes', 'data-entity-type'], 'file');
     }
 
     // When the alt attribute is set to two double quotes, transform it to the
     // empty string: two double quotes signify "empty alt attribute". See above.
-    if (trim($form_state->getValue(array('attributes', 'alt'))) === '""') {
-      $form_state->setValue(array('attributes', 'alt'), '');
+    if (trim($form_state->getValue(['attributes', 'alt'])) === '""') {
+      $form_state->setValue(['attributes', 'alt'], '');
     }
 
     if ($form_state->getErrors()) {
@@ -62,6 +56,6 @@ class ResponsiveEditorImageDialog extends EditorImageDialog{
     }
 
     return $response;
-  }  
-  
-}
\ No newline at end of file
+  }
+
+}
diff --git a/src/Plugin/CKEditorPlugin/DrupalImageStyle.php b/src/Plugin/CKEditorPlugin/DrupalImageStyle.php
index 567d6c9..0ebb20e 100644
--- a/src/Plugin/CKEditorPlugin/DrupalImageStyle.php
+++ b/src/Plugin/CKEditorPlugin/DrupalImageStyle.php
@@ -1,10 +1,5 @@
 <?php
 
-/**
- * @file
- * Contains \Drupal\inline_responsive_images\Plugin\CKEditorPlugin\DrupalImageStyle.
- */
-
 namespace Drupal\inline_responsive_images\Plugin\CKEditorPlugin;
 
 use Drupal\Component\Plugin\PluginBase;
@@ -88,4 +83,4 @@ class DrupalImageStyle extends PluginBase implements CKEditorPluginInterface, CK
     return FALSE;
   }
 
-}
\ No newline at end of file
+}
diff --git a/src/Plugin/CKEditorPlugin/DrupalResponsiveImageStyle.php b/src/Plugin/CKEditorPlugin/DrupalResponsiveImageStyle.php
index 413c3f4..c2eb0e8 100644
--- a/src/Plugin/CKEditorPlugin/DrupalResponsiveImageStyle.php
+++ b/src/Plugin/CKEditorPlugin/DrupalResponsiveImageStyle.php
@@ -1,10 +1,5 @@
 <?php
 
-/**
- * @file
- * Contains \Drupal\inline_responsive_images\Plugin\CKEditorPlugin\DrupalResponsiveImageStyle.
- */
-
 namespace Drupal\inline_responsive_images\Plugin\CKEditorPlugin;
 
 use Drupal\Component\Plugin\PluginBase;
@@ -34,14 +29,14 @@ class DrupalResponsiveImageStyle extends PluginBase implements CKEditorPluginInt
    * {@inheritdoc}
    */
   public function getDependencies(Editor $editor) {
-    return array();
+    return [];
   }
 
   /**
    * {@inheritdoc}
    */
   public function getLibraries(Editor $editor) {
-    return array();
+    return [];
   }
 
   /**
@@ -55,7 +50,7 @@ class DrupalResponsiveImageStyle extends PluginBase implements CKEditorPluginInt
    * {@inheritdoc}
    */
   public function getConfig(Editor $editor) {
-    return array();
+    return [];
   }
 
   /**
@@ -88,4 +83,4 @@ class DrupalResponsiveImageStyle extends PluginBase implements CKEditorPluginInt
     return FALSE;
   }
 
-}
\ No newline at end of file
+}
diff --git a/src/Plugin/Filter/FilterImageStyle.php b/src/Plugin/Filter/FilterImageStyle.php
index 75dc09a..e37b4be 100644
--- a/src/Plugin/Filter/FilterImageStyle.php
+++ b/src/Plugin/Filter/FilterImageStyle.php
@@ -1,10 +1,5 @@
 <?php
 
-/**
- * @file
- * Contains \Drupal\inline_responsive_images\Plugin\Filter\FilterImageStyle.
- */
-
 namespace Drupal\inline_responsive_images\Plugin\Filter;
 
 use Drupal\Component\Utility\Html;
@@ -30,16 +25,16 @@ class FilterImageStyle extends FilterBase {
    */
   public function settingsForm(array $form, FormStateInterface $form_state) {
     $image_styles = \Drupal::entityTypeManager()->getStorage('image_style')->loadMultiple();
-    $form['image_styles'] = array(
+    $form['image_styles'] = [
       '#type' => 'markup',
       '#markup' => 'Select the image styles that are available in the editor',
-    );
+    ];
     foreach ($image_styles as $image_style) {
-      $form['image_style_' . $image_style->id()] = array(
+      $form['image_style_' . $image_style->id()] = [
         '#type' => 'checkbox',
         '#title' => $image_style->label(),
         '#default_value' => isset($this->settings['image_style_' . $image_style->id()]) ? $this->settings['image_style_' . $image_style->id()] : 0,
-      );
+      ];
     }
     return $form;
   }
@@ -86,21 +81,21 @@ class FilterImageStyle extends FilterBase {
         $node->removeAttribute('src');
 
         // Make sure all non-regenerated attributes are retained.
-        $attributes = array();
+        $attributes = [];
         for ($i = 0; $i < $node->attributes->length; $i++) {
           $attr = $node->attributes->item($i);
           $attributes[$attr->name] = $attr->value;
         }
 
         // Set up image render array.
-        $image = array(
+        $image = [
           '#theme' => 'image_style',
           '#uri' => $file->getFileUri(),
           '#width' => $width,
           '#height' => $height,
           '#attributes' => $attributes,
           '#style_name' => $image_style_id,
-        );
+        ];
 
         $altered_html = \Drupal::service('renderer')->render($image);
 
@@ -135,10 +130,11 @@ class FilterImageStyle extends FilterBase {
       $image_styles = \Drupal::entityTypeManager()->getStorage('image_style')->loadMultiple();
       $list = '<code>' . implode('</code>, <code>', array_keys($image_styles)) . '</code>';
       return t('
-        <p>You can display images using a site-wide style by adding a <code>data-image-style</code> attribute, whose value is one of the image style machine names: !image-style-machine-name-list.</p>', array('!image-style-machine-name-list' => $list));
+        <p>You can display images using a site-wide style by adding a <code>data-image-style</code> attribute, whose value is one of the image style machine names: !image-style-machine-name-list.</p>', ['!image-style-machine-name-list' => $list]);
     }
     else {
       return t('You can display images using site-wide styles by adding a data-image-style attribute.');
     }
   }
+
 }
diff --git a/src/Plugin/Filter/FilterResponsiveImageStyle.php b/src/Plugin/Filter/FilterResponsiveImageStyle.php
index 936cf91..9688391 100644
--- a/src/Plugin/Filter/FilterResponsiveImageStyle.php
+++ b/src/Plugin/Filter/FilterResponsiveImageStyle.php
@@ -1,10 +1,5 @@
 <?php
 
-/**
- * @file
- * Contains \Drupal\inline_responsive_images\Plugin\Filter\FilterResponsiveImageStyle.
- */
-
 namespace Drupal\inline_responsive_images\Plugin\Filter;
 
 use Drupal\Component\Utility\Html;
@@ -30,16 +25,16 @@ class FilterResponsiveImageStyle extends FilterBase {
    */
   public function settingsForm(array $form, FormStateInterface $form_state) {
     $image_styles = \Drupal::entityTypeManager()->getStorage('responsive_image_style')->loadMultiple();
-    $form['responsive_styles'] = array(
+    $form['responsive_styles'] = [
       '#type' => 'markup',
       '#markup' => 'Select the responsive styles that are available in the editor',
-    );
+    ];
     foreach ($image_styles as $image_style) {
-      $form['responsive_style_' . $image_style->id()] = array(
+      $form['responsive_style_' . $image_style->id()] = [
         '#type' => 'checkbox',
         '#title' => $image_style->label(),
         '#default_value' => isset($this->settings['responsive_style_' . $image_style->id()]) ? $this->settings['responsive_style_' . $image_style->id()] : 0,
-      );
+      ];
     }
     return $form;
   }
@@ -86,21 +81,21 @@ class FilterResponsiveImageStyle extends FilterBase {
         $node->removeAttribute('src');
 
         // Make sure all non-regenerated attributes are retained.
-        $attributes = array();
+        $attributes = [];
         for ($i = 0; $i < $node->attributes->length; $i++) {
           $attr = $node->attributes->item($i);
           $attributes[$attr->name] = $attr->value;
         }
 
         // Set up image render array.
-        $image = array(
+        $image = [
           '#theme' => 'responsive_image',
           '#uri' => $file->getFileUri(),
           '#width' => $width,
           '#height' => $height,
           '#attributes' => $attributes,
           '#responsive_image_style_id' => $image_style_id,
-        );
+        ];
 
         $altered_html = \Drupal::service('renderer')->render($image);
 
@@ -135,10 +130,11 @@ class FilterResponsiveImageStyle extends FilterBase {
       $image_styles = \Drupal::entityTypeManager()->getStorage('responsive_image_style')->loadMultiple();
       $list = '<code>' . implode('</code>, <code>', array_keys($image_styles)) . '</code>';
       return t('
-        <p>You can make images responsive by adding a <code>data-responsive-image-style</code> attribute, whose value is one of the responsive image style machine names: !responsive-image-style-machine-name-list.</p>', array('!responsive-image-style-machine-name-list' => $list));
+        <p>You can make images responsive by adding a <code>data-responsive-image-style</code> attribute, whose value is one of the responsive image style machine names: !responsive-image-style-machine-name-list.</p>', ['!responsive-image-style-machine-name-list' => $list]);
     }
     else {
       return t('You can make images responsive by adding a data-responsive-image-style attribute.');
     }
   }
+
 }
diff --git a/src/Routing/RouteSubscriber.php b/src/Routing/RouteSubscriber.php
index a3d1053..86156ec 100644
--- a/src/Routing/RouteSubscriber.php
+++ b/src/Routing/RouteSubscriber.php
@@ -1,8 +1,4 @@
 <?php
-/**
- * @file
- * Contains \Drupal\inline_responsive_images\Routing\RouteSubscriber.
- */
 
 namespace Drupal\inline_responsive_images\Routing;
 
@@ -19,8 +15,8 @@ class RouteSubscriber extends RouteSubscriberBase {
    */
   public function alterRoutes(RouteCollection $collection) {
 
-  if ($route = $collection->get('editor.image_dialog')) {
-        $route->setDefaults(array('_form' =>  '\Drupal\inline_responsive_images\Form\ResponsiveEditorImageDialog'));
+    if ($route = $collection->get('editor.image_dialog')) {
+      $route->setDefaults(['_form' => '\Drupal\inline_responsive_images\Form\ResponsiveEditorImageDialog']);
     }
   }
 
