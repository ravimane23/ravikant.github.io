diff --git a/WidgetStable/ParagraphsReplicateEnableTest.php b/WidgetStable/ParagraphsReplicateEnableTest.php
index 1cc922a..e534da3 100644
--- a/WidgetStable/ParagraphsReplicateEnableTest.php
+++ b/WidgetStable/ParagraphsReplicateEnableTest.php
@@ -7,7 +7,6 @@ namespace Drupal\Tests\paragraphs\Functional\WidgetStable;
  *
  * @group paragraphs
  */
-
 class ParagraphsReplicateEnableTest extends ParagraphsDuplicateFeatureTest {
 
   public static $modules = [
diff --git a/css/gulp-tasks.js b/css/gulp-tasks.js
index 0524594..0ba8ffe 100644
--- a/css/gulp-tasks.js
+++ b/css/gulp-tasks.js
@@ -1,5 +1,5 @@
 // Define gulp tasks.
-module.exports = function(gulp, plugins, options) {
+module.exports = function (gulp, plugins, options) {
 
   'use strict';
 
@@ -17,7 +17,7 @@ module.exports = function(gulp, plugins, options) {
 
   // Defining gulp tasks.
 
-  gulp.task('sass', function() {
+  gulp.task('sass', function () {
     return gulp.src(options.scssSrc + '/*.scss')
       .pipe(plugins.sass({
         outputStyle: 'expanded',
diff --git a/css/paragraphs.actions.css b/css/paragraphs.actions.css
index 28eb053..4a434d7 100644
--- a/css/paragraphs.actions.css
+++ b/css/paragraphs.actions.css
@@ -5,8 +5,8 @@
   display: flex;
   -webkit-box-align: center;
   -webkit-align-items: center;
-      -ms-flex-align: center;
-          align-items: center;
+  -ms-flex-align: center;
+  align-items: center;
 }
 
 .paragraphs-actions > .button {
@@ -46,11 +46,12 @@
   }
 }
 
-.paragraphs-dropdown-toggle:hover, .paragraphs-dropdown-toggle:focus {
+.paragraphs-dropdown-toggle:hover,
+.paragraphs-dropdown-toggle:focus {
   background-color: #f9f8f6;
   border: 1px solid #a6a6a6;
   -webkit-box-shadow: 0 1px 2px rgba(0, 0, 0, 0.125);
-          box-shadow: 0 1px 2px rgba(0, 0, 0, 0.125);
+  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.125);
   outline: none;
 }
 
@@ -65,7 +66,7 @@
   border: 1px solid #a6a6a6;
   border-radius: 5px 0 5px 5px;
   -webkit-box-shadow: 0 2px 6px 0 #aaa;
-          box-shadow: 0 2px 6px 0 #aaa;
+  box-shadow: 0 2px 6px 0 #aaa;
 }
 
 @media (min-width: 768px) {
@@ -106,7 +107,7 @@
 .paragraphs-dropdown-action.button:focus {
   border: none;
   -webkit-box-shadow: none;
-          box-shadow: none;
+  box-shadow: none;
   outline: none;
 }
 
diff --git a/css/paragraphs.admin.css b/css/paragraphs.admin.css
index 58971cc..b51aafc 100644
--- a/css/paragraphs.admin.css
+++ b/css/paragraphs.admin.css
@@ -42,7 +42,6 @@
   padding-right: 1em;
   position: relative;
   width: 100%;
-
   color: #777;
   overflow: hidden;
   word-break: break-all;
@@ -54,7 +53,6 @@
   top: 0;
   right: 1em;
   width: 3em;
-
   background: #fff;
   background: linear-gradient(to right, rgba(255, 255, 255, 0) 0%, #fff 100%);
 }
@@ -70,7 +68,6 @@
 .js .paragraph-type-title {
   flex-basis: 25%;
   min-width: 80px;
-
   white-space: nowrap;
   text-overflow: ellipsis;
   overflow: hidden;
diff --git a/css/paragraphs.dragdrop.css b/css/paragraphs.dragdrop.css
index a8abdc8..fbaa35b 100644
--- a/css/paragraphs.dragdrop.css
+++ b/css/paragraphs.dragdrop.css
@@ -70,17 +70,17 @@
   position: relative;
   -webkit-box-flex: 0;
   -webkit-flex: 0 0 100%;
-      -ms-flex: 0 0 100%;
-          flex: 0 0 100%;
+  -ms-flex: 0 0 100%;
+  flex: 0 0 100%;
   -webkit-box-orient: horizontal;
   -webkit-box-direction: normal;
   -webkit-flex-flow: row wrap;
-      -ms-flex-flow: row wrap;
-          flex-flow: row wrap;
+  -ms-flex-flow: row wrap;
+  flex-flow: row wrap;
   -webkit-box-align: center;
   -webkit-align-items: center;
-      -ms-flex-align: center;
-          align-items: center;
+  -ms-flex-align: center;
+  align-items: center;
   min-height: var(--dnd-item-min-height);
   margin: 5px 5px 10px 0;
   padding: 0 0 0 var(--dnd-icon-size);
@@ -157,8 +157,8 @@
 .paragraphs-dragdrop__item .paragraphs-dragdrop-wrapper {
   -webkit-box-flex: 1;
   -webkit-flex: 1 0 calc(100% - var(--dnd-icon-size));
-      -ms-flex: 1 0 calc(100% - var(--dnd-icon-size));
-          flex: 1 0 calc(100% - var(--dnd-icon-size));
+  -ms-flex: 1 0 calc(100% - var(--dnd-icon-size));
+  flex: 1 0 calc(100% - var(--dnd-icon-size));
   width: calc(100% - var(--dnd-icon-size));
 }
 
@@ -169,8 +169,8 @@
   display: flex;
   -webkit-box-align: center;
   -webkit-align-items: center;
-      -ms-flex-align: center;
-          align-items: center;
+  -ms-flex-align: center;
+  align-items: center;
   height: 1.538em;
   margin: 5px 0;
   line-height: 1.538em;
@@ -187,15 +187,15 @@
   left: 0;
   -webkit-box-flex: 0;
   -webkit-flex: 0 0 var(--dnd-icon-size);
-      -ms-flex: 0 0 var(--dnd-icon-size);
-          flex: 0 0 var(--dnd-icon-size);
+  -ms-flex: 0 0 var(--dnd-icon-size);
+  flex: 0 0 var(--dnd-icon-size);
   -webkit-align-self: stretch;
-      -ms-flex-item-align: stretch;
-          align-self: stretch;
+  -ms-flex-item-align: stretch;
+  align-self: stretch;
   -webkit-box-pack: center;
   -webkit-justify-content: center;
-      -ms-flex-pack: center;
-          justify-content: center;
+  -ms-flex-pack: center;
+  justify-content: center;
   width: var(--dnd-icon-size);
   height: 100%;
   background: transparent;
@@ -207,8 +207,8 @@
   right: 0;
   left: auto;
   -webkit-align-self: flex-end;
-      -ms-flex-item-align: end;
-          align-self: flex-end;
+  -ms-flex-item-align: end;
+  align-self: flex-end;
 }
 
 .sortable-chosen > .paragraphs-dragdrop__handle {
diff --git a/css/paragraphs.formatter.css b/css/paragraphs.formatter.css
index 47f6580..ed51bed 100644
--- a/css/paragraphs.formatter.css
+++ b/css/paragraphs.formatter.css
@@ -67,14 +67,14 @@
   display: -ms-grid;
   display: grid;
   -ms-grid-columns: auto 1fr;
-      grid-template-columns: auto 1fr;
+  grid-template-columns: auto 1fr;
   -ms-grid-rows: auto;
-      grid-template-rows: auto;
+  grid-template-rows: auto;
   grid-gap: 5px 5px;
   -webkit-box-align: center;
   -webkit-align-items: center;
-      -ms-flex-align: center;
-          align-items: center;
+  -ms-flex-align: center;
+  align-items: center;
 }
 
 .paragraph-formatter .paragraph-info {
diff --git a/css/paragraphs.widget.css b/css/paragraphs.widget.css
index a2616b9..d5fcfb1 100644
--- a/css/paragraphs.widget.css
+++ b/css/paragraphs.widget.css
@@ -123,16 +123,24 @@
     border-radius: 4px;
     text-indent: -9999em;
   }
-  .button.paragraphs-icon-button-collapse, .button.paragraphs-icon-button-collapse:active, .button.paragraphs-icon-button-collapse:hover, .button.paragraphs-icon-button-collapse:focus {
+  .button.paragraphs-icon-button-collapse,
+  .button.paragraphs-icon-button-collapse:active,
+  .button.paragraphs-icon-button-collapse:hover,
+  .button.paragraphs-icon-button-collapse:focus {
     background-image: url("../icons/icon-collapse.svg");
   }
-  .button.paragraphs-icon-button-collapse:disabled, .button.paragraphs-icon-button-collapse:disabled:active {
+  .button.paragraphs-icon-button-collapse:disabled,
+  .button.paragraphs-icon-button-collapse:disabled:active {
     background-image: url("../icons/icon-collapse-disabled.svg");
   }
-  .button.paragraphs-icon-button-edit, .button.paragraphs-icon-button-edit:active, .button.paragraphs-icon-button-edit:hover, .button.paragraphs-icon-button-edit:focus {
+  .button.paragraphs-icon-button-edit,
+  .button.paragraphs-icon-button-edit:active,
+  .button.paragraphs-icon-button-edit:hover,
+  .button.paragraphs-icon-button-edit:focus {
     background-image: url("../icons/icon-edit.svg");
   }
-  .button.paragraphs-icon-button-edit:disabled, .button.paragraphs-icon-button-edit:disabled:active {
+  .button.paragraphs-icon-button-edit:disabled,
+  .button.paragraphs-icon-button-edit:disabled:active {
     background-image: url("../icons/icon-edit-disabled.svg");
   }
 }
@@ -171,8 +179,8 @@
 .js .field--widget-paragraphs .form-actions {
   -webkit-box-align: center;
   -webkit-align-items: center;
-      -ms-flex-align: center;
-          align-items: center;
+  -ms-flex-align: center;
+  align-items: center;
 }
 
 .js .field--widget-paragraphs .form-actions .dropbutton-multiple {
@@ -237,20 +245,20 @@
   display: -ms-grid;
   display: grid;
   -ms-grid-columns: 100px auto 1fr auto;
-      grid-template-columns: 100px auto 1fr auto;
+  grid-template-columns: 100px auto 1fr auto;
   -ms-grid-rows: auto auto;
-      grid-template-rows: auto auto;
+  grid-template-rows: auto auto;
   grid-gap: 0 5px;
   -webkit-box-align: baseline;
   -webkit-align-items: baseline;
-      -ms-flex-align: baseline;
-          align-items: baseline;
+  -ms-flex-align: baseline;
+  align-items: baseline;
 }
 
 @media (min-width: 992px) {
   .js .paragraph-top {
     -ms-grid-columns: 150px auto 1fr auto;
-        grid-template-columns: 150px auto 1fr auto;
+    grid-template-columns: 150px auto 1fr auto;
   }
 }
 
@@ -342,8 +350,8 @@ tr:hover .paragraphs-description::after {
   display: -ms-flexbox;
   display: flex;
   -webkit-flex-basis: 100px;
-      -ms-flex-preferred-size: 100px;
-          flex-basis: 100px;
+  -ms-flex-preferred-size: 100px;
+  flex-basis: 100px;
   min-width: 100px;
 }
 
diff --git a/js/paragraphs.add_above_button.js b/js/paragraphs.add_above_button.js
index 6a428f4..aa70e69 100644
--- a/js/paragraphs.add_above_button.js
+++ b/js/paragraphs.add_above_button.js
@@ -13,7 +13,7 @@
    * @param event
    *   Click event.
    */
-  var clickHandler = function(event) {
+  var clickHandler = function (event) {
     event.preventDefault();
     var $button = $(this);
     var $add_more_wrapper = $button.closest('table').siblings('.clearfix').find('.paragraphs-add-dialog');
diff --git a/js/paragraphs.admin.js b/js/paragraphs.admin.js
index f0696cb..7bd399d 100644
--- a/js/paragraphs.admin.js
+++ b/js/paragraphs.admin.js
@@ -126,17 +126,17 @@
    */
   Drupal.behaviors.bodyTabs = {
     attach: function (context) {
-      var $topLevelParWidgets = $('.paragraphs-tabs-wrapper', context).filter(function() {
+      var $topLevelParWidgets = $('.paragraphs-tabs-wrapper', context).filter(function () {
         return $(this).parents('.paragraphs-nested').length === 0;
       });
 
       // Initialization.
-      $topLevelParWidgets.once('paragraphs-bodytabs').each(function() {
+      $topLevelParWidgets.once('paragraphs-bodytabs').each(function () {
         var $parWidget = $(this);
         var $parTabs = $parWidget.find('.paragraphs-tabs');
 
         // Create click event.
-        $parTabs.find('a').click(function(e) {
+        $parTabs.find('a').click(function (e) {
           var toolbarHeight = $('.toolbar-tray-horizontal').outerHeight() || 0;
           var adminToolbarsOffset = $('#toolbar-bar').outerHeight() + toolbarHeight;
           var totalTopOffset = adminToolbarsOffset + $('.paragraphs-tabs').outerHeight();
@@ -165,7 +165,7 @@
             $('html, body').scrollTop($firstParagraph.offset().top - totalTopOffset - currentParagraphOffset);
 
             // Reset the first paragraph class with a delay, in order for the background change to be visible.
-            setTimeout(function() {
+            setTimeout(function () {
               $('.first-paragraph').removeClass('paragraph-hover');
             }, 1000);
           }
@@ -174,7 +174,7 @@
       });
 
       if ($('.paragraphs-tabs-wrapper', context).length > 0) {
-        $topLevelParWidgets.each(function() {
+        $topLevelParWidgets.each(function () {
           var $parWidget = $(this);
           var $parTabs = $parWidget.find('.paragraphs-tabs');
           var $parContent = $parWidget.find('.paragraphs-content');
@@ -186,4 +186,3 @@
     }
   };
 })(jQuery, Drupal);
-
diff --git a/js/paragraphs.dragdrop.js b/js/paragraphs.dragdrop.js
index 5373f6f..196be2e 100644
--- a/js/paragraphs.dragdrop.js
+++ b/js/paragraphs.dragdrop.js
@@ -50,7 +50,6 @@
     return (retVal === void 0) ? this : retVal;
   };
 
-
   Drupal.behaviors.paragraphsDraggable = {
     attach: function (context) {
       // Prevent default click handling on the drag handle.
@@ -65,7 +64,7 @@
           sort: true,
           handle: ".paragraphs-dragdrop__handle",
           onMove: isAllowed,
-          onEnd: function(evt) {
+          onEnd: function (evt) {
             handleReorder(evt);
             endDragClasses();
           },
@@ -162,7 +161,6 @@
         });
       }
 
-
       /**
        * Callback to check if a paragraph item can be dropped into a position.
        *
@@ -237,7 +235,7 @@
         // Fix race condition when the drag event start results in a scrollbar
         // position change triggered by a collapsing item with children. Add a
         // min-height for the current height as a workaround.
-        $('.paragraphs-dragdrop__list').eq(0).css('min-height', function() {
+        $('.paragraphs-dragdrop__list').eq(0).css('min-height', function () {
           return $(this).height();
         });
       }
diff --git a/modules/paragraphs_demo/tests/src/Functional/ParagraphsDemoTest.php b/modules/paragraphs_demo/tests/src/Functional/ParagraphsDemoTest.php
index 6ec1e19..4aa8df0 100644
--- a/modules/paragraphs_demo/tests/src/Functional/ParagraphsDemoTest.php
+++ b/modules/paragraphs_demo/tests/src/Functional/ParagraphsDemoTest.php
@@ -19,10 +19,10 @@ class ParagraphsDemoTest extends BrowserTestBase {
    *
    * @var string[]
    */
-  public static $modules = array(
+  public static $modules = [
     'paragraphs_demo',
     'block',
-  );
+  ];
 
   /**
    * {@inheritdoc}
@@ -51,7 +51,7 @@ class ParagraphsDemoTest extends BrowserTestBase {
     $this->assertSession()->pageTextContains('A search api example can be found');
     $this->assertSession()->pageTextContains('This is content from the library. We can reuse it multiple times without duplicating it.');
 
-    $admin_user = $this->drupalCreateUser(array(
+    $admin_user = $this->drupalCreateUser([
       'administer site configuration',
       'create paragraphed_content_demo content',
       'edit any paragraphed_content_demo content',
@@ -75,7 +75,7 @@ class ParagraphsDemoTest extends BrowserTestBase {
       'administer node form display',
       'administer paragraphs library',
       'use text format basic_html',
-    ));
+    ]);
 
     $this->drupalLogin($admin_user);
 
@@ -147,11 +147,11 @@ class ParagraphsDemoTest extends BrowserTestBase {
     $this->drupalPostForm(NULL, NULL, t('Add Text'));
     $this->assertSession()->responseNotContains('<strong data-drupal-selector="edit-field-paragraphs-demo-title">Paragraphs</strong>');
     $this->assertSession()->responseContains('<h4 class="label">Paragraphs</h4>');
-    $edit = array(
+    $edit = [
       'title[0][value]' => 'Paragraph title',
       'moderation_state[0][state]' => 'published',
       'field_paragraphs_demo[0][subform][field_text_demo][0][value]' => 'Paragraph text',
-    );
+    ];
     $this->drupalPostForm(NULL, $edit, t('Add User'));
     $edit = [
       'field_paragraphs_demo[1][subform][field_user_demo][0][target_id]' => $admin_user->label() . ' (' . $admin_user->id() . ')',
diff --git a/modules/paragraphs_library/src/Controller/LibraryItemController.php b/modules/paragraphs_library/src/Controller/LibraryItemController.php
index 138afb4..e9b8d57 100644
--- a/modules/paragraphs_library/src/Controller/LibraryItemController.php
+++ b/modules/paragraphs_library/src/Controller/LibraryItemController.php
@@ -12,6 +12,9 @@ use Drupal\paragraphs_library\Entity\LibraryItem;
 use Drupal\paragraphs_library\LibraryItemInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
+/**
+ *
+ */
 class LibraryItemController extends ControllerBase implements ContainerInjectionInterface {
 
   /**
@@ -119,11 +122,11 @@ class LibraryItemController extends ControllerBase implements ContainerInjection
         $links = [
           'revert' => [
             'title' => $revision_id < $paragraphs_library_item->getRevisionId() ? $this->t('Revert') : $this->t('Set as current revision'),
-            'url' => $revision->toUrl('revision-revert')
+            'url' => $revision->toUrl('revision-revert'),
           ],
           'delete' => [
             'title' => $this->t('Delete'),
-            'url' => $revision->toUrl('revision-delete')
+            'url' => $revision->toUrl('revision-delete'),
           ],
         ];
         $row[] = [
@@ -167,7 +170,7 @@ class LibraryItemController extends ControllerBase implements ContainerInjection
   }
 
   /**
-   *  Display a library item revision.
+   * Display a library item revision.
    *
    * @param int $paragraphs_library_item_revision
    *   The library item revision ID.
diff --git a/modules/paragraphs_library/src/Entity/LibraryItem.php b/modules/paragraphs_library/src/Entity/LibraryItem.php
index 3dfe46a..a15fb30 100644
--- a/modules/paragraphs_library/src/Entity/LibraryItem.php
+++ b/modules/paragraphs_library/src/Entity/LibraryItem.php
@@ -123,10 +123,10 @@ class LibraryItem extends EditorialContentEntityBase implements LibraryItemInter
       ->setDescription(t('The time that the library item was created.'))
       ->setRevisionable(TRUE)
       ->setTranslatable(TRUE)
-      ->setDisplayOptions('form', array(
+      ->setDisplayOptions('form', [
         'region' => 'hidden',
         'weight' => 0,
-      ))
+      ])
       ->setDisplayConfigurable('form', TRUE);
 
     $fields['changed'] = BaseFieldDefinition::create('changed')
@@ -143,10 +143,10 @@ class LibraryItem extends EditorialContentEntityBase implements LibraryItemInter
       ->setSetting('handler', 'default')
       ->setDefaultValueCallback('Drupal\paragraphs_library\Entity\LibraryItem::getCurrentUserId')
       ->setTranslatable(TRUE)
-      ->setDisplayOptions('form', array(
+      ->setDisplayOptions('form', [
         'region' => 'hidden',
         'weight' => 0,
-      ))
+      ])
       ->setDisplayConfigurable('form', TRUE);
 
     $fields['status']
@@ -171,7 +171,7 @@ class LibraryItem extends EditorialContentEntityBase implements LibraryItemInter
    *   An array of default values.
    */
   public static function getCurrentUserId() {
-    return array(\Drupal::currentUser()->id());
+    return [\Drupal::currentUser()->id()];
   }
 
   /**
@@ -318,4 +318,5 @@ class LibraryItem extends EditorialContentEntityBase implements LibraryItemInter
     }
     return $uri_route_parameters;
   }
+
 }
diff --git a/modules/paragraphs_library/src/Form/LibraryItemForm.php b/modules/paragraphs_library/src/Form/LibraryItemForm.php
index a2ed4c6..f6c7231 100644
--- a/modules/paragraphs_library/src/Form/LibraryItemForm.php
+++ b/modules/paragraphs_library/src/Form/LibraryItemForm.php
@@ -3,12 +3,8 @@
 namespace Drupal\paragraphs_library\Form;
 
 use Drupal\Core\Entity\ContentEntityForm;
-use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
-use Drupal\Core\Messenger\MessengerInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
-use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
-use Drupal\Component\Datetime\TimeInterface;
 
 /**
  * Form controller for paragraph type forms.
diff --git a/modules/paragraphs_library/src/Form/LibraryItemRevisionDeleteForm.php b/modules/paragraphs_library/src/Form/LibraryItemRevisionDeleteForm.php
index 33dc748..cc7d324 100644
--- a/modules/paragraphs_library/src/Form/LibraryItemRevisionDeleteForm.php
+++ b/modules/paragraphs_library/src/Form/LibraryItemRevisionDeleteForm.php
@@ -10,6 +10,9 @@ use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Core\Url;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
+/**
+ *
+ */
 class LibraryItemRevisionDeleteForm extends ConfirmFormBase {
 
   /**
@@ -95,7 +98,7 @@ class LibraryItemRevisionDeleteForm extends ConfirmFormBase {
     ]));
 
     $form_state->setRedirect('entity.paragraphs_library_item.version_history', [
-      'paragraphs_library_item' => $this->revision->id()
+      'paragraphs_library_item' => $this->revision->id(),
     ]);
   }
 
@@ -104,7 +107,7 @@ class LibraryItemRevisionDeleteForm extends ConfirmFormBase {
    */
   public function getCancelUrl() {
     return new Url('entity.paragraphs_library_item.version_history', [
-      'paragraphs_library_item' => $this->revision->id()
+      'paragraphs_library_item' => $this->revision->id(),
     ]);
   }
 
@@ -120,7 +123,7 @@ class LibraryItemRevisionDeleteForm extends ConfirmFormBase {
    */
   public function getQuestion() {
     return $this->t('Are you sure you want to delete revision from %revision-date?', [
-      '%revision-date' => $this->dateFormatter->format($this->revision->getChangedTime())
+      '%revision-date' => $this->dateFormatter->format($this->revision->getChangedTime()),
     ]);
   }
 
diff --git a/modules/paragraphs_library/src/Form/LibraryItemRevisionRevertForm.php b/modules/paragraphs_library/src/Form/LibraryItemRevisionRevertForm.php
index 3d2f3fb..629bed8 100644
--- a/modules/paragraphs_library/src/Form/LibraryItemRevisionRevertForm.php
+++ b/modules/paragraphs_library/src/Form/LibraryItemRevisionRevertForm.php
@@ -12,6 +12,9 @@ use Drupal\Core\Url;
 use Drupal\paragraphs_library\LibraryItemInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
+/**
+ *
+ */
 class LibraryItemRevisionRevertForm extends ConfirmFormBase {
 
   /**
@@ -92,7 +95,7 @@ class LibraryItemRevisionRevertForm extends ConfirmFormBase {
    */
   public function getQuestion() {
     return $this->t('Are you sure you want to revert revision from %revision-date?', [
-      '%revision-date' => $this->dateFormatter->format($this->revision->getChangedTime())
+      '%revision-date' => $this->dateFormatter->format($this->revision->getChangedTime()),
     ]);
   }
 
@@ -103,7 +106,7 @@ class LibraryItemRevisionRevertForm extends ConfirmFormBase {
     $original_revision_timestamp = $this->revision->getChangedTime();
     $this->revision = $this->prepareRevertedRevision($this->revision);
     $this->revision->revision_log = t('Copy of the revision from %date.', [
-      '%date' => $this->dateFormatter->format($original_revision_timestamp)
+      '%date' => $this->dateFormatter->format($original_revision_timestamp),
     ]);
     $this->revision->setChangedTime($this->time->getRequestTime());
     $this->revision->save();
@@ -114,7 +117,7 @@ class LibraryItemRevisionRevertForm extends ConfirmFormBase {
     ]));
 
     $form_state->setRedirect('entity.paragraphs_library_item.version_history', [
-      'paragraphs_library_item' => $this->revision->id()
+      'paragraphs_library_item' => $this->revision->id(),
     ]);
   }
 
@@ -148,7 +151,7 @@ class LibraryItemRevisionRevertForm extends ConfirmFormBase {
    */
   public function getCancelUrl() {
     return new Url('entity.paragraphs_library_item.version_history', [
-      'paragraphs_library_item' => $this->revision->id()
+      'paragraphs_library_item' => $this->revision->id(),
     ]);
   }
 
@@ -158,4 +161,5 @@ class LibraryItemRevisionRevertForm extends ConfirmFormBase {
   public function getConfirmText() {
     return $this->t('Revert');
   }
+
 }
diff --git a/modules/paragraphs_library/src/Form/LibraryItemSettingsForm.php b/modules/paragraphs_library/src/Form/LibraryItemSettingsForm.php
index 718ae99..df74aba 100644
--- a/modules/paragraphs_library/src/Form/LibraryItemSettingsForm.php
+++ b/modules/paragraphs_library/src/Form/LibraryItemSettingsForm.php
@@ -29,10 +29,11 @@ class LibraryItemSettingsForm extends ConfigFormBase {
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
     // This exists to make the field UI pages visible and must not be removed.
-    $form['account'] = array(
+    $form['account'] = [
       '#markup' => '<p>' . t('There are no settings yet.') . '</p>',
-    );
+    ];
 
     return $form;
   }
+
 }
diff --git a/modules/paragraphs_library/src/LibraryItemAccessControlHandler.php b/modules/paragraphs_library/src/LibraryItemAccessControlHandler.php
index 2260ed1..3118fd0 100644
--- a/modules/paragraphs_library/src/LibraryItemAccessControlHandler.php
+++ b/modules/paragraphs_library/src/LibraryItemAccessControlHandler.php
@@ -3,7 +3,6 @@
 namespace Drupal\paragraphs_library;
 
 use Drupal\Core\Access\AccessResult;
-use Drupal\Core\Entity\Entity;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
diff --git a/modules/paragraphs_library/src/Plugin/Validation/Constraint/ParagraphsLibraryItemHasAllowedParagraphsTypeConstraintValidator.php b/modules/paragraphs_library/src/Plugin/Validation/Constraint/ParagraphsLibraryItemHasAllowedParagraphsTypeConstraintValidator.php
index 195dd07..494573d 100644
--- a/modules/paragraphs_library/src/Plugin/Validation/Constraint/ParagraphsLibraryItemHasAllowedParagraphsTypeConstraintValidator.php
+++ b/modules/paragraphs_library/src/Plugin/Validation/Constraint/ParagraphsLibraryItemHasAllowedParagraphsTypeConstraintValidator.php
@@ -19,7 +19,6 @@ use Symfony\Component\Validator\Exception\UnexpectedTypeException;
  * If a field disallows certain Paragraphs types, this validates that those
  * restrictions are not being circumvented by putting a Paragraphs library item
  * of a disallowed Paragraphs types into a child field.
- *
  */
 class ParagraphsLibraryItemHasAllowedParagraphsTypeConstraintValidator extends ConstraintValidator implements ContainerInjectionInterface {
 
@@ -122,7 +121,7 @@ class ParagraphsLibraryItemHasAllowedParagraphsTypeConstraintValidator extends C
    * Returns paragraph type of the library item.
    *
    * @param string $entity_reference_item
-   *  Entity reference item.
+   *   Entity reference item.
    *
    * @return string
    *   Paragraphs type.
diff --git a/modules/paragraphs_library/tests/src/Functional/MultilingualBehaviorTest.php b/modules/paragraphs_library/tests/src/Functional/MultilingualBehaviorTest.php
index db0662d..ca3409f 100644
--- a/modules/paragraphs_library/tests/src/Functional/MultilingualBehaviorTest.php
+++ b/modules/paragraphs_library/tests/src/Functional/MultilingualBehaviorTest.php
@@ -185,7 +185,7 @@ class MultilingualBehaviorTest extends ParagraphsTestBase {
     $this->drupalPostForm(NULL, NULL, 'paragraphs_0_subform_field_err_field_test_content_add_more');
     $edit = [
       'label[0][value]' => 'En label Test nested paragraph',
-      'paragraphs[0][subform][field_err_field][0][subform][field_paragraphs_text][0][value]' => 'En label Example text for test.'
+      'paragraphs[0][subform][field_err_field][0][subform][field_paragraphs_text][0][value]' => 'En label Example text for test.',
     ];
     $this->drupalPostForm(NULL, $edit, 'Save');
     $this->assertSession()->pageTextContains('Paragraph En label Test nested paragraph has been created.');
@@ -241,7 +241,7 @@ class MultilingualBehaviorTest extends ParagraphsTestBase {
     $this->drupalPostForm(NULL, NULL, 'paragraphs_0_subform_field_err_field_test_content_add_more');
     $edit = [
       'label[0][value]' => 'En label Test nested paragraph',
-      'paragraphs[0][subform][field_err_field][0][subform][field_paragraphs_text][0][value]' => 'En label Example text for test.'
+      'paragraphs[0][subform][field_err_field][0][subform][field_paragraphs_text][0][value]' => 'En label Example text for test.',
     ];
     $this->drupalPostForm(NULL, $edit, 'Save');
     $this->assertSession()->pageTextContains('Paragraph En label Test nested paragraph has been created.');
@@ -293,4 +293,5 @@ class MultilingualBehaviorTest extends ParagraphsTestBase {
     ];
     $this->drupalPostForm('admin/structure/paragraphs_type/' . $paragraphs_type, $edit, 'Save');
   }
+
 }
diff --git a/modules/paragraphs_library/tests/src/Functional/ParagraphsLibraryItemTranslationTest.php b/modules/paragraphs_library/tests/src/Functional/ParagraphsLibraryItemTranslationTest.php
index 3fd2014..3d65584 100644
--- a/modules/paragraphs_library/tests/src/Functional/ParagraphsLibraryItemTranslationTest.php
+++ b/modules/paragraphs_library/tests/src/Functional/ParagraphsLibraryItemTranslationTest.php
@@ -70,7 +70,7 @@ class ParagraphsLibraryItemTranslationTest extends BrowserTestBase {
       'administer languages',
       'create paragraphed_test content',
       'edit any paragraphed_test content',
-      'administer paragraphs library'
+      'administer paragraphs library',
     ]);
 
     // Add a Paragraph type with a text field.
@@ -90,7 +90,7 @@ class ParagraphsLibraryItemTranslationTest extends BrowserTestBase {
       'settings[paragraph][text][translatable]' => TRUE,
       'settings[paragraph][text][fields][field_text]' => TRUE,
       'settings[paragraphs_library_item][paragraphs_library_item][translatable]' => TRUE,
-      'settings[node][paragraphed_test][settings][language][language_alterable]' => TRUE
+      'settings[node][paragraphed_test][settings][language][language_alterable]' => TRUE,
     ];
     $this->drupalPostForm('admin/config/regional/content-language', $edit, t('Save configuration'));
 
diff --git a/modules/paragraphs_library/tests/src/Functional/ParagraphsLibraryTest.php b/modules/paragraphs_library/tests/src/Functional/ParagraphsLibraryTest.php
index 7490960..cf0c7be 100644
--- a/modules/paragraphs_library/tests/src/Functional/ParagraphsLibraryTest.php
+++ b/modules/paragraphs_library/tests/src/Functional/ParagraphsLibraryTest.php
@@ -88,7 +88,7 @@ class ParagraphsLibraryTest extends ParagraphsTestBase {
     $this->drupalPostForm('node/add/paragraphed_test', [], 'field_paragraphs_from_library_add_more');
     $edit = [
       'title[0][value]' => 'library_test',
-      'field_paragraphs[0][subform][field_reusable_paragraph][0][target_id]' => 're usable paragraph label (1)'
+      'field_paragraphs[0][subform][field_reusable_paragraph][0][target_id]' => 're usable paragraph label (1)',
     ];
     $this->drupalPostForm(NULL, $edit, 'Save');
 
@@ -181,7 +181,7 @@ class ParagraphsLibraryTest extends ParagraphsTestBase {
     $this->drupalPostForm('node/add/paragraphed_test', [], 'field_paragraphs_from_library_add_more');
     $edit = [
       'title[0][value]' => 'library_test_new',
-      'field_paragraphs[0][subform][field_reusable_paragraph][0][target_id]' => 're usable paragraph label (1)'
+      'field_paragraphs[0][subform][field_reusable_paragraph][0][target_id]' => 're usable paragraph label (1)',
     ];
     $this->drupalPostForm(NULL, $edit, 'Save');
     // Assert that the paragraph is shown correctly.
@@ -288,7 +288,7 @@ class ParagraphsLibraryTest extends ParagraphsTestBase {
     $this->assertSession()->linkExists('Manage fields');
     $this->assertSession()->linkExists('Manage form display');
     $this->assertSession()->linkExists('Manage display');
-    // Assert that users can create fields to
+    // Assert that users can create fields to.
     $this->clickLink('Manage fields');
     $this->clickLink(t('Add field'));
     $this->assertSession()->statusCodeEquals(200);
@@ -476,7 +476,7 @@ class ParagraphsLibraryTest extends ParagraphsTestBase {
     // paragraph type label.
     $user = $this->drupalCreateUser([
       'access content',
-      'administer paragraphs library'
+      'administer paragraphs library',
     ]);
     $this->drupalLogin($user);
     $this->drupalGet('admin/content/paragraphs');
@@ -491,7 +491,7 @@ class ParagraphsLibraryTest extends ParagraphsTestBase {
     $this->loginAsAdmin([
       'create paragraphed_test content',
       'edit any paragraphed_test content',
-      'administer paragraphs library'
+      'administer paragraphs library',
     ]);
 
     // Add a Paragraph type with a text field.
@@ -534,7 +534,7 @@ class ParagraphsLibraryTest extends ParagraphsTestBase {
     $this->loginAsAdmin([
       'create paragraphed_test content',
       'edit any paragraphed_test content',
-      'administer paragraphs library'
+      'administer paragraphs library',
     ]);
     $paragraph_type = 'text';
     $this->addParagraphsType($paragraph_type);
@@ -631,7 +631,7 @@ class ParagraphsLibraryTest extends ParagraphsTestBase {
     $date_formatter = \Drupal::service('date.formatter');
     $this->clickLink('Test revisions nested first change');
     $this->clickLink('Revisions');
-   $this->assertSession()->titleEquals('Revisions for Test revisions nested first change | Drupal');
+    $this->assertSession()->titleEquals('Revisions for Test revisions nested first change | Drupal');
     $revision = $storage->loadRevision(1);
     $this->assertSession()->pageTextContains('Test revisions nested original by ' . $this->admin_user->getAccountName());
     $this->assertSession()->pageTextContains($date_formatter->format($revision->getChangedTime(), 'short') . ': ' . $revision->label());
@@ -643,12 +643,12 @@ class ParagraphsLibraryTest extends ParagraphsTestBase {
     // Test reverting revision.
     $this->clickLink('Revert');
     $this->assertSession()->responseContains(t('Are you sure you want to revert revision from %revision-date?', [
-      '%revision-date' => $date_formatter->format($revision->getChangedTime())
+      '%revision-date' => $date_formatter->format($revision->getChangedTime()),
     ]));
     $this->drupalPostForm(NULL, NULL, 'Revert');
     $this->assertSession()->responseContains(t('%title has been reverted to the revision from %revision-date.', [
       '%title' => 'Test revisions nested original',
-      '%revision-date' => $date_formatter->format($revision->getChangedTime())
+      '%revision-date' => $date_formatter->format($revision->getChangedTime()),
     ]));
 
     // Check current revision.
@@ -661,11 +661,11 @@ class ParagraphsLibraryTest extends ParagraphsTestBase {
     $revision_for_deleting = $storage->loadRevision(2);
     $this->clickLink('Delete');
     $this->assertSession()->responseContains(t('Are you sure you want to delete revision from %revision-date', [
-      '%revision-date' => $date_formatter->format($revision_for_deleting->getChangedTime())
+      '%revision-date' => $date_formatter->format($revision_for_deleting->getChangedTime()),
     ]));
     $this->drupalPostForm(NULL, NULL, 'Delete');
     $this->assertSession()->responseContains(t('Revision from %revision-date has been deleted.', [
-      '%revision-date' => $date_formatter->format($revision_for_deleting->getChangedTime())
+      '%revision-date' => $date_formatter->format($revision_for_deleting->getChangedTime()),
     ]));
   }
 
diff --git a/modules/paragraphs_library/tests/src/FunctionalJavascript/ParagraphsContentModerationTest.php b/modules/paragraphs_library/tests/src/FunctionalJavascript/ParagraphsContentModerationTest.php
index a8a2a62..2350c62 100644
--- a/modules/paragraphs_library/tests/src/FunctionalJavascript/ParagraphsContentModerationTest.php
+++ b/modules/paragraphs_library/tests/src/FunctionalJavascript/ParagraphsContentModerationTest.php
@@ -86,7 +86,7 @@ class ParagraphsContentModerationTest extends WebDriverTestBase {
       'bypass node access',
       'administer paragraphs library',
       'access paragraphs_library_items entity browser pages',
-      'administer workflows'
+      'administer workflows',
     ]);
 
     $this->editorUser = $this->drupalCreateUser([
@@ -436,8 +436,8 @@ class ParagraphsContentModerationTest extends WebDriverTestBase {
     $this->addFieldtoParagraphType('rich_paragraph', 'field_nested_paragraphs', 'entity_reference', ['target_type' => 'paragraphs_library_item']);
     $display = \Drupal::service('entity_display.repository')->getViewDisplay('paragraph', 'rich_paragraph');
     $display->setComponent('field_nested_paragraphs', [
-        'type' => 'entity_reference_entity_view',
-      ])->save();
+      'type' => 'entity_reference_entity_view',
+    ])->save();
 
     // Create a child library item.
     $this->drupalGet('/admin/content/paragraphs/add/default');
diff --git a/modules/paragraphs_library/tests/src/FunctionalJavascript/ParagraphsLibraryItemEntityBrowserTest.php b/modules/paragraphs_library/tests/src/FunctionalJavascript/ParagraphsLibraryItemEntityBrowserTest.php
index 4090c49..4ef8be0 100644
--- a/modules/paragraphs_library/tests/src/FunctionalJavascript/ParagraphsLibraryItemEntityBrowserTest.php
+++ b/modules/paragraphs_library/tests/src/FunctionalJavascript/ParagraphsLibraryItemEntityBrowserTest.php
@@ -31,7 +31,7 @@ class ParagraphsLibraryItemEntityBrowserTest extends EntityBrowserWebDriverTestB
     'node',
     'paragraphs_library',
     'entity_browser',
-    'content_translation'
+    'content_translation',
   ];
 
   /**
diff --git a/modules/paragraphs_type_permissions/src/ParagraphsTypePermissions.php b/modules/paragraphs_type_permissions/src/ParagraphsTypePermissions.php
index b18f9a2..9f54147 100644
--- a/modules/paragraphs_type_permissions/src/ParagraphsTypePermissions.php
+++ b/modules/paragraphs_type_permissions/src/ParagraphsTypePermissions.php
@@ -18,12 +18,12 @@ class ParagraphsTypePermissions {
    * @return array
    */
   public function globalPermissions() {
-    return array(
-      'bypass paragraphs type content access' => array(
+    return [
+      'bypass paragraphs type content access' => [
         'title' => $this->t('Bypass Paragraphs type content access control'),
         'description' => $this->t('Is able to administer content for all Paragraph types'),
-      ),
-    );
+      ],
+    ];
   }
 
   /**
@@ -32,7 +32,7 @@ class ParagraphsTypePermissions {
    * @return array
    */
   public function paragraphTypePermissions() {
-    $perms = array();
+    $perms = [];
 
     // Generate paragraph permissions for all Paragraphs types.
     foreach (ParagraphsType::loadMultiple() as $type) {
@@ -53,26 +53,26 @@ class ParagraphsTypePermissions {
    */
   protected function buildPermissions(ParagraphsType $type) {
     $type_id = $type->id();
-    $type_params = array('%type_name' => $type->label());
+    $type_params = ['%type_name' => $type->label()];
 
-    return array(
-      'view paragraph content ' .$type_id => array(
+    return [
+      'view paragraph content ' . $type_id => [
         'title' => $this->t('%type_name: View content', $type_params),
         'description' => $this->t('Is able to view Paragraphs content of type %type_name', $type_params),
-      ),
-      'create paragraph content ' . $type_id => array(
+      ],
+      'create paragraph content ' . $type_id => [
         'title' => $this->t('%type_name: Create content', $type_params),
         'description' => $this->t('Is able to create Paragraphs content of type %type_name', $type_params),
-      ),
-      'update paragraph content ' . $type_id => array(
+      ],
+      'update paragraph content ' . $type_id => [
         'title' => $this->t('%type_name: Edit content', $type_params),
         'description' => $this->t('Is able to update Paragraphs content of type %type_name', $type_params),
-      ),
-      'delete paragraph content ' . $type_id => array(
+      ],
+      'delete paragraph content ' . $type_id => [
         'title' => $this->t('%type_name: Delete content', $type_params),
         'description' => $this->t('Is able to delete Paragraphs content of type %type_name', $type_params),
-      ),
-    );
+      ],
+    ];
   }
 
 }
diff --git a/modules/paragraphs_type_permissions/tests/src/Functional/ParagraphsTypePermissionsTest.php b/modules/paragraphs_type_permissions/tests/src/Functional/ParagraphsTypePermissionsTest.php
index 223bf25..8c1db19 100644
--- a/modules/paragraphs_type_permissions/tests/src/Functional/ParagraphsTypePermissionsTest.php
+++ b/modules/paragraphs_type_permissions/tests/src/Functional/ParagraphsTypePermissionsTest.php
@@ -21,7 +21,7 @@ class ParagraphsTypePermissionsTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected static $modules = array(
+  protected static $modules = [
     'content_translation',
     'image',
     'field',
@@ -30,7 +30,7 @@ class ParagraphsTypePermissionsTest extends BrowserTestBase {
     'language',
     'node',
     'paragraphs_type_permissions',
-  );
+  ];
 
   /**
    * {@inheritdoc}
@@ -46,7 +46,7 @@ class ParagraphsTypePermissionsTest extends BrowserTestBase {
     ConfigurableLanguage::create(['id' => 'de', 'label' => '1German'])->save();
     ConfigurableLanguage::create(['id' => 'fr', 'label' => '2French'])->save();
     $this->addParagraphedContentType('paragraphed_content_demo', 'field_paragraphs_demo');
-    $admin_user = $this->drupalCreateUser(array(
+    $admin_user = $this->drupalCreateUser([
       'administer site configuration',
       'administer content translation',
       'administer languages',
@@ -56,7 +56,7 @@ class ParagraphsTypePermissionsTest extends BrowserTestBase {
       'administer node form display',
       'administer paragraph fields',
       'administer paragraph form display',
-    ));
+    ]);
     $this->drupalLogin($admin_user);
     $this->addParagraphsType('nested_paragraph');
     $this->addParagraphsField('nested_paragraph', 'field_paragraphs_demo', 'paragraph');
@@ -81,7 +81,7 @@ class ParagraphsTypePermissionsTest extends BrowserTestBase {
       'settings[paragraph][images][fields][field_images_demo]' => TRUE,
       'settings[paragraph][text_image][fields][field_image_demo]' => TRUE,
       'settings[paragraph][text_image][fields][field_text_demo]' => TRUE,
-      'settings[node][paragraphed_content_demo][settings][language][language_alterable]' => TRUE
+      'settings[node][paragraphed_content_demo][settings][language][language_alterable]' => TRUE,
     ];
     $this->drupalPostForm('admin/config/regional/content-language', $edit, t('Save configuration'));
 
@@ -111,7 +111,7 @@ class ParagraphsTypePermissionsTest extends BrowserTestBase {
     // Create an authenticated user without special permissions for test.
     $authenticated_user = $this->drupalCreateUser();
     // Create an admin user for test.
-    $admin_user = $this->drupalCreateUser(array(
+    $admin_user = $this->drupalCreateUser([
       'administer site configuration',
       'administer content types',
       'administer node fields',
@@ -122,7 +122,7 @@ class ParagraphsTypePermissionsTest extends BrowserTestBase {
       'edit any paragraphed_content_demo content',
       'bypass paragraphs type content access',
       'administer node form display',
-    ));
+    ]);
     $this->drupalLogin($admin_user);
 
     // Enable the publish/unpublish checkbox fields.
@@ -134,8 +134,8 @@ class ParagraphsTypePermissionsTest extends BrowserTestBase {
     foreach ($paragraph_types as $paragraph_type) {
       $form_display = \Drupal::service('entity_display.repository')->getFormDisplay('paragraph', $paragraph_type);
       $form_display->setComponent('status', [
-          'type' => 'boolean_checkbox'
-        ])
+        'type' => 'boolean_checkbox',
+      ])
         ->save();
     }
 
@@ -189,7 +189,7 @@ class ParagraphsTypePermissionsTest extends BrowserTestBase {
     $this->assertSession()->pageTextNotContains('Paragraph type Image + Text');
     $this->assertSession()->pageTextNotContains('Paragraph type Text');
 
-    // Login as admin
+    // Login as admin.
     $this->drupalLogout();
     $this->drupalLogin($admin_user);
 
diff --git a/paragraphs.api.php b/paragraphs.api.php
index 78403df..f213cf4 100644
--- a/paragraphs.api.php
+++ b/paragraphs.api.php
@@ -15,8 +15,7 @@
  * \Drupal\paragraphs\Annotation\ParagraphsBehavior.
  *
  * @param $paragraphs_behavior
- *   The array of paragraphs behavior plugins, keyed on the
- *   machine-readable plugin name.
+ *   The array of paragraphs behavior plugins, keyed on the   machine-readable plugin name.
  */
 function hook_paragraphs_behavior_info_alter(&$paragraphs_behavior) {
   // Set a new label for the my_layout plugin instead of the one
diff --git a/paragraphs.post_update.php b/paragraphs.post_update.php
index d76c3d2..01979ad 100644
--- a/paragraphs.post_update.php
+++ b/paragraphs.post_update.php
@@ -21,7 +21,6 @@ use Drupal\field\Entity\FieldStorageConfig;
 function paragraphs_post_update_set_paragraphs_parent_fields(&$sandbox) {
   // Don't execute the function if paragraphs_update_8003() was already executed
   // which used to do the same.
-
   $module_schema = drupal_get_installed_schema_version('paragraphs');
 
   // The state entry 'paragraphs_update_8003_placeholder' is used in order to
diff --git a/src/Annotation/ParagraphsBehavior.php b/src/Annotation/ParagraphsBehavior.php
index 96d9ef2..ec44e01 100644
--- a/src/Annotation/ParagraphsBehavior.php
+++ b/src/Annotation/ParagraphsBehavior.php
@@ -11,7 +11,6 @@ use Drupal\Component\Annotation\Plugin;
  * entity.
  *
  * @Annotation
- *
  */
 class ParagraphsBehavior extends Plugin {
 
diff --git a/src/Entity/Paragraph.php b/src/Entity/Paragraph.php
index 3a218b4..2008ea6 100644
--- a/src/Entity/Paragraph.php
+++ b/src/Entity/Paragraph.php
@@ -374,10 +374,10 @@ class Paragraph extends ContentEntityBase implements ParagraphInterface {
       ->setDescription(t('The time that the Paragraph was created.'))
       ->setRevisionable(TRUE)
       ->setTranslatable(TRUE)
-      ->setDisplayOptions('form', array(
+      ->setDisplayOptions('form', [
         'region' => 'hidden',
         'weight' => 0,
-      ))
+      ])
       ->setDisplayConfigurable('form', TRUE);
 
     $fields['parent_id'] = BaseFieldDefinition::create('string')
@@ -410,22 +410,22 @@ class Paragraph extends ContentEntityBase implements ParagraphInterface {
   }
 
   /**
-  * {@inheritdoc}
-  */
- public function createDuplicate() {
-   $duplicate = parent::createDuplicate();
-   // Loop over entity fields and duplicate nested paragraphs.
-   foreach ($duplicate->getFields() as $fieldItemList) {
-     if ($fieldItemList instanceof EntityReferenceFieldItemListInterface && $fieldItemList->getSetting('target_type') === $this->getEntityTypeId()) {
-       foreach ($fieldItemList as $delta => $item) {
-         if ($item->entity) {
-           $fieldItemList[$delta] = $item->entity->createDuplicate();
-         }
-       }
-     }
-   }
-   return $duplicate;
- }
+   * {@inheritdoc}
+   */
+  public function createDuplicate() {
+    $duplicate = parent::createDuplicate();
+    // Loop over entity fields and duplicate nested paragraphs.
+    foreach ($duplicate->getFields() as $fieldItemList) {
+      if ($fieldItemList instanceof EntityReferenceFieldItemListInterface && $fieldItemList->getSetting('target_type') === $this->getEntityTypeId()) {
+        foreach ($fieldItemList as $delta => $item) {
+          if ($item->entity) {
+            $fieldItemList[$delta] = $item->entity->createDuplicate();
+          }
+        }
+      }
+    }
+    return $duplicate;
+  }
 
   /**
    * {@inheritdoc}
@@ -481,7 +481,7 @@ class Paragraph extends ContentEntityBase implements ParagraphInterface {
         // Decrease the depth, since we are entering a nested paragraph.
         $nested_summary = $this->getNestedSummary($field_name, [
           'show_behavior_summary' => FALSE,
-          'depth_limit' => $depth_limit - 1
+          'depth_limit' => $depth_limit - 1,
         ]);
         $summary['content'] = array_merge($summary['content'], $nested_summary);
       }
@@ -579,7 +579,7 @@ class Paragraph extends ContentEntityBase implements ParagraphInterface {
   protected function getFieldsToSkipFromChangedCheck() {
     // A list of revision fields which should be skipped from the comparision.
     $fields = [
-      $this->getEntityType()->getKey('revision')
+      $this->getEntityType()->getKey('revision'),
     ];
 
     return $fields;
diff --git a/src/Entity/ParagraphsType.php b/src/Entity/ParagraphsType.php
index 9b815c0..47f80e9 100644
--- a/src/Entity/ParagraphsType.php
+++ b/src/Entity/ParagraphsType.php
@@ -10,7 +10,7 @@ use Drupal\paragraphs\ParagraphsBehaviorCollection;
 use Drupal\paragraphs\ParagraphsTypeInterface;
 use Drupal\Core\File\FileSystemInterface;
 
-  /**
+/**
  * Defines the ParagraphsType entity.
  *
  * @ConfigEntityType(
diff --git a/src/Feeds/Target/Paragraphs.php b/src/Feeds/Target/Paragraphs.php
index e025ad8..b8cb0a8 100644
--- a/src/Feeds/Target/Paragraphs.php
+++ b/src/Feeds/Target/Paragraphs.php
@@ -69,7 +69,7 @@ class Paragraphs extends Text implements ConfigurableTargetInterface {
       '#type' => 'select',
       '#title' => $this->t('Paragraphs type'),
       '#required' => TRUE,
-      '#options' => array_map(function(EntityInterface $paragraphs_type) {
+      '#options' => array_map(function (EntityInterface $paragraphs_type) {
         return $paragraphs_type->label();
       }, $this->paragraphsTypeStorage->loadMultiple()),
       '#default_value' => $this->configuration['paragraphs_type'],
diff --git a/src/Form/ParagraphsSettingsForm.php b/src/Form/ParagraphsSettingsForm.php
index 0f6a410..ba8aa1b 100644
--- a/src/Form/ParagraphsSettingsForm.php
+++ b/src/Form/ParagraphsSettingsForm.php
@@ -33,7 +33,7 @@ class ParagraphsSettingsForm extends ConfigFormBase {
       '#type' => 'checkbox',
       '#title' => $this->t('Show unpublished Paragraphs'),
       '#default_value' => $config->get('show_unpublished'),
-      '#description' => $this->t('Allow users with "View unpublished paragraphs" permission to see unpublished Paragraphs. Disable this if unpublished paragraphs should be hidden for all users, including super administrators.')
+      '#description' => $this->t('Allow users with "View unpublished paragraphs" permission to see unpublished Paragraphs. Disable this if unpublished paragraphs should be hidden for all users, including super administrators.'),
     ];
 
     return parent::buildForm($form, $form_state);
diff --git a/src/Form/ParagraphsTypeForm.php b/src/Form/ParagraphsTypeForm.php
index 0dc0ec4..cf5c59c 100644
--- a/src/Form/ParagraphsTypeForm.php
+++ b/src/Form/ParagraphsTypeForm.php
@@ -74,24 +74,24 @@ class ParagraphsTypeForm extends EntityForm {
       ]));
     }
 
-    $form['label'] = array(
+    $form['label'] = [
       '#type' => 'textfield',
       '#title' => $this->t('Label'),
       '#maxlength' => 255,
       '#default_value' => $paragraphs_type->label(),
       '#description' => $this->t("Label for the Paragraphs type."),
       '#required' => TRUE,
-    );
+    ];
 
-    $form['id'] = array(
+    $form['id'] = [
       '#type' => 'machine_name',
       '#default_value' => $paragraphs_type->id(),
-      '#machine_name' => array(
+      '#machine_name' => [
         'exists' => 'paragraphs_type_load',
-      ),
+      ],
       '#maxlength' => 32,
       '#disabled' => !$paragraphs_type->isNew(),
-    );
+    ];
 
     $form['icon_file'] = [
       '#title' => $this->t('Paragraph type icon'),
@@ -117,15 +117,17 @@ class ParagraphsTypeForm extends EntityForm {
     if ($behavior_plugin_definitions = $this->paragraphsBehaviorManager->getApplicableDefinitions($paragraphs_type)) {
       $form['message'] = [
         '#type' => 'container',
-        '#markup' => $this->t('Behavior plugins are only supported by the stable paragraphs widget.', [], ['context' =>
-          'paragraphs']),
-        '#attributes' => ['class' => ['messages', 'messages--warning']]
+        '#markup' => $this->t('Behavior plugins are only supported by the stable paragraphs widget.', [], [
+          'context' =>
+          'paragraphs',
+        ]),
+        '#attributes' => ['class' => ['messages', 'messages--warning']],
       ];
       $form['behavior_plugins'] = [
         '#type' => 'details',
         '#title' => $this->t('Behaviors', [], ['context' => 'paragraphs']),
         '#tree' => TRUE,
-        '#open' => TRUE
+        '#open' => TRUE,
       ];
       $config = $paragraphs_type->get('behavior_plugins');
       // Alphabetically sort plugins by plugin label.
@@ -150,9 +152,9 @@ class ParagraphsTypeForm extends EntityForm {
             '#title' => $behavior_plugin_definition['label'],
             '#states' => [
               'visible' => [
-                  ':input[name="behavior_plugins[' . $id . '][enabled]"]' => ['checked' => TRUE],
-              ]
-            ]
+                ':input[name="behavior_plugins[' . $id . '][enabled]"]' => ['checked' => TRUE],
+              ],
+            ],
           ];
         }
       }
@@ -221,9 +223,9 @@ class ParagraphsTypeForm extends EntityForm {
     }
 
     $status = $paragraphs_type->save();
-    $this->messenger->addMessage($this->t('Saved the %label Paragraphs type.', array(
+    $this->messenger->addMessage($this->t('Saved the %label Paragraphs type.', [
       '%label' => $paragraphs_type->label(),
-    )));
+    ]));
     if (($status == SAVED_NEW && $this->moduleHandler->moduleExists('field_ui'))
       && $route_info = FieldUI::getOverviewRouteInfo('paragraph', $paragraphs_type->id())) {
       $form_state->setRedirectUrl($route_info);
diff --git a/src/Functional/WidgetStable/ParagraphsReplicateEnableTest.php b/src/Functional/WidgetStable/ParagraphsReplicateEnableTest.php
index 1cc922a..e534da3 100644
--- a/src/Functional/WidgetStable/ParagraphsReplicateEnableTest.php
+++ b/src/Functional/WidgetStable/ParagraphsReplicateEnableTest.php
@@ -7,7 +7,6 @@ namespace Drupal\Tests\paragraphs\Functional\WidgetStable;
  *
  * @group paragraphs
  */
-
 class ParagraphsReplicateEnableTest extends ParagraphsDuplicateFeatureTest {
 
   public static $modules = [
diff --git a/src/ParagraphInterface.php b/src/ParagraphInterface.php
index 6d7969b..6f084ad 100644
--- a/src/ParagraphInterface.php
+++ b/src/ParagraphInterface.php
@@ -9,6 +9,7 @@ use Drupal\entity_reference_revisions\EntityNeedsSaveInterface;
 
 /**
  * Provides an interface defining a paragraphs entity.
+ *
  * @ingroup paragraphs
  */
 interface ParagraphInterface extends ContentEntityInterface, EntityOwnerInterface, EntityNeedsSaveInterface, EntityPublishedInterface {
@@ -18,7 +19,7 @@ interface ParagraphInterface extends ContentEntityInterface, EntityOwnerInterfac
    *
    * Preserves language context with translated entities.
    *
-   * @return ContentEntityInterface
+   * @return \Drupal\Core\Entity\ContentEntityInterface
    *   The parent entity.
    */
   public function getParentEntity();
diff --git a/src/ParagraphStorageSchema.php b/src/ParagraphStorageSchema.php
index e37a769..282e0c8 100644
--- a/src/ParagraphStorageSchema.php
+++ b/src/ParagraphStorageSchema.php
@@ -17,12 +17,12 @@ class ParagraphStorageSchema extends SqlContentEntityStorageSchema {
   protected function getEntitySchema(ContentEntityTypeInterface $entity_type, $reset = FALSE) {
     $schema = parent::getEntitySchema($entity_type, $reset);
 
-    $schema[$this->storage->getDataTable()]['indexes'] += array(
-      'paragraphs__parent_fields' => array('parent_type', 'parent_id', 'parent_field_name'),
-    );
-    $schema[$this->storage->getRevisionDataTable()]['indexes'] += array(
-      'paragraphs__parent_fields' => array('parent_type', 'parent_id', 'parent_field_name'),
-    );
+    $schema[$this->storage->getDataTable()]['indexes'] += [
+      'paragraphs__parent_fields' => ['parent_type', 'parent_id', 'parent_field_name'],
+    ];
+    $schema[$this->storage->getRevisionDataTable()]['indexes'] += [
+      'paragraphs__parent_fields' => ['parent_type', 'parent_id', 'parent_field_name'],
+    ];
 
     return $schema;
   }
@@ -43,4 +43,5 @@ class ParagraphStorageSchema extends SqlContentEntityStorageSchema {
     }
     return $schema;
   }
+
 }
diff --git a/src/ParagraphsBehaviorBase.php b/src/ParagraphsBehaviorBase.php
index 6edd3c1..fc85319 100644
--- a/src/ParagraphsBehaviorBase.php
+++ b/src/ParagraphsBehaviorBase.php
@@ -12,6 +12,9 @@ use Drupal\paragraphs\Entity\Paragraph;
 use Drupal\paragraphs\Entity\ParagraphsType;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
+/**
+ *
+ */
 abstract class ParagraphsBehaviorBase extends PluginBase implements ParagraphsBehaviorInterface, ContainerFactoryPluginInterface {
 
   /**
@@ -58,12 +61,12 @@ abstract class ParagraphsBehaviorBase extends PluginBase implements ParagraphsBe
   /**
    * {@inheritdoc}
    */
-  public function validateConfigurationForm(array &$form, FormStateInterface $form_state) { }
+  public function validateConfigurationForm(array &$form, FormStateInterface $form_state) {}
 
   /**
    * {@inheritdoc}
    */
-  public function submitConfigurationForm(array &$form, FormStateInterface $form_state) { }
+  public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {}
 
   /**
    * {@inheritdoc}
@@ -96,7 +99,7 @@ abstract class ParagraphsBehaviorBase extends PluginBase implements ParagraphsBe
   /**
    * {@inheritdoc}
    */
-  public function preprocess(&$variables) { }
+  public function preprocess(&$variables) {}
 
   /**
    * {@inheritdoc}
@@ -168,8 +171,7 @@ abstract class ParagraphsBehaviorBase extends PluginBase implements ParagraphsBe
     do {
       $old_array = $new_array;
       $new_array = NestedArray::filter($old_array);
-    }
-    while ($new_array !== $old_array);
+    } while ($new_array !== $old_array);
 
     return $new_array;
   }
diff --git a/src/ParagraphsBehaviorManager.php b/src/ParagraphsBehaviorManager.php
index 080cc11..4ed6c7b 100644
--- a/src/ParagraphsBehaviorManager.php
+++ b/src/ParagraphsBehaviorManager.php
@@ -34,7 +34,7 @@ class ParagraphsBehaviorManager extends DefaultPluginManager {
    * {@inheritdoc}
    */
   public function getDefinitions() {
-    $definitions =  parent::getDefinitions();
+    $definitions = parent::getDefinitions();
     uasort($definitions, 'Drupal\Component\Utility\SortArray::sortByWeightElement');
     return $definitions;
   }
diff --git a/src/ParagraphsServiceProvider.php b/src/ParagraphsServiceProvider.php
index db38ed6..0fe6503 100644
--- a/src/ParagraphsServiceProvider.php
+++ b/src/ParagraphsServiceProvider.php
@@ -18,7 +18,7 @@ class ParagraphsServiceProvider extends ServiceProviderBase {
   public function register(ContainerBuilder $container) {
     $modules = $container->getParameter('container.modules');
     // Check for installed Replicate module.
-    if (isset($modules['replicate']) ) {
+    if (isset($modules['replicate'])) {
       // Add a Replicate field event subscriber.
       $service_definition = new Definition(
         'Drupal\paragraphs\EventSubscriber\ReplicateFieldSubscriber',
@@ -29,4 +29,5 @@ class ParagraphsServiceProvider extends ServiceProviderBase {
       $container->setDefinition('replicate.event_subscriber.paragraphs', $service_definition);
     }
   }
+
 }
diff --git a/src/ParagraphsTypeAccessControlHandler.php b/src/ParagraphsTypeAccessControlHandler.php
index 0bf68e3..6f8f214 100644
--- a/src/ParagraphsTypeAccessControlHandler.php
+++ b/src/ParagraphsTypeAccessControlHandler.php
@@ -26,6 +26,7 @@ class ParagraphsTypeAccessControlHandler extends EntityAccessControlHandler {
     switch ($operation) {
       case 'view label':
         return AccessResult::allowedIfHasPermission($account, 'access content');
+
       default:
         return parent::checkAccess($entity, $operation, $account);
     }
diff --git a/src/Plugin/EntityReferenceSelection/ParagraphSelection.php b/src/Plugin/EntityReferenceSelection/ParagraphSelection.php
index 1545d85..ececce6 100644
--- a/src/Plugin/EntityReferenceSelection/ParagraphSelection.php
+++ b/src/Plugin/EntityReferenceSelection/ParagraphSelection.php
@@ -19,17 +19,17 @@ use Drupal\Component\Utility\NestedArray;
  * )
  */
 class ParagraphSelection extends DefaultSelection {
+
   /**
    * @inheritDoc
    */
   public function defaultConfiguration() {
-    return parent::defaultConfiguration() +  [
+    return parent::defaultConfiguration() + [
       'negate' => 0,
       'target_bundles_drag_drop' => [],
     ];
   }
 
-
   /**
    * {@inheritdoc}
    */
@@ -37,19 +37,19 @@ class ParagraphSelection extends DefaultSelection {
     $entity_type_id = $this->configuration['target_type'];
     $bundles = $this->entityTypeBundleInfo->getBundleInfo($entity_type_id);
 
-    $bundle_options = array();
-    $bundle_options_simple = array();
+    $bundle_options = [];
+    $bundle_options_simple = [];
 
     // Default weight for new items.
     $weight = count($bundles) + 1;
 
     foreach ($bundles as $bundle_name => $bundle_info) {
       $bundle_options_simple[$bundle_name] = $bundle_info['label'];
-      $bundle_options[$bundle_name] = array(
+      $bundle_options[$bundle_name] = [
         'label' => $bundle_info['label'],
         'enabled' => $this->configuration['target_bundles_drag_drop'][$bundle_name]['enabled'] ?? FALSE,
         'weight' => $this->configuration['target_bundles_drag_drop'][$bundle_name]['weight'] ?? $weight,
-      );
+      ];
       $weight++;
     }
 
@@ -65,12 +65,12 @@ class ParagraphSelection extends DefaultSelection {
     ];
 
     // Kept for compatibility with other entity reference widgets.
-    $form['target_bundles'] = array(
+    $form['target_bundles'] = [
       '#type' => 'checkboxes',
       '#options' => $bundle_options_simple,
       '#default_value' => $this->configuration['target_bundles'] ?? [],
       '#access' => FALSE,
-    );
+    ];
 
     if ($bundle_options) {
       $form['target_bundles_drag_drop'] = [
@@ -101,29 +101,29 @@ class ParagraphSelection extends DefaultSelection {
     // Default weight for new items.
     $weight = count($bundles) + 1;
     foreach ($bundle_options as $bundle_name => $bundle_info) {
-      $form['target_bundles_drag_drop'][$bundle_name] = array(
-        '#attributes' => array(
-          'class' => array('draggable'),
-        ),
-      );
+      $form['target_bundles_drag_drop'][$bundle_name] = [
+        '#attributes' => [
+          'class' => ['draggable'],
+        ],
+      ];
 
-      $form['target_bundles_drag_drop'][$bundle_name]['enabled'] = array(
+      $form['target_bundles_drag_drop'][$bundle_name]['enabled'] = [
         '#type' => 'checkbox',
         '#title' => $bundle_info['label'],
         '#title_display' => 'after',
         '#default_value' => $bundle_info['enabled'],
-      );
+      ];
 
-      $form['target_bundles_drag_drop'][$bundle_name]['weight'] = array(
+      $form['target_bundles_drag_drop'][$bundle_name]['weight'] = [
         '#type' => 'weight',
         '#default_value' => (int) $bundle_info['weight'],
         '#delta' => $weight_delta,
-        '#title' => $this->t('Weight for type @type', array('@type' => $bundle_info['label'])),
+        '#title' => $this->t('Weight for type @type', ['@type' => $bundle_info['label']]),
         '#title_display' => 'invisible',
-        '#attributes' => array(
-          'class' => array('bundle-weight', 'bundle-weight-' . $bundle_name),
-        ),
-      );
+        '#attributes' => [
+          'class' => ['bundle-weight', 'bundle-weight-' . $bundle_name],
+        ],
+      ];
       $weight++;
     }
 
@@ -141,13 +141,13 @@ class ParagraphSelection extends DefaultSelection {
    * Validate helper to have support for other entity reference widgets.
    *
    * @param $element
-   * @param FormStateInterface $form_state
+   * @param \Drupal\Core\Form\FormStateInterface $form_state
    * @param $form
    */
   public static function targetTypeValidate($element, FormStateInterface $form_state, $form) {
     $values = &$form_state->getValues();
     $element_values = NestedArray::getValue($values, $element['#parents']);
-    $bundle_options = array();
+    $bundle_options = [];
 
     if ($element_values) {
       $enabled = 0;
@@ -165,7 +165,7 @@ class ParagraphSelection extends DefaultSelection {
     }
 
     // New value parents.
-    $parents = array_merge(array_slice($element['#parents'], 0, -1), array('target_bundles'));
+    $parents = array_merge(array_slice($element['#parents'], 0, -1), ['target_bundles']);
     NestedArray::setValue($values, $parents, $bundle_options);
   }
 
diff --git a/src/Plugin/Field/FieldFormatter/ParagraphsSummaryFormatter.php b/src/Plugin/Field/FieldFormatter/ParagraphsSummaryFormatter.php
index d66b1ea..2d10335 100644
--- a/src/Plugin/Field/FieldFormatter/ParagraphsSummaryFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/ParagraphsSummaryFormatter.php
@@ -30,21 +30,21 @@ class ParagraphsSummaryFormatter extends EntityReferenceFormatterBase {
         $elements[$delta] = [
           '#type' => 'container',
           '#attributes' => [
-            'class' => ['paragraph-formatter']
-          ]
+            'class' => ['paragraph-formatter'],
+          ],
         ];
         $elements[$delta]['info'] = [
           '#type' => 'container',
           '#attributes' => [
-            'class' => ['paragraph-info']
-          ]
+            'class' => ['paragraph-info'],
+          ],
         ];
         $elements[$delta]['info'] += $entity->getIcons();
         $elements[$delta]['summary'] = [
           '#type' => 'container',
           '#attributes' => [
-            'class' => ['paragraph-summary']
-          ]
+            'class' => ['paragraph-summary'],
+          ],
         ];
         $elements[$delta]['summary']['description'] = [
           '#theme' => 'paragraphs_summary',
@@ -68,4 +68,5 @@ class ParagraphsSummaryFormatter extends EntityReferenceFormatterBase {
 
     return FALSE;
   }
+
 }
diff --git a/src/Plugin/Field/FieldWidget/InlineParagraphsWidget.php b/src/Plugin/Field/FieldWidget/InlineParagraphsWidget.php
index cc9a92a..040dc34 100644
--- a/src/Plugin/Field/FieldWidget/InlineParagraphsWidget.php
+++ b/src/Plugin/Field/FieldWidget/InlineParagraphsWidget.php
@@ -81,74 +81,74 @@ class InlineParagraphsWidget extends WidgetBase {
    * {@inheritdoc}
    */
   public static function defaultSettings() {
-    return array(
+    return [
       'title' => t('Paragraph'),
       'title_plural' => t('Paragraphs'),
       'edit_mode' => 'open',
       'add_mode' => 'dropdown',
       'form_display_mode' => 'default',
       'default_paragraph_type' => '',
-    );
+    ];
   }
 
   /**
    * {@inheritdoc}
    */
   public function settingsForm(array $form, FormStateInterface $form_state) {
-    $elements = array();
+    $elements = [];
 
-    $elements['title'] = array(
+    $elements['title'] = [
       '#type' => 'textfield',
       '#title' => $this->t('Paragraph Title'),
       '#description' => $this->t('Label to appear as title on the button as "Add new [title]", this label is translatable'),
       '#default_value' => $this->getSetting('title'),
       '#required' => TRUE,
-    );
+    ];
 
-    $elements['title_plural'] = array(
+    $elements['title_plural'] = [
       '#type' => 'textfield',
       '#title' => $this->t('Plural Paragraph Title'),
       '#description' => $this->t('Title in its plural form.'),
       '#default_value' => $this->getSetting('title_plural'),
       '#required' => TRUE,
-    );
+    ];
 
-    $elements['edit_mode'] = array(
+    $elements['edit_mode'] = [
       '#type' => 'select',
       '#title' => $this->t('Edit mode'),
       '#description' => $this->t('The mode the paragraph is in by default. Preview will render the paragraph in the preview view mode.'),
-      '#options' => array(
+      '#options' => [
         'open' => $this->t('Open'),
         'closed' => $this->t('Closed'),
         'preview' => $this->t('Preview'),
-      ),
+      ],
       '#default_value' => $this->getSetting('edit_mode'),
       '#required' => TRUE,
-    );
+    ];
 
-    $elements['add_mode'] = array(
+    $elements['add_mode'] = [
       '#type' => 'select',
       '#title' => $this->t('Add mode'),
       '#description' => $this->t('The way to add new Paragraphs.'),
-      '#options' => array(
+      '#options' => [
         'select' => $this->t('Select list'),
         'button' => $this->t('Buttons'),
-        'dropdown' => $this->t('Dropdown button')
-      ),
+        'dropdown' => $this->t('Dropdown button'),
+      ],
       '#default_value' => $this->getSetting('add_mode'),
       '#required' => TRUE,
-    );
+    ];
 
-    $elements['form_display_mode'] = array(
+    $elements['form_display_mode'] = [
       '#type' => 'select',
       '#options' => \Drupal::service('entity_display.repository')->getFormModeOptions($this->getFieldSetting('target_type')),
       '#description' => $this->t('The form display mode to use when rendering the paragraph form.'),
       '#title' => $this->t('Form display mode'),
       '#default_value' => $this->getSetting('form_display_mode'),
       '#required' => TRUE,
-    );
+    ];
 
-    $options  = [];
+    $options = [];
     foreach ($this->getAllowedTypes() as $key => $bundle) {
       $options[$key] = $bundle['label'];
     }
@@ -169,33 +169,37 @@ class InlineParagraphsWidget extends WidgetBase {
    * {@inheritdoc}
    */
   public function settingsSummary() {
-    $summary = array();
+    $summary = [];
     $summary[] = $this->t('Title: @title', ['@title' => $this->getSetting('title')]);
     $summary[] = $this->t('Plural title: @title_plural', [
-      '@title_plural' => $this->getSetting('title_plural')
+      '@title_plural' => $this->getSetting('title_plural'),
     ]);
 
-    switch($this->getSetting('edit_mode')) {
+    switch ($this->getSetting('edit_mode')) {
       case 'open':
       default:
         $edit_mode = $this->t('Open');
         break;
+
       case 'closed':
         $edit_mode = $this->t('Closed');
         break;
+
       case 'preview':
         $edit_mode = $this->t('Preview');
         break;
     }
 
-    switch($this->getSetting('add_mode')) {
+    switch ($this->getSetting('add_mode')) {
       case 'select':
       default:
         $add_mode = $this->t('Select list');
         break;
+
       case 'button':
         $add_mode = $this->t('Buttons');
         break;
+
       case 'dropdown':
         $add_mode = $this->t('Dropdown button');
         break;
@@ -204,11 +208,11 @@ class InlineParagraphsWidget extends WidgetBase {
     $summary[] = $this->t('Edit mode: @edit_mode', ['@edit_mode' => $edit_mode]);
     $summary[] = $this->t('Add mode: @add_mode', ['@add_mode' => $add_mode]);
     $summary[] = $this->t('Form display mode: @form_display_mode', [
-      '@form_display_mode' => $this->getSetting('form_display_mode')
+      '@form_display_mode' => $this->getSetting('form_display_mode'),
     ]);
     if ($this->getDefaultParagraphTypeLabelName() !== NULL) {
       $summary[] = $this->t('Default paragraph type: @default_paragraph_type', [
-        '@default_paragraph_type' => $this->getDefaultParagraphTypeLabelName()
+        '@default_paragraph_type' => $this->getDefaultParagraphTypeLabelName(),
       ]);
     }
 
@@ -264,9 +268,9 @@ class InlineParagraphsWidget extends WidgetBase {
       $entity_type = $entity_type_manager->getDefinition($target_type);
       $bundle_key = $entity_type->getKey('bundle');
 
-      $paragraphs_entity = $entity_type_manager->getStorage($target_type)->create(array(
+      $paragraphs_entity = $entity_type_manager->getStorage($target_type)->create([
         $bundle_key => $widget_state['selected_bundle'],
-      ));
+      ]);
       $paragraphs_entity->setParentEntity($items->getEntity(), $field_name);
 
       $item_mode = 'edit';
@@ -287,11 +291,11 @@ class InlineParagraphsWidget extends WidgetBase {
         foreach ($violations as $violation) {
           $messages[] = $violation->getMessage();
         }
-        $info['validation_error'] = array(
+        $info['validation_error'] = [
           '#type' => 'container',
           '#markup' => $this->t('@messages', ['@messages' => strip_tags(implode('\n', $messages))]),
           '#attributes' => ['class' => ['messages', 'messages--warning']],
-        );
+        ];
       }
     }
 
@@ -350,18 +354,18 @@ class InlineParagraphsWidget extends WidgetBase {
       $element_parents[] = $delta;
       $element_parents[] = 'subform';
 
-      $id_prefix = implode('-', array_merge($parents, array($field_name, $delta)));
+      $id_prefix = implode('-', array_merge($parents, [$field_name, $delta]));
       $wrapper_id = Html::getUniqueId($id_prefix . '-item-wrapper');
 
-      $element += array(
+      $element += [
         '#type' => 'container',
-        '#element_validate' => array(array($this, 'elementValidate')),
+        '#element_validate' => [[$this, 'elementValidate']],
         '#paragraph_type' => $paragraphs_entity->bundle(),
-        'subform' => array(
+        'subform' => [
           '#type' => 'container',
           '#parents' => $element_parents,
-        ),
-      );
+        ],
+      ];
 
       $element['#prefix'] = '<div id="' . $wrapper_id . '">';
       $element['#suffix'] = '</div>';
@@ -370,32 +374,32 @@ class InlineParagraphsWidget extends WidgetBase {
       if (isset($item_bundles[$paragraphs_entity->bundle()])) {
         $bundle_info = $item_bundles[$paragraphs_entity->bundle()];
 
-        $element['top'] = array(
+        $element['top'] = [
           '#type' => 'container',
           '#weight' => -1000,
-          '#attributes' => array(
-            'class' => array(
+          '#attributes' => [
+            'class' => [
               'paragraph-type-top',
-            ),
-          ),
-        );
+            ],
+          ],
+        ];
 
-        $element['top']['paragraph_type_title'] = array(
+        $element['top']['paragraph_type_title'] = [
           '#type' => 'container',
           '#weight' => 0,
-          '#attributes' => array(
-            'class' => array(
+          '#attributes' => [
+            'class' => [
               'paragraph-type-title',
-            ),
-          ),
-        );
+            ],
+          ],
+        ];
 
-        $element['top']['paragraph_type_title']['info'] = array(
+        $element['top']['paragraph_type_title']['info'] = [
           '#markup' => $bundle_info['label'],
-        );
+        ];
 
-        $actions = array();
-        $links = array();
+        $actions = [];
+        $links = [];
 
         // Avoid checking delete access for new entities.
         $delete_access = $paragraphs_entity->isNew() || $paragraphs_entity->access('delete');
@@ -429,103 +433,103 @@ class InlineParagraphsWidget extends WidgetBase {
         if ($item_mode == 'edit') {
 
           if (isset($items[$delta]->entity) && ($default_edit_mode == 'preview' || $default_edit_mode == 'closed')) {
-            $links['collapse_button'] = array(
+            $links['collapse_button'] = [
               '#type' => 'submit',
               '#value' => $this->t('Collapse'),
               '#name' => strtr($id_prefix, '-', '_') . '_collapse',
               '#weight' => 499,
-              '#submit' => array(array(get_class($this), 'paragraphsItemSubmit')),
+              '#submit' => [[get_class($this), 'paragraphsItemSubmit']],
               '#delta' => $delta,
               '#limit_validation_errors' => [array_merge($parents, [$field_name, 'add_more'])],
-              '#ajax' => array(
-                'callback' => array(get_class($this), 'itemAjax'),
+              '#ajax' => [
+                'callback' => [get_class($this), 'itemAjax'],
                 'wrapper' => $widget_state['ajax_wrapper_id'],
                 'effect' => 'fade',
-              ),
+              ],
               '#access' => $paragraphs_entity->access('update'),
               '#prefix' => '<li class="collapse dropbutton__item  dropbutton__item--extrasmall">',
               '#suffix' => '</li>',
               '#paragraphs_mode' => 'collapsed',
               '#paragraphs_show_warning' => TRUE,
-            );
+            ];
           }
 
-          $info['edit_button_info'] = array(
+          $info['edit_button_info'] = [
             '#type' => 'container',
-            '#markup' => $this->t('You are not allowed to edit this @title.', array('@title' => $this->getSetting('title'))),
+            '#markup' => $this->t('You are not allowed to edit this @title.', ['@title' => $this->getSetting('title')]),
             '#attributes' => ['class' => ['messages', 'messages--warning']],
             '#access' => !$paragraphs_entity->access('update') && $delete_access,
-          );
+          ];
 
-          $info['remove_button_info'] = array(
+          $info['remove_button_info'] = [
             '#type' => 'container',
-            '#markup' => $this->t('You are not allowed to remove this @title.', array('@title' => $this->getSetting('title'))),
+            '#markup' => $this->t('You are not allowed to remove this @title.', ['@title' => $this->getSetting('title')]),
             '#attributes' => ['class' => ['messages', 'messages--warning']],
             '#access' => !$delete_access && $paragraphs_entity->access('update'),
-          );
+          ];
 
-          $info['edit_remove_button_info'] = array(
+          $info['edit_remove_button_info'] = [
             '#type' => 'container',
-            '#markup' => $this->t('You are not allowed to edit or remove this @title.', array('@title' => $this->getSetting('title'))),
+            '#markup' => $this->t('You are not allowed to edit or remove this @title.', ['@title' => $this->getSetting('title')]),
             '#attributes' => ['class' => ['messages', 'messages--warning']],
             '#access' => !$paragraphs_entity->access('update') && !$delete_access,
-          );
+          ];
         }
         elseif ($item_mode == 'preview' || $item_mode == 'closed') {
-          $links['edit_button'] = array(
+          $links['edit_button'] = [
             '#type' => 'submit',
             '#value' => $this->t('Edit'),
             '#name' => strtr($id_prefix, '-', '_') . '_edit',
             '#weight' => 500,
-            '#submit' => array(array(get_class($this), 'paragraphsItemSubmit')),
-            '#limit_validation_errors' => array(array_merge($parents, array($field_name, 'add_more'))),
+            '#submit' => [[get_class($this), 'paragraphsItemSubmit']],
+            '#limit_validation_errors' => [array_merge($parents, [$field_name, 'add_more'])],
             '#delta' => $delta,
-            '#ajax' => array(
-              'callback' => array(get_class($this), 'itemAjax'),
+            '#ajax' => [
+              'callback' => [get_class($this), 'itemAjax'],
               'wrapper' => $widget_state['ajax_wrapper_id'],
               'effect' => 'fade',
-            ),
+            ],
             '#access' => $paragraphs_entity->access('update'),
             '#prefix' => '<li class="edit dropbutton__item  dropbutton__item--extrasmall">',
             '#suffix' => '</li>',
             '#paragraphs_mode' => 'edit',
-          );
+          ];
 
           if ($show_must_be_saved_warning) {
-            $info['must_be_saved_info'] = array(
+            $info['must_be_saved_info'] = [
               '#type' => 'container',
-              '#markup' => $this->t('You have unsaved changes on this @title item.', array('@title' => $this->getSetting('title'))),
+              '#markup' => $this->t('You have unsaved changes on this @title item.', ['@title' => $this->getSetting('title')]),
               '#attributes' => ['class' => ['messages', 'messages--warning']],
-            );
+            ];
           }
 
-          $info['preview_info'] = array(
+          $info['preview_info'] = [
             '#type' => 'container',
-            '#markup' => $this->t('You are not allowed to view this @title.', array('@title' => $this->getSetting('title'))),
+            '#markup' => $this->t('You are not allowed to view this @title.', ['@title' => $this->getSetting('title')]),
             '#attributes' => ['class' => ['messages', 'messages--warning']],
             '#access' => !$paragraphs_entity->access('view'),
-          );
+          ];
 
-          $info['edit_button_info'] = array(
+          $info['edit_button_info'] = [
             '#type' => 'container',
-            '#markup' => $this->t('You are not allowed to edit this @title.', array('@title' => $this->getSetting('title'))),
+            '#markup' => $this->t('You are not allowed to edit this @title.', ['@title' => $this->getSetting('title')]),
             '#attributes' => ['class' => ['messages', 'messages--warning']],
             '#access' => !$paragraphs_entity->access('update') && $delete_access,
-          );
+          ];
 
-          $info['remove_button_info'] = array(
+          $info['remove_button_info'] = [
             '#type' => 'container',
-            '#markup' => $this->t('You are not allowed to remove this @title.', array('@title' => $this->getSetting('title'))),
+            '#markup' => $this->t('You are not allowed to remove this @title.', ['@title' => $this->getSetting('title')]),
             '#attributes' => ['class' => ['messages', 'messages--warning']],
             '#access' => !$delete_access && $paragraphs_entity->access('update'),
-          );
+          ];
 
-          $info['edit_remove_button_info'] = array(
+          $info['edit_remove_button_info'] = [
             '#type' => 'container',
-            '#markup' => $this->t('You are not allowed to edit or remove this @title.', array('@title' => $this->getSetting('title'))),
+            '#markup' => $this->t('You are not allowed to edit or remove this @title.', ['@title' => $this->getSetting('title')]),
             '#attributes' => ['class' => ['messages', 'messages--warning']],
             '#access' => !$paragraphs_entity->access('update') && !$delete_access,
-          );
+          ];
         }
         elseif ($item_mode == 'remove') {
 
@@ -572,7 +576,7 @@ class InlineParagraphsWidget extends WidgetBase {
 
         if (!empty($links)) {
           $show_links = 0;
-          foreach($links as $link_item) {
+          foreach ($links as $link_item) {
             if (!isset($link_item['#access']) || $link_item['#access']) {
               $show_links++;
             }
@@ -582,19 +586,19 @@ class InlineParagraphsWidget extends WidgetBase {
 
             $element['top']['links'] = $links;
             if ($show_links > 1) {
-              $element['top']['links']['#theme_wrappers'] = array('dropbutton_wrapper', 'paragraphs_dropbutton_wrapper');
-              $element['top']['links']['prefix'] = array(
+              $element['top']['links']['#theme_wrappers'] = ['dropbutton_wrapper', 'paragraphs_dropbutton_wrapper'];
+              $element['top']['links']['prefix'] = [
                 '#markup' => '<ul class="dropbutton dropbutton--multiple dropbutton--extrasmall">',
                 '#weight' => -999,
-              );
-              $element['top']['links']['suffix'] = array(
+              ];
+              $element['top']['links']['suffix'] = [
                 '#markup' => '</li>',
                 '#weight' => 999,
-              );
+              ];
             }
             else {
-              $element['top']['links']['#theme_wrappers'] = array('paragraphs_dropbutton_wrapper');
-              foreach($links as $key => $link_item) {
+              $element['top']['links']['#theme_wrappers'] = ['paragraphs_dropbutton_wrapper'];
+              foreach ($links as $key => $link_item) {
                 unset($element['top']['links'][$key]['#prefix']);
                 unset($element['top']['links'][$key]['#suffix']);
               }
@@ -605,7 +609,7 @@ class InlineParagraphsWidget extends WidgetBase {
 
         if (!empty($info)) {
           $show_info = FALSE;
-          foreach($info as $info_item) {
+          foreach ($info as $info_item) {
             if (!isset($info_item['#access']) || $info_item['#access']) {
               $show_info = TRUE;
               break;
@@ -620,7 +624,7 @@ class InlineParagraphsWidget extends WidgetBase {
 
         if (!empty($actions)) {
           $show_actions = FALSE;
-          foreach($actions as $action_item) {
+          foreach ($actions as $action_item) {
             if (!isset($action_item['#access']) || $action_item['#access']) {
               $show_actions = TRUE;
               break;
@@ -691,7 +695,7 @@ class InlineParagraphsWidget extends WidgetBase {
               else {
                 $element['subform'][$field]['widget']['#after_build'][] = [
                   static::class,
-                  'addTranslatabilityClue'
+                  'addTranslatabilityClue',
                 ];
               }
             }
@@ -700,13 +704,13 @@ class InlineParagraphsWidget extends WidgetBase {
       }
       elseif ($item_mode == 'preview') {
         $view_builder = $entity_type_manager->getViewBuilder($paragraphs_entity->getEntityTypeId());
-        $element['subform'] = array();
+        $element['subform'] = [];
         $element['behavior_plugins'] = [];
         $element['preview'] = $view_builder->view($paragraphs_entity, 'preview', $paragraphs_entity->language()->getId());
         $element['preview']['#access'] = $paragraphs_entity->access('view');
       }
       elseif ($item_mode == 'closed') {
-        $element['subform'] = array();
+        $element['subform'] = [];
         $element['behavior_plugins'] = [];
         if ($paragraphs_entity) {
           $element['top']['paragraph_summary']['fields_info'] = [
@@ -716,7 +720,7 @@ class InlineParagraphsWidget extends WidgetBase {
         }
       }
       else {
-        $element['subform'] = array();
+        $element['subform'] = [];
       }
 
       $element['subform']['#attributes']['class'][] = 'paragraphs-subform';
@@ -749,7 +753,7 @@ class InlineParagraphsWidget extends WidgetBase {
    */
   public function getAllowedTypes() {
 
-    $return_bundles = array();
+    $return_bundles = [];
     /** @var \Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManagerInterface $selection_manager */
     $selection_manager = \Drupal::service('plugin.manager.entity_reference_selection');
     $handler = $selection_manager->getSelectionHandler($this->fieldDefinition);
@@ -764,10 +768,10 @@ class InlineParagraphsWidget extends WidgetBase {
         if (empty($this->getSelectionHandlerSetting('target_bundles'))
           || in_array($machine_name, $this->getSelectionHandlerSetting('target_bundles'))) {
 
-          $return_bundles[$machine_name] = array(
+          $return_bundles[$machine_name] = [
             'label' => $bundle['label'],
             'weight' => $weight,
-          );
+          ];
 
           $weight++;
         }
@@ -777,6 +781,9 @@ class InlineParagraphsWidget extends WidgetBase {
     return $return_bundles;
   }
 
+  /**
+   *
+   */
   public function formMultipleElements(FieldItemListInterface $items, array &$form, FormStateInterface $form_state) {
     $field_name = $this->fieldDefinition->getName();
     $cardinality = $this->fieldDefinition->getFieldStorageDefinition()->getCardinality();
@@ -804,7 +811,7 @@ class InlineParagraphsWidget extends WidgetBase {
           'entity' => $paragraphs_entity,
           'display' => $display,
           'mode' => 'edit',
-          'original_delta' => 1
+          'original_delta' => 1,
         ];
         $max = 1;
         $field_state['items_count'] = $max;
@@ -817,8 +824,8 @@ class InlineParagraphsWidget extends WidgetBase {
     $title = $this->fieldDefinition->getLabel();
     $description = FieldFilteredMarkup::create(\Drupal::token()->replace($this->fieldDefinition->getDescription()));
 
-    $elements = array();
-    $this->fieldIdPrefix = implode('-', array_merge($this->fieldParents, array($field_name)));
+    $elements = [];
+    $this->fieldIdPrefix = implode('-', array_merge($this->fieldParents, [$field_name]));
     $this->fieldWrapperId = Html::getUniqueId($this->fieldIdPrefix . '-add-more-wrapper');
     $elements['#prefix'] = '<div id="' . $this->fieldWrapperId . '">';
     $elements['#suffix'] = '</div>';
@@ -837,10 +844,10 @@ class InlineParagraphsWidget extends WidgetBase {
 
         // For multiple fields, title and description are handled by the wrapping
         // table.
-        $element = array(
+        $element = [
           '#title' => $is_multiple ? '' : $title,
           '#description' => $is_multiple ? '' : $description,
-        );
+        ];
         $element = $this->formSingleElement($items, $delta, $element, $form, $form_state);
 
         if ($element) {
@@ -848,15 +855,15 @@ class InlineParagraphsWidget extends WidgetBase {
           if ($is_multiple) {
             // We name the element '_weight' to avoid clashing with elements
             // defined by widget.
-            $element['_weight'] = array(
+            $element['_weight'] = [
               '#type' => 'weight',
-              '#title' => $this->t('Weight for row @number', array('@number' => $delta + 1)),
+              '#title' => $this->t('Weight for row @number', ['@number' => $delta + 1]),
               '#title_display' => 'invisible',
               // Note: this 'delta' is the FAPI #type 'weight' element's property.
               '#delta' => $max,
               '#default_value' => $items[$delta]->_weight ?: $delta,
               '#weight' => 100,
-            );
+            ];
           }
 
           // Access for the top element is set to FALSE only when the paragraph
@@ -885,12 +892,12 @@ class InlineParagraphsWidget extends WidgetBase {
     ];
 
     if ($this->realItemCount > 0) {
-      $elements += array(
+      $elements += [
         '#theme' => 'field_multiple_value_form',
         '#cardinality_multiple' => $is_multiple,
         '#title' => $title,
         '#description' => $description,
-      );
+      ];
     }
     else {
       $classes = $this->fieldDefinition->isRequired() ? ['form-required'] : [];
@@ -910,7 +917,7 @@ class InlineParagraphsWidget extends WidgetBase {
             '#markup' => $this->t('No @title added yet.', ['@title' => $this->getSetting('title')]),
             '#prefix' => '<em>',
             '#suffix' => '</em>',
-          ]
+          ],
         ],
       ];
 
@@ -965,7 +972,7 @@ class InlineParagraphsWidget extends WidgetBase {
    * Add 'add more' button, if not working with a programmed form.
    *
    * @return array
-   *    The form element array.
+   *   The form element array.
    */
   protected function buildAddActions() {
     if (count($this->getAccessibleOptions()) === 0) {
@@ -984,7 +991,7 @@ class InlineParagraphsWidget extends WidgetBase {
         ];
       }
 
-      return $add_more_elements ;
+      return $add_more_elements;
     }
 
     if ($this->getSetting('add_mode') == 'button' || $this->getSetting('add_mode') == 'dropdown') {
@@ -1128,6 +1135,7 @@ class InlineParagraphsWidget extends WidgetBase {
    *
    * @param \Drupal\Core\Form\FormStateInterface $form_state
    * @param \Drupal\Core\Field\FieldItemListInterface $items
+   *
    * @return string
    */
   protected function getCurrentLangcode(FormStateInterface $form_state, FieldItemListInterface $items) {
@@ -1180,6 +1188,9 @@ class InlineParagraphsWidget extends WidgetBase {
     $form_state->setRebuild();
   }
 
+  /**
+   *
+   */
   public static function paragraphsItemSubmit(array $form, FormStateInterface $form_state) {
     $button = $form_state->getTriggeringElement();
 
@@ -1205,6 +1216,9 @@ class InlineParagraphsWidget extends WidgetBase {
     $form_state->setRebuild();
   }
 
+  /**
+   *
+   */
   public static function itemAjax(array $form, FormStateInterface $form_state) {
     $button = $form_state->getTriggeringElement();
     // Go one level up in the form, to the widgets container.
@@ -1311,7 +1325,7 @@ class InlineParagraphsWidget extends WidgetBase {
         $paragraphs_entity = $widget_state['paragraphs'][$item['_original_delta']]['entity'];
 
         /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $display */
-        $display =  $widget_state['paragraphs'][$item['_original_delta']]['display'];
+        $display = $widget_state['paragraphs'][$item['_original_delta']]['display'];
         if ($widget_state['paragraphs'][$item['_original_delta']]['mode'] == 'edit') {
           $display->extractFormValues($paragraphs_entity, $element[$item['_original_delta']]['subform'], $form_state);
         }
@@ -1336,7 +1350,7 @@ class InlineParagraphsWidget extends WidgetBase {
       }
       // If our mode is remove don't save or reference this entity.
       // @todo: Maybe we should actually delete it here?
-      elseif(isset($widget_state['paragraphs'][$item['_original_delta']]['mode'])
+      elseif (isset($widget_state['paragraphs'][$item['_original_delta']]['mode'])
         && in_array($widget_state['paragraphs'][$item['_original_delta']]['mode'], ['remove', 'removed'])) {
         $item['target_id'] = NULL;
         $item['target_revision_id'] = NULL;
@@ -1433,10 +1447,10 @@ class InlineParagraphsWidget extends WidgetBase {
   /**
    * Returns the default paragraph type.
    *
-   * @return string $default_paragraph_type
+   * @return string
    *   Label name for default paragraph type.
    */
-  protected function getDefaultParagraphTypeLabelName(){
+  protected function getDefaultParagraphTypeLabelName() {
     if ($this->getDefaultParagraphTypeMachineName() !== NULL) {
       $allowed_types = $this->getAllowedTypes();
       return $allowed_types[$this->getDefaultParagraphTypeMachineName()]['label'];
diff --git a/src/Plugin/Field/FieldWidget/ParagraphsWidget.php b/src/Plugin/Field/FieldWidget/ParagraphsWidget.php
index e6decde..de85d6c 100644
--- a/src/Plugin/Field/FieldWidget/ParagraphsWidget.php
+++ b/src/Plugin/Field/FieldWidget/ParagraphsWidget.php
@@ -109,7 +109,7 @@ class ParagraphsWidget extends WidgetBase {
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings) {
     // Modify settings that were set before https://www.drupal.org/node/2896115.
-    if(isset($settings['edit_mode']) && $settings['edit_mode'] === 'preview') {
+    if (isset($settings['edit_mode']) && $settings['edit_mode'] === 'preview') {
       $settings['edit_mode'] = 'closed';
       $settings['closed_mode'] = 'preview';
     }
@@ -121,7 +121,7 @@ class ParagraphsWidget extends WidgetBase {
    * {@inheritdoc}
    */
   public static function defaultSettings() {
-    return array(
+    return [
       'title' => t('Paragraph'),
       'title_plural' => t('Paragraphs'),
       'edit_mode' => 'open',
@@ -132,39 +132,39 @@ class ParagraphsWidget extends WidgetBase {
       'form_display_mode' => 'default',
       'default_paragraph_type' => '',
       'features' => ['duplicate' => 'duplicate', 'collapse_edit_all' => 'collapse_edit_all'],
-    );
+    ];
   }
 
   /**
    * {@inheritdoc}
    */
   public function settingsForm(array $form, FormStateInterface $form_state) {
-    $elements = array();
+    $elements = [];
 
-    $elements['title'] = array(
+    $elements['title'] = [
       '#type' => 'textfield',
       '#title' => $this->t('Paragraph Title'),
       '#description' => $this->t('Label to appear as title on the button as "Add new [title]", this label is translatable'),
       '#default_value' => $this->getSetting('title'),
       '#required' => TRUE,
-    );
+    ];
 
-    $elements['title_plural'] = array(
+    $elements['title_plural'] = [
       '#type' => 'textfield',
       '#title' => $this->t('Plural Paragraph Title'),
       '#description' => $this->t('Title in its plural form.'),
       '#default_value' => $this->getSetting('title_plural'),
       '#required' => TRUE,
-    );
+    ];
 
-    $elements['edit_mode'] = array(
+    $elements['edit_mode'] = [
       '#type' => 'select',
       '#title' => $this->t('Edit mode'),
       '#description' => $this->t('The mode the paragraph is in by default.'),
       '#options' => $this->getSettingOptions('edit_mode'),
       '#default_value' => $this->getSetting('edit_mode'),
       '#required' => TRUE,
-    );
+    ];
 
     $elements['closed_mode'] = [
       '#type' => 'select',
@@ -184,7 +184,7 @@ class ParagraphsWidget extends WidgetBase {
       '#required' => TRUE,
       '#states' => [
         'visible' => [
-          'select[name="fields[' . $this->fieldDefinition->getName() .  '][settings_edit_form][settings][edit_mode]"]' => ['value' => 'closed'],
+          'select[name="fields[' . $this->fieldDefinition->getName() . '][settings_edit_form][settings][edit_mode]"]' => ['value' => 'closed'],
         ],
       ],
     ];
@@ -197,30 +197,30 @@ class ParagraphsWidget extends WidgetBase {
       '#min' => 0,
       '#states' => [
         'invisible' => [
-          'select[name="fields[' . $this->fieldDefinition->getName() .  '][settings_edit_form][settings][edit_mode]"]' => ['value' => 'open'],
+          'select[name="fields[' . $this->fieldDefinition->getName() . '][settings_edit_form][settings][edit_mode]"]' => ['value' => 'open'],
         ],
       ],
     ];
 
-    $elements['add_mode'] = array(
+    $elements['add_mode'] = [
       '#type' => 'select',
       '#title' => $this->t('Add mode'),
       '#description' => $this->t('The way to add new Paragraphs.'),
       '#options' => $this->getSettingOptions('add_mode'),
       '#default_value' => $this->getSetting('add_mode'),
       '#required' => TRUE,
-    );
+    ];
 
-    $elements['form_display_mode'] = array(
+    $elements['form_display_mode'] = [
       '#type' => 'select',
       '#options' => \Drupal::service('entity_display.repository')->getFormModeOptions($this->getFieldSetting('target_type')),
       '#description' => $this->t('The form display mode to use when rendering the paragraph form.'),
       '#title' => $this->t('Form display mode'),
       '#default_value' => $this->getSetting('form_display_mode'),
       '#required' => TRUE,
-    );
+    ];
 
-    $options  = [];
+    $options = [];
     foreach ($this->getAllowedTypes() as $key => $bundle) {
       $options[$key] = $bundle['label'];
     }
@@ -258,13 +258,13 @@ class ParagraphsWidget extends WidgetBase {
    *   - "edit_mode"
    *   - "closed_mode"
    *   - "autocollapse"
-   *   - "add_mode"
+   *   - "add_mode".
    *
    * @return array|null
    *   An array of setting option usable as a value for a "#options" key.
    */
   protected function getSettingOptions($setting_name) {
-    switch($setting_name) {
+    switch ($setting_name) {
       case 'edit_mode':
         $options = [
           'open' => $this->t('Open'),
@@ -272,18 +272,21 @@ class ParagraphsWidget extends WidgetBase {
           'closed_expand_nested' => $this->t('Closed, show nested'),
         ];
         break;
+
       case 'closed_mode':
         $options = [
           'summary' => $this->t('Summary'),
           'preview' => $this->t('Preview'),
         ];
         break;
+
       case 'autocollapse':
         $options = [
           'none' => $this->t('None'),
           'all' => $this->t('All'),
         ];
         break;
+
       case 'add_mode':
         $options = [
           'select' => $this->t('Select list'),
@@ -292,6 +295,7 @@ class ParagraphsWidget extends WidgetBase {
           'modal' => $this->t('Modal form'),
         ];
         break;
+
       case 'features':
         $options = [
           'duplicate' => $this->t('Duplicate'),
@@ -311,10 +315,10 @@ class ParagraphsWidget extends WidgetBase {
    * {@inheritdoc}
    */
   public function settingsSummary() {
-    $summary = array();
+    $summary = [];
     $summary[] = $this->t('Title: @title', ['@title' => $this->getSetting('title')]);
     $summary[] = $this->t('Plural title: @title_plural', [
-      '@title_plural' => $this->getSetting('title_plural')
+      '@title_plural' => $this->getSetting('title_plural'),
     ]);
 
     $edit_mode = $this->getSettingOptions('edit_mode')[$this->getSetting('edit_mode')];
@@ -333,11 +337,11 @@ class ParagraphsWidget extends WidgetBase {
     $summary[] = $this->t('Add mode: @add_mode', ['@add_mode' => $add_mode]);
 
     $summary[] = $this->t('Form display mode: @form_display_mode', [
-      '@form_display_mode' => $this->getSetting('form_display_mode')
+      '@form_display_mode' => $this->getSetting('form_display_mode'),
     ]);
     if ($this->getDefaultParagraphTypeLabelName() !== NULL) {
       $summary[] = $this->t('Default paragraph type: @default_paragraph_type', [
-        '@default_paragraph_type' => $this->getDefaultParagraphTypeLabelName()
+        '@default_paragraph_type' => $this->getDefaultParagraphTypeLabelName(),
       ]);
     }
     $features_labels = array_intersect_key($this->getSettingOptions('features'), array_filter($this->getSetting('features')));
@@ -408,9 +412,9 @@ class ParagraphsWidget extends WidgetBase {
       $entity_type = $entity_type_manager->getDefinition($target_type);
       $bundle_key = $entity_type->getKey('bundle');
 
-      $paragraphs_entity = $entity_type_manager->getStorage($target_type)->create(array(
+      $paragraphs_entity = $entity_type_manager->getStorage($target_type)->create([
         $bundle_key => $widget_state['selected_bundle'],
-      ));
+      ]);
       $paragraphs_entity->setParentEntity($host, $field_name);
 
       $item_mode = 'edit';
@@ -506,18 +510,18 @@ class ParagraphsWidget extends WidgetBase {
       $element_parents[] = $delta;
       $element_parents[] = 'subform';
 
-      $id_prefix = implode('-', array_merge($parents, array($field_name, $delta)));
+      $id_prefix = implode('-', array_merge($parents, [$field_name, $delta]));
       $wrapper_id = Html::getUniqueId($id_prefix . '-item-wrapper');
 
-      $element += array(
+      $element += [
         '#type' => 'container',
-        '#element_validate' => array(array($this, 'elementValidate')),
+        '#element_validate' => [[$this, 'elementValidate']],
         '#paragraph_type' => $paragraphs_entity->bundle(),
-        'subform' => array(
+        'subform' => [
           '#type' => 'container',
           '#parents' => $element_parents,
-        ),
-      );
+        ],
+      ];
 
       $element['#prefix'] = '<div id="' . $wrapper_id . '">';
       $element['#suffix'] = '</div>';
@@ -624,7 +628,7 @@ class ParagraphsWidget extends WidgetBase {
             '#limit_validation_errors' => [],
             '#delta' => $delta,
             '#ajax' => [
-              'callback' => array(get_class($this), 'itemAjax'),
+              'callback' => [get_class($this), 'itemAjax'],
               'wrapper' => $widget_state['ajax_wrapper_id'],
             ],
             '#access' => $this->removeButtonAccess($paragraphs_entity),
@@ -830,7 +834,7 @@ class ParagraphsWidget extends WidgetBase {
               else {
                 $element['subform'][$field]['widget']['#after_build'][] = [
                   static::class,
-                  'addTranslatabilityClue'
+                  'addTranslatabilityClue',
                 ];
               }
             }
@@ -886,7 +890,7 @@ class ParagraphsWidget extends WidgetBase {
         }
       }
       else {
-        $element['subform'] = array();
+        $element['subform'] = [];
       }
 
       // If we have any info items lets add them to the top section.
@@ -981,8 +985,8 @@ class ParagraphsWidget extends WidgetBase {
    * Returns the sorted allowed types for a entity reference field.
    *
    * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
-   *  (optional) The field definition forwhich the allowed types should be
-   *  returned, defaults to the current field.
+   *   (optional) The field definition forwhich the allowed types should be
+   *   returned, defaults to the current field.
    *
    * @return array
    *   A list of arrays keyed by the paragraph type machine name with the following properties.
@@ -991,7 +995,7 @@ class ParagraphsWidget extends WidgetBase {
    */
   public function getAllowedTypes(FieldDefinitionInterface $field_definition = NULL) {
 
-    $return_bundles = array();
+    $return_bundles = [];
     /** @var \Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManagerInterface $selection_manager */
     $selection_manager = \Drupal::service('plugin.manager.entity_reference_selection');
     $handler = $selection_manager->getSelectionHandler($field_definition ?: $this->fieldDefinition);
@@ -1006,10 +1010,10 @@ class ParagraphsWidget extends WidgetBase {
         if (empty($this->getSelectionHandlerSetting('target_bundles'))
           || in_array($machine_name, $this->getSelectionHandlerSetting('target_bundles'))) {
 
-          $return_bundles[$machine_name] = array(
+          $return_bundles[$machine_name] = [
             'label' => $bundle['label'],
             'weight' => $weight,
-          );
+          ];
 
           $weight++;
         }
@@ -1051,7 +1055,7 @@ class ParagraphsWidget extends WidgetBase {
           'entity' => $paragraphs_entity,
           'display' => $display,
           'mode' => 'edit',
-          'original_delta' => 1
+          'original_delta' => 1,
         ];
         $max = 1;
         $field_state['items_count'] = $max;
@@ -1064,9 +1068,9 @@ class ParagraphsWidget extends WidgetBase {
     $field_title = $this->fieldDefinition->getLabel();
     $description = FieldFilteredMarkup::create(\Drupal::token()->replace($this->fieldDefinition->getDescription()));
 
-    $elements = array();
+    $elements = [];
     $tabs = '';
-    $this->fieldIdPrefix = implode('-', array_merge($this->fieldParents, array($field_name)));
+    $this->fieldIdPrefix = implode('-', array_merge($this->fieldParents, [$field_name]));
     $this->fieldWrapperId = Html::getId($this->fieldIdPrefix . '-add-more-wrapper');
 
     // If the parent entity is paragraph add the nested class if not then add
@@ -1107,7 +1111,7 @@ class ParagraphsWidget extends WidgetBase {
       ]);
 
       $elements['#attached']['library'][] = 'paragraphs/paragraphs-dragdrop';
-      //$elements['dragdrop_mode']['#button_type'] = 'primary';
+      // $elements['dragdrop_mode']['#button_type'] = 'primary';
       $elements['dragdrop'] = $this->buildNestedParagraphsFoDragDrop($form_state, NULL, []);
       return $elements;
     }
@@ -1122,10 +1126,10 @@ class ParagraphsWidget extends WidgetBase {
 
         // For multiple fields, title and description are handled by the wrapping
         // table.
-        $element = array(
+        $element = [
           '#title' => $is_multiple ? '' : $field_title,
           '#description' => $is_multiple ? '' : $description,
-        );
+        ];
         $element = $this->formSingleElement($items, $delta, $element, $form, $form_state);
 
         if ($element) {
@@ -1133,15 +1137,15 @@ class ParagraphsWidget extends WidgetBase {
           if ($is_multiple) {
             // We name the element '_weight' to avoid clashing with elements
             // defined by widget.
-            $element['_weight'] = array(
+            $element['_weight'] = [
               '#type' => 'weight',
-              '#title' => $this->t('Weight for row @number', array('@number' => $delta + 1)),
+              '#title' => $this->t('Weight for row @number', ['@number' => $delta + 1]),
               '#title_display' => 'invisible',
               // Note: this 'delta' is the FAPI #type 'weight' element's property.
               '#delta' => $max,
               '#default_value' => $items[$delta]->_weight ?: $delta,
               '#weight' => 100,
-            );
+            ];
           }
 
           // Access for the top element is set to FALSE only when the paragraph
@@ -1353,13 +1357,13 @@ class ParagraphsWidget extends WidgetBase {
 
         // We name the element '_weight' to avoid clashing with elements
         // defined by widget.
-        $element['_weight'] = array(
+        $element['_weight'] = [
           '#type' => 'hidden',
           '#default_value' => $child_delta,
           '#attributes' => [
             'class' => ['paragraphs-dragdrop__weight'],
-          ]
-        );
+          ],
+        ];
 
         $element['_path'] = [
           '#type' => 'hidden',
@@ -1368,14 +1372,14 @@ class ParagraphsWidget extends WidgetBase {
           '#default_value' => $child_path,
           '#attributes' => [
             'class' => ['paragraphs-dragdrop__path'],
-          ]
+          ],
         ];
 
         $summary_options = [];
 
         $element['#prefix'] = '<li class="paragraphs-dragdrop__item" data-paragraphs-dragdrop-bundle="' . $child_paragraph->bundle() . '"><a href="#" class="paragraphs-dragdrop__handle"><span class="paragraphs-dragdrop__icon"></span></a>';
         $element['#suffix'] = '</li>';
-        $child_array_parents = array_merge($array_parents,  [$child_field_name, $child_delta]);
+        $child_array_parents = array_merge($array_parents, [$child_field_name, $child_delta]);
 
         if ($child_elements = $this->buildNestedParagraphsFoDragDrop($form_state, $child_paragraph, $child_array_parents)) {
           $element['dragdrop'] = $child_elements;
@@ -1407,7 +1411,7 @@ class ParagraphsWidget extends WidgetBase {
    * Add 'add more' button, if not working with a programmed form.
    *
    * @return array
-   *    The form element array.
+   *   The form element array.
    */
   protected function buildAddActions() {
     if (count($this->getAccessibleOptions()) === 0) {
@@ -1521,7 +1525,7 @@ class ParagraphsWidget extends WidgetBase {
    *
    * @param array $form
    *   Form array.
-   * @param FormStateInterface $form_state
+   * @param \Drupal\Core\Form\FormStateInterface $form_state
    *   Form state object.
    * @param int $position
    *   Position of triggering element.
@@ -1856,6 +1860,9 @@ class ParagraphsWidget extends WidgetBase {
     $form_state->setRebuild();
   }
 
+  /**
+   *
+   */
   public static function paragraphsItemSubmit(array $form, FormStateInterface $form_state) {
     $submit = ParagraphsWidget::getSubmitElementInfo($form, $form_state, ParagraphsWidget::ACTION_POSITION_ACTIONS);
 
@@ -1876,6 +1883,9 @@ class ParagraphsWidget extends WidgetBase {
     $form_state->setRebuild();
   }
 
+  /**
+   *
+   */
   public static function itemAjax(array $form, FormStateInterface $form_state) {
     $submit = ParagraphsWidget::getSubmitElementInfo($form, $form_state, ParagraphsWidget::ACTION_POSITION_ACTIONS);
 
@@ -1913,7 +1923,6 @@ class ParagraphsWidget extends WidgetBase {
     $form_state->setRebuild();
   }
 
-
   /**
    * Reorder paragraphs.
    *
@@ -1928,7 +1937,7 @@ class ParagraphsWidget extends WidgetBase {
     $complete_field_storage = NestedArray::getValue(
       $form_state->getStorage(), [
         'field_storage',
-        '#parents'
+        '#parents',
       ]
     );
     $new_field_storage = $complete_field_storage;
@@ -1974,7 +1983,7 @@ class ParagraphsWidget extends WidgetBase {
               '#fields',
               $field_name,
               'paragraphs',
-              $delta
+              $delta,
             ]
           );
           $path = explode('][', $item_values['_path']);
@@ -1991,7 +2000,7 @@ class ParagraphsWidget extends WidgetBase {
               '#fields',
               $new_field_name,
               'paragraphs',
-              $item_values['_weight']
+              $item_values['_weight'],
             ]
           );
           $key_exists = NULL;
@@ -2023,7 +2032,7 @@ class ParagraphsWidget extends WidgetBase {
             // it to an empty array in case all paragraphs have been moved away
             // from it.
             foreach (array_keys($item_values['dragdrop']) as $sub_field_name) {
-              $new_widget_state_keys = array_merge($parents, [$field_name, $item_values['_weight'] ,'subform', '#fields', $sub_field_name]);
+              $new_widget_state_keys = array_merge($parents, [$field_name, $item_values['_weight'], 'subform', '#fields', $sub_field_name]);
               if (!NestedArray::getValue($new_field_storage, $new_widget_state_keys)) {
                 NestedArray::setValue($new_field_storage, $new_widget_state_keys, ['paragraphs' => []]);
               }
@@ -2190,7 +2199,6 @@ class ParagraphsWidget extends WidgetBase {
     return $element;
   }
 
-
   /**
    * Special handling to validate form elements with multiple values.
    *
@@ -2222,7 +2230,7 @@ class ParagraphsWidget extends WidgetBase {
     $element = NestedArray::getValue($form_state->getCompleteForm(), $widget_state['array_parents']);
 
     if (!empty($widget_state['dragdrop'])) {
-      $path = array_merge($form['#parents'], array($field_name));
+      $path = array_merge($form['#parents'], [$field_name]);
       static::reorderParagraphs($form_state, $path);
 
       // After re-ordering, get the updated widget state.
@@ -2328,7 +2336,7 @@ class ParagraphsWidget extends WidgetBase {
 
     // Remove buttons from header actions.
     $field_name = $this->fieldDefinition->getName();
-    $path = array_merge($form['#parents'], array($field_name));
+    $path = array_merge($form['#parents'], [$field_name]);
     $form_state_variables = $form_state->getValues();
     $key_exists = NULL;
     $values = NestedArray::getValue($form_state_variables, $path, $key_exists);
@@ -2539,7 +2547,7 @@ class ParagraphsWidget extends WidgetBase {
           '#limit_validation_errors' => [
             array_merge($this->fieldParents, [$field_name, 'dragdrop_mode']),
           ],
-          '#access' => $this->allowReferenceChanges()
+          '#access' => $this->allowReferenceChanges(),
         ]);
       }
     }
diff --git a/tests/modules/paragraphs_test/src/Plugin/paragraphs/Behavior/TestBoldTextBehavior.php b/tests/modules/paragraphs_test/src/Plugin/paragraphs/Behavior/TestBoldTextBehavior.php
index 73b8c7f..bc495c4 100644
--- a/tests/modules/paragraphs_test/src/Plugin/paragraphs/Behavior/TestBoldTextBehavior.php
+++ b/tests/modules/paragraphs_test/src/Plugin/paragraphs/Behavior/TestBoldTextBehavior.php
@@ -64,8 +64,8 @@ class TestBoldTextBehavior extends ParagraphsBehaviorBase {
     return [
       [
         'label' => $this->t('Bold'),
-        'value' => $bold_setting ? $this->t('Yes') : $this->t('No')
-      ]
+        'value' => $bold_setting ? $this->t('Yes') : $this->t('No'),
+      ],
     ];
   }
 
diff --git a/tests/modules/paragraphs_test/src/Plugin/paragraphs/Behavior/TestDummyBehavior.php b/tests/modules/paragraphs_test/src/Plugin/paragraphs/Behavior/TestDummyBehavior.php
index fbb36c5..49dd27a 100644
--- a/tests/modules/paragraphs_test/src/Plugin/paragraphs/Behavior/TestDummyBehavior.php
+++ b/tests/modules/paragraphs_test/src/Plugin/paragraphs/Behavior/TestDummyBehavior.php
@@ -34,4 +34,5 @@ class TestDummyBehavior extends ParagraphsBehaviorBase {
     // Used to test that returning NULL does not return an error.
     return NULL;
   }
+
 }
diff --git a/tests/modules/paragraphs_test/src/Plugin/paragraphs/Behavior/TestFieldsSelectionBehavior.php b/tests/modules/paragraphs_test/src/Plugin/paragraphs/Behavior/TestFieldsSelectionBehavior.php
index 38deb7b..bd7bf3e 100644
--- a/tests/modules/paragraphs_test/src/Plugin/paragraphs/Behavior/TestFieldsSelectionBehavior.php
+++ b/tests/modules/paragraphs_test/src/Plugin/paragraphs/Behavior/TestFieldsSelectionBehavior.php
@@ -1,6 +1,7 @@
 <?php
 
 namespace Drupal\paragraphs_test\Plugin\paragraphs\Behavior;
+
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\paragraphs\Entity\Paragraph;
diff --git a/tests/modules/paragraphs_test/src/Plugin/paragraphs/Behavior/TestTextColorBehavior.php b/tests/modules/paragraphs_test/src/Plugin/paragraphs/Behavior/TestTextColorBehavior.php
index 5966d8b..88500b8 100644
--- a/tests/modules/paragraphs_test/src/Plugin/paragraphs/Behavior/TestTextColorBehavior.php
+++ b/tests/modules/paragraphs_test/src/Plugin/paragraphs/Behavior/TestTextColorBehavior.php
@@ -100,8 +100,9 @@ class TestTextColorBehavior extends ParagraphsBehaviorBase {
     return [
       [
         'label' => $this->t('Text color'),
-        'value' => $text_color
-      ]
+        'value' => $text_color,
+      ],
     ];
   }
+
 }
diff --git a/tests/src/Functional/ParagraphsUninstallTest.php b/tests/src/Functional/ParagraphsUninstallTest.php
index 37e98bd..4bb7365 100644
--- a/tests/src/Functional/ParagraphsUninstallTest.php
+++ b/tests/src/Functional/ParagraphsUninstallTest.php
@@ -16,7 +16,7 @@ class ParagraphsUninstallTest extends BrowserTestBase {
    *
    * @var array
    */
-  public static $modules = array('paragraphs_demo');
+  public static $modules = ['paragraphs_demo'];
 
   /**
    * {@inheritdoc}
@@ -29,10 +29,10 @@ class ParagraphsUninstallTest extends BrowserTestBase {
   public function setUp() {
     parent::setUp();
 
-    $admin_user = $this->drupalCreateUser(array(
+    $admin_user = $this->drupalCreateUser([
       'administer paragraphs types',
       'administer modules',
-    ));
+    ]);
     $this->drupalLogin($admin_user);
   }
 
diff --git a/tests/src/Functional/ParagraphsWidgetButtonsTest.php b/tests/src/Functional/ParagraphsWidgetButtonsTest.php
index a3d2f54..0716dfd 100644
--- a/tests/src/Functional/ParagraphsWidgetButtonsTest.php
+++ b/tests/src/Functional/ParagraphsWidgetButtonsTest.php
@@ -386,7 +386,7 @@ class ParagraphsWidgetButtonsTest extends ParagraphsTestBase {
     // Check if the closed mode threshold summary is not visible.
     $this->assertSession()->pageTextNotContains('Closed mode threshold: 1');
 
-    // Create a text paragraph
+    // Create a text paragraph.
     $text_paragraph_1 = Paragraph::create([
       'type' => 'text_paragraph',
       'field_text' => [
@@ -524,14 +524,17 @@ class ParagraphsWidgetButtonsTest extends ParagraphsTestBase {
         $this->assertSession()->buttonNotExists($button_prefix . '_edit');
         $this->assertSession()->buttonExists($button_prefix . '_collapse');
         break;
+
       case 'closed':
         $this->assertSession()->buttonExists($button_prefix . '_edit');
         $this->assertSession()->buttonNotExists($button_prefix . '_collapse');
         break;
+
       case 'removed':
         $this->assertSession()->buttonNotExists($button_prefix . '_edit');
         $this->assertSession()->buttonNotExists($button_prefix . '_collapse');
         break;
+
       default:
         throw new \InvalidArgumentException('This function does not support "' . $mode . '" as an argument for "$mode" parameter');
     }
diff --git a/tests/src/Functional/WidgetLegacy/ParagraphsAccessTest.php b/tests/src/Functional/WidgetLegacy/ParagraphsAccessTest.php
index 082285b..58c594d 100644
--- a/tests/src/Functional/WidgetLegacy/ParagraphsAccessTest.php
+++ b/tests/src/Functional/WidgetLegacy/ParagraphsAccessTest.php
@@ -22,15 +22,15 @@ class ParagraphsAccessTest extends ParagraphsTestBase {
    *
    * @var array
    */
-  public static $modules = array(
+  public static $modules = [
     'content_translation',
     'image',
     'field',
     'field_ui',
     'block',
     'language',
-    'node'
-  );
+    'node',
+  ];
 
   /**
    * {@inheritdoc}
@@ -68,7 +68,7 @@ class ParagraphsAccessTest extends ParagraphsTestBase {
       'settings[paragraph][images][fields][field_images_demo]' => TRUE,
       'settings[paragraph][text_image][fields][field_image_demo]' => TRUE,
       'settings[paragraph][text_image][fields][field_text_demo]' => TRUE,
-      'settings[node][paragraphed_content_demo][settings][language][language_alterable]' => TRUE
+      'settings[node][paragraphed_content_demo][settings][language][language_alterable]' => TRUE,
     ];
     $this->drupalPostForm('admin/config/regional/content-language', $edit, t('Save configuration'));
 
@@ -100,9 +100,9 @@ class ParagraphsAccessTest extends ParagraphsTestBase {
     $role->save();
 
     // Set field_images from demo to private file storage.
-    $edit = array(
+    $edit = [
       'settings[uri_scheme]' => 'private',
-    );
+    ];
     $this->drupalPostForm('admin/structure/paragraphs_type/images/fields/paragraph.images.field_images_demo/storage', $edit, t('Save field settings'));
 
     // Set the form display to legacy.
@@ -129,18 +129,18 @@ class ParagraphsAccessTest extends ParagraphsTestBase {
     $file_path_2 = $this->container->get('file_system')
       ->realpath('temporary://privateImage2.jpg');
 
-    $edit = array(
+    $edit = [
       'title[0][value]' => 'Security test node',
       'files[field_paragraphs_demo_0_subform_field_images_demo_0][]' => $file_path,
-    );
+    ];
 
     $this->drupalPostForm(NULL, $edit, t('Upload'));
 
-    $edit = array(
+    $edit = [
       'files[field_paragraphs_demo_0_subform_field_images_demo_1][]' => $file_path_2,
-    );
+    ];
 
-    $this->drupalPostForm(NULL,  $edit, t('Preview'));
+    $this->drupalPostForm(NULL, $edit, t('Preview'));
     $image_style = ImageStyle::load('medium');
     $img1_url = $image_style->buildUrl('private://' . date('Y-m') . '/privateImage.jpg');
     $image_url = file_url_transform_relative($img1_url);
@@ -193,4 +193,5 @@ class ParagraphsAccessTest extends ParagraphsTestBase {
     $node = $this->getNodeByTitle('delete_permissions');
     $this->assertSession()->addressEquals('node/' . $node->id());
   }
+
 }
diff --git a/tests/src/Functional/WidgetLegacy/ParagraphsAddModesTest.php b/tests/src/Functional/WidgetLegacy/ParagraphsAddModesTest.php
index d4761b1..e08ad65 100644
--- a/tests/src/Functional/WidgetLegacy/ParagraphsAddModesTest.php
+++ b/tests/src/Functional/WidgetLegacy/ParagraphsAddModesTest.php
@@ -143,7 +143,7 @@ class ParagraphsAddModesTest extends ParagraphsTestBase {
       $this->assertEquals($button->getValue(), $options[$key]);
     }
     $this->assertEquals(count($buttons), count($options), 'The amount of select options matches with the given array');
-    $this->assertNotEquals($this->xpath('//*[@name="' . $paragraphs_field .'_add_more"]'), [], 'The add button is displayed');
+    $this->assertNotEquals($this->xpath('//*[@name="' . $paragraphs_field . '_add_more"]'), [], 'The add button is displayed');
   }
 
   /**
@@ -154,7 +154,7 @@ class ParagraphsAddModesTest extends ParagraphsTestBase {
     $this->loginAsAdmin([
       'administer content types',
       'administer node form display',
-      'edit any paragraphed_test content'
+      'edit any paragraphed_test content',
     ]);
 
     // Add a Paragraphed test content.
@@ -183,7 +183,7 @@ class ParagraphsAddModesTest extends ParagraphsTestBase {
     $this->drupalGet('node/add/paragraphed_test');
     $this->assertSession()->pageTextContains('No Paragraph added yet.');
 
-    // Check if default type is created only for new host
+    // Check if default type is created only for new host.
     $this->setDefaultParagraphType('paragraphed_test', 'paragraphs', 'paragraphs_settings_edit', 'text_image');
     $this->removeDefaultParagraphType('paragraphed_test');
     $edit = ['title[0][value]' => 'New Host'];
@@ -200,7 +200,7 @@ class ParagraphsAddModesTest extends ParagraphsTestBase {
     $this->loginAsAdmin([
       'administer content types',
       'administer node form display',
-      'edit any paragraphed_test content'
+      'edit any paragraphed_test content',
     ]);
 
     // Add a Paragraphed test content.
@@ -221,4 +221,5 @@ class ParagraphsAddModesTest extends ParagraphsTestBase {
     $this->drupalGet('node/add/paragraphed_test');
     $this->assertSession()->pageTextContains('No Paragraph added yet.');
   }
+
 }
diff --git a/tests/src/Functional/WidgetLegacy/ParagraphsAdministrationTest.php b/tests/src/Functional/WidgetLegacy/ParagraphsAdministrationTest.php
index c8a4c60..ce61311 100644
--- a/tests/src/Functional/WidgetLegacy/ParagraphsAdministrationTest.php
+++ b/tests/src/Functional/WidgetLegacy/ParagraphsAdministrationTest.php
@@ -16,11 +16,11 @@ class ParagraphsAdministrationTest extends ParagraphsTestBase {
    *
    * @var array
    */
-  public static $modules = array(
+  public static $modules = [
     'image',
     'file',
-    'views'
-  );
+    'views',
+  ];
 
   /**
    * {@inheritdoc}
@@ -28,8 +28,9 @@ class ParagraphsAdministrationTest extends ParagraphsTestBase {
   protected function setUp() {
     parent::setUp();
     // Create paragraphs content type.
-    $this->drupalCreateContentType(array('type' => 'paragraphs', 'name' => 'Paragraphs'));
+    $this->drupalCreateContentType(['type' => 'paragraphs', 'name' => 'Paragraphs']);
   }
+
   /**
    * Tests the revision of paragraphs.
    */
@@ -45,25 +46,25 @@ class ParagraphsAdministrationTest extends ParagraphsTestBase {
     // Create paragraphs type Headline + Block.
     $this->addParagraphsType('text');
     // Create field types for the text.
-    static::fieldUIAddNewField('admin/structure/paragraphs_type/text', 'text', 'Text', 'text', array(), array());
+    static::fieldUIAddNewField('admin/structure/paragraphs_type/text', 'text', 'Text', 'text', [], []);
     $this->assertSession()->pageTextContains('Saved Text configuration.');
 
     // Create an article with paragraphs field.
-    static::fieldUIAddNewField('admin/structure/types/manage/paragraphs', 'paragraphs', 'Paragraphs', 'entity_reference_revisions', array(
+    static::fieldUIAddNewField('admin/structure/types/manage/paragraphs', 'paragraphs', 'Paragraphs', 'entity_reference_revisions', [
       'settings[target_type]' => 'paragraph',
       'cardinality' => '-1',
-    ), array(
+    ], [
       'settings[handler_settings][target_bundles_drag_drop][text][enabled]' => TRUE,
-    ));
+    ]);
     // Configure article fields.
     $this->drupalGet('admin/structure/types/manage/paragraphs/fields');
     $this->clickLink(t('Manage form display'));
-    $this->drupalPostForm(NULL, array('fields[field_paragraphs][type]' => 'entity_reference_paragraphs'), t('Save'));
+    $this->drupalPostForm(NULL, ['fields[field_paragraphs][type]' => 'entity_reference_paragraphs'], t('Save'));
 
     // Create node with our paragraphs.
     $this->drupalGet('node/add/paragraphs');
-    $this->drupalPostForm(NULL, array(), 'field_paragraphs_text_add_more');
-    $this->drupalPostForm(NULL, array(), 'field_paragraphs_text_add_more');
+    $this->drupalPostForm(NULL, [], 'field_paragraphs_text_add_more');
+    $this->drupalPostForm(NULL, [], 'field_paragraphs_text_add_more');
     $edit = [
       'title[0][value]' => 'TEST TITEL',
       'field_paragraphs[0][subform][field_text][0][value]' => 'Test text 1',
@@ -121,7 +122,6 @@ class ParagraphsAdministrationTest extends ParagraphsTestBase {
     $this->assertSession()->pageTextContains('TEST TITEL');
   }
 
-
   /**
    * Tests the paragraph creation.
    */
@@ -162,18 +162,18 @@ class ParagraphsAdministrationTest extends ParagraphsTestBase {
     $this->drupalGet('admin/structure/paragraphs_type/text_image');
     $this->assertSession()->titleEquals('Edit text_image paragraph type | Drupal');
     // Create field types for text and image.
-    static::fieldUIAddNewField('admin/structure/paragraphs_type/text_image', 'text', 'Text', 'text_long', array(), array());
+    static::fieldUIAddNewField('admin/structure/paragraphs_type/text_image', 'text', 'Text', 'text_long', [], []);
     $this->assertSession()->pageTextContains('Saved Text configuration.');
-    static::fieldUIAddNewField('admin/structure/paragraphs_type/text_image', 'image', 'Image', 'image', array(), array('settings[alt_field_required]' => FALSE));
+    static::fieldUIAddNewField('admin/structure/paragraphs_type/text_image', 'image', 'Image', 'image', [], ['settings[alt_field_required]' => FALSE]);
     $this->assertSession()->pageTextContains('Saved Image configuration.');
 
     // Create paragraph type Nested test.
     $this->addParagraphsType('nested_test');
 
-    static::fieldUIAddNewField('admin/structure/paragraphs_type/nested_test', 'paragraphs', 'Paragraphs', 'entity_reference_revisions', array(
+    static::fieldUIAddNewField('admin/structure/paragraphs_type/nested_test', 'paragraphs', 'Paragraphs', 'entity_reference_revisions', [
       'settings[target_type]' => 'paragraph',
       'cardinality' => '-1',
-    ), array());
+    ], []);
 
     // Change the add more button to select mode.
     $this->clickLink(t('Manage form display'));
@@ -184,7 +184,7 @@ class ParagraphsAdministrationTest extends ParagraphsTestBase {
     // Create paragraph type image.
     $this->addParagraphsType('image');
     // Create field types for image.
-    static::fieldUIAddNewField('admin/structure/paragraphs_type/image', 'image_only', 'Image only', 'image', array(), array());
+    static::fieldUIAddNewField('admin/structure/paragraphs_type/image', 'image_only', 'Image only', 'image', [], []);
     $this->assertSession()->pageTextContains('Saved Image only configuration.');
 
     $this->drupalGet('admin/structure/paragraphs_type');
@@ -206,17 +206,17 @@ class ParagraphsAdministrationTest extends ParagraphsTestBase {
     $field_name = 'field_paragraphs';
 
     // Click on the widget settings button to open the widget settings form.
-    $this->drupalPostForm(NULL, array(), $field_name . "_settings_edit");
+    $this->drupalPostForm(NULL, [], $field_name . "_settings_edit");
 
     // Enable setting.
-    $edit = array('fields[' . $field_name . '][settings_edit_form][settings][add_mode]' => 'button');
+    $edit = ['fields[' . $field_name . '][settings_edit_form][settings][add_mode]' => 'button'];
     $this->drupalPostForm(NULL, $edit, t('Save'));
 
     // Check if the setting is stored.
     $this->drupalGet('admin/structure/types/manage/article/form-display');
     $this->assertSession()->pageTextContains('Add mode: Buttons', 'Checking the settings value.');
 
-    $this->drupalPostForm(NULL, array(), $field_name . "_settings_edit");
+    $this->drupalPostForm(NULL, [], $field_name . "_settings_edit");
     // Assert the 'Buttons' option is selected.
     $add_mode_option = $this->assertSession()->optionExists('edit-fields-field-paragraphs-settings-edit-form-settings-add-mode', 'button');
     $this->assertTrue($add_mode_option->hasAttribute('selected'), 'Updated value correctly.');
@@ -227,20 +227,20 @@ class ParagraphsAdministrationTest extends ParagraphsTestBase {
     // Checking changes on article.
     $this->assertSession()->responseContains('<div class="paragraphs-dropbutton-wrapper"><input', 'Updated value in article.');
 
-    $this->drupalPostForm(NULL, array(), 'field_paragraphs_text_image_add_more');
-    $this->drupalPostForm(NULL, array(), 'field_paragraphs_text_image_add_more');
+    $this->drupalPostForm(NULL, [], 'field_paragraphs_text_image_add_more');
+    $this->drupalPostForm(NULL, [], 'field_paragraphs_text_image_add_more');
 
     // Upload some images.
     $files = $this->getTestFiles('image');
     $file_system = \Drupal::service('file_system');
 
-    $edit = array(
+    $edit = [
       'title[0][value]' => 'Test article',
       'field_paragraphs[0][subform][field_text][0][value]' => 'Test text 1',
       'files[field_paragraphs_0_subform_field_image_0]' => $file_system->realpath($files[0]->uri),
       'field_paragraphs[1][subform][field_text][0][value]' => 'Test text 2',
       'files[field_paragraphs_1_subform_field_image_0]' => $file_system->realpath($files[1]->uri),
-    );
+    ];
     $this->drupalPostForm(NULL, $edit, t('Save'));
     $this->assertSession()->pageTextContains('article Test article has been created.');
 
@@ -262,13 +262,13 @@ class ParagraphsAdministrationTest extends ParagraphsTestBase {
     // Test for closed setting.
     $this->drupalGet('admin/structure/types/manage/article/form-display');
     // Click on the widget settings button to open the widget settings form.
-    $this->drupalPostForm(NULL, array(), "field_paragraphs_settings_edit");
+    $this->drupalPostForm(NULL, [], "field_paragraphs_settings_edit");
     // Enable setting.
-    $edit = array('fields[field_paragraphs][settings_edit_form][settings][edit_mode]' => 'closed');
+    $edit = ['fields[field_paragraphs][settings_edit_form][settings][edit_mode]' => 'closed'];
     $this->drupalPostForm(NULL, $edit, t('Save'));
     // Check if the setting is stored.
     $this->assertSession()->pageTextContains('Edit mode: Closed', 'Checking the settings value.');
-    $this->drupalPostForm(NULL, array(), "field_paragraphs_settings_edit");
+    $this->drupalPostForm(NULL, [], "field_paragraphs_settings_edit");
     // Assert the 'Closed' option is selected.
     $edit_mode_option = $this->assertSession()->optionExists('edit-fields-field-paragraphs-settings-edit-form-settings-edit-mode', 'closed');
     $this->assertTrue($edit_mode_option->hasAttribute('selected'), 'Updated value correctly.');
@@ -281,8 +281,8 @@ class ParagraphsAdministrationTest extends ParagraphsTestBase {
 
     // Test for preview option.
     $this->drupalGet('admin/structure/types/manage/article/form-display');
-    $this->drupalPostForm(NULL, array(), "field_paragraphs_settings_edit");
-    $edit = array('fields[field_paragraphs][settings_edit_form][settings][edit_mode]' => 'preview');
+    $this->drupalPostForm(NULL, [], "field_paragraphs_settings_edit");
+    $edit = ['fields[field_paragraphs][settings_edit_form][settings][edit_mode]' => 'preview'];
     $this->drupalPostForm(NULL, $edit, t('Save'));
     $this->assertSession()->pageTextContains('Edit mode: Preview', 'Checking the settings value.');
     $this->drupalGet('node/1/edit');
@@ -294,12 +294,12 @@ class ParagraphsAdministrationTest extends ParagraphsTestBase {
 
     // Test for open option.
     $this->drupalGet('admin/structure/types/manage/article/form-display');
-    $this->drupalPostForm(NULL, array(), "field_paragraphs_settings_edit");
+    $this->drupalPostForm(NULL, [], "field_paragraphs_settings_edit");
     // Assert the 'Preview' option is selected.
     $edit_mode_option = $this->assertSession()->optionExists('edit-fields-field-paragraphs-settings-edit-form-settings-edit-mode', 'preview');
     $this->assertTrue($edit_mode_option->hasAttribute('selected'), 'Updated value correctly.');
     // Restore the value to Open for next test.
-    $edit = array('fields[field_paragraphs][settings_edit_form][settings][edit_mode]' => 'open');
+    $edit = ['fields[field_paragraphs][settings_edit_form][settings][edit_mode]' => 'open'];
     $this->drupalPostForm(NULL, $edit, t('Save'));
     $this->drupalGet('node/1/edit');
     // The textareas for paragraphs should be visible.
@@ -386,10 +386,10 @@ class ParagraphsAdministrationTest extends ParagraphsTestBase {
     $this->assertSession()->fieldExists('files[field_paragraphs_0_subform_field_paragraphs_0_subform_field_image_only_0]');
 
     // Add an image to the required field.
-    $edit = array(
+    $edit = [
       'title[0][value]' => 'test required',
       'files[field_paragraphs_0_subform_field_paragraphs_0_subform_field_image_only_0]' => $file_system->realpath($files[2]->uri),
-    );
+    ];
     $this->drupalPostForm(NULL, $edit, t('Save'));
     $edit = [
       'field_paragraphs[0][subform][field_paragraphs][0][subform][field_image_only][0][alt]' => 'Alternative_text',
@@ -420,11 +420,11 @@ class ParagraphsAdministrationTest extends ParagraphsTestBase {
     static::fieldUIAddExistingField('admin/structure/paragraphs_type/nested_double_test', 'field_paragraphs', 'paragraphs_1');
     $this->clickLink(t('Manage form display'));
     $this->drupalPostForm(NULL, [], 'Save');
-    //$this->drupalPostForm(NULL, array('fields[field_paragraphs][type]' => 'entity_reference_revisions_entity_view'), t('Save'));
-    static::fieldUIAddNewField('admin/structure/paragraphs_type/nested_double_test', 'paragraphs_2', 'paragraphs_2', 'entity_reference_revisions', array(
+    // $this->drupalPostForm(NULL, array('fields[field_paragraphs][type]' => 'entity_reference_revisions_entity_view'), t('Save'));
+    static::fieldUIAddNewField('admin/structure/paragraphs_type/nested_double_test', 'paragraphs_2', 'paragraphs_2', 'entity_reference_revisions', [
       'settings[target_type]' => 'paragraph',
       'cardinality' => '-1',
-    ), array());
+    ], []);
     $this->clickLink(t('Manage form display'));
     $this->drupalPostForm(NULL, [], 'Save');
     $this->drupalPostForm('node/add/article', [], 'field_paragraphs_nested_test_add_more');
@@ -433,9 +433,9 @@ class ParagraphsAdministrationTest extends ParagraphsTestBase {
     ];
     $this->drupalPostForm(NULL, $edit, 'field_paragraphs_0_subform_field_paragraphs_add_more');
     $this->drupalPostForm(NULL, [], 'field_paragraphs_0_subform_field_paragraphs_0_subform_field_paragraphs_image_add_more');
-    $edit = array(
+    $edit = [
       'title[0][value]' => 'Nested twins',
-    );
+    ];
     $this->drupalPostForm(NULL, $edit, t('Save'));
     $this->assertSession()->pageTextContains('Nested twins has been created.');
     $this->assertSession()->pageTextNotContains('This entity (paragraph: ) cannot be referenced.');
@@ -453,10 +453,10 @@ class ParagraphsAdministrationTest extends ParagraphsTestBase {
     $this->addParagraphsType('node_test');
 
     // Add a required node reference field.
-    static::fieldUIAddNewField('admin/structure/paragraphs_type/node_test', 'entity_reference', 'Entity reference', 'entity_reference', array(
+    static::fieldUIAddNewField('admin/structure/paragraphs_type/node_test', 'entity_reference', 'Entity reference', 'entity_reference', [
       'settings[target_type]' => 'node',
-      'cardinality' => '-1'
-    ), [
+      'cardinality' => '-1',
+    ], [
       'settings[handler_settings][target_bundles][article]' => TRUE,
       'required' => TRUE,
     ]);
diff --git a/tests/src/Functional/WidgetLegacy/ParagraphsConfigTest.php b/tests/src/Functional/WidgetLegacy/ParagraphsConfigTest.php
index 4607cf6..f687fa4 100644
--- a/tests/src/Functional/WidgetLegacy/ParagraphsConfigTest.php
+++ b/tests/src/Functional/WidgetLegacy/ParagraphsConfigTest.php
@@ -17,9 +17,9 @@ class ParagraphsConfigTest extends ParagraphsTestBase {
    *
    * @var array
    */
-  public static $modules = array(
+  public static $modules = [
     'content_translation',
-  );
+  ];
 
   /**
    * Tests adding paragraphs with no translation enabled.
@@ -60,7 +60,7 @@ class ParagraphsConfigTest extends ParagraphsTestBase {
     $this->drupalGet('node/' . $node->id() . '/translations');
     $this->clickLink(t('Add'));
     // Save the translation.
-   $this->drupalPostForm(NULL, [], t('Save (this translation)'));
+    $this->drupalPostForm(NULL, [], t('Save (this translation)'));
     $this->assertSession()->pageTextContains('paragraphed_test paragraphed_title has been updated.');
   }
 
diff --git a/tests/src/Functional/WidgetLegacy/ParagraphsContactTest.php b/tests/src/Functional/WidgetLegacy/ParagraphsContactTest.php
index 51c7afe..502a796 100644
--- a/tests/src/Functional/WidgetLegacy/ParagraphsContactTest.php
+++ b/tests/src/Functional/WidgetLegacy/ParagraphsContactTest.php
@@ -16,9 +16,9 @@ class ParagraphsContactTest extends ParagraphsTestBase {
    *
    * @var array
    */
-  public static $modules = array(
+  public static $modules = [
     'contact',
-  );
+  ];
 
   /**
    * Tests adding paragraphs in contact forms.
@@ -26,7 +26,7 @@ class ParagraphsContactTest extends ParagraphsTestBase {
   public function testContactForm() {
     $this->loginAsAdmin([
       'administer contact forms',
-      'access site-wide contact form'
+      'access site-wide contact form',
     ]);
     // Add a paragraph type.
     $this->addParagraphsType('paragraphs_contact');
@@ -46,4 +46,5 @@ class ParagraphsContactTest extends ParagraphsTestBase {
     $this->drupalPostForm(NULL, [], 'paragraphs_0_remove');
     $this->assertSession()->pageTextContains('Deleted Paragraph: paragraphs_contact');
   }
+
 }
diff --git a/tests/src/Functional/WidgetLegacy/ParagraphsEntityTranslationWithNonTranslatableParagraphs.php b/tests/src/Functional/WidgetLegacy/ParagraphsEntityTranslationWithNonTranslatableParagraphs.php
index a52039e..c945c1b 100644
--- a/tests/src/Functional/WidgetLegacy/ParagraphsEntityTranslationWithNonTranslatableParagraphs.php
+++ b/tests/src/Functional/WidgetLegacy/ParagraphsEntityTranslationWithNonTranslatableParagraphs.php
@@ -29,30 +29,30 @@ class ParagraphsEntityTranslationWithNonTranslatableParagraphs extends Paragraph
     $this->drupalLogin($this->admin_user);
 
     // Add a languages.
-    $edit = array(
+    $edit = [
       'predefined_langcode' => 'de',
-    );
+    ];
     $this->drupalPostForm('admin/config/regional/language/add', $edit, t('Add language'));
-    $edit = array(
+    $edit = [
       'predefined_langcode' => 'fr',
-    );
+    ];
     $this->drupalPostForm('admin/config/regional/language/add', $edit, t('Add language'));
 
     // Create article content type with a paragraphs field.
     $this->addParagraphedContentType('article', 'field_paragraphs');
     $this->drupalGet('admin/structure/types/manage/article');
     // Make content type translatable.
-    $edit = array(
+    $edit = [
       'language_configuration[content_translation]' => TRUE,
-    );
+    ];
     $this->drupalPostForm('admin/structure/types/manage/article', $edit, t('Save content type'));
     $this->drupalGet('admin/structure/types/manage/article');
 
     // Ensue the paragraphs field itself isn't translatable - this would be a
     // currently not supported configuration otherwise.
-    $edit = array(
+    $edit = [
       'translatable' => FALSE,
-    );
+    ];
     $this->drupalPostForm('admin/structure/types/manage/article/fields/node.article.field_paragraphs', $edit, t('Save settings'));
 
     // Add Paragraphs type.
@@ -87,9 +87,9 @@ class ParagraphsEntityTranslationWithNonTranslatableParagraphs extends Paragraph
     // Make sure that the original paragraph text is displayed.
     $this->assertSession()->pageTextContains('Title English');
 
-    $edit = array(
+    $edit = [
       'title[0][value]' => 'Title French',
-    );
+    ];
     $this->drupalPostForm(NULL, $edit, t('Save (this translation)'));
     $this->assertSession()->pageTextContains('article Title French has been updated.');
 
@@ -99,9 +99,9 @@ class ParagraphsEntityTranslationWithNonTranslatableParagraphs extends Paragraph
     // Make sure that the original paragraph text is displayed.
     $this->assertSession()->pageTextContains('Title English');
 
-    $edit = array(
+    $edit = [
       'title[0][value]' => 'Title German',
-    );
+    ];
     $this->drupalPostForm(NULL, $edit, t('Save (this translation)'));
     $this->assertSession()->pageTextContains('article Title German has been updated.');
   }
diff --git a/tests/src/Functional/WidgetLegacy/ParagraphsFieldGroupTest.php b/tests/src/Functional/WidgetLegacy/ParagraphsFieldGroupTest.php
index d66887e..94f03c8 100644
--- a/tests/src/Functional/WidgetLegacy/ParagraphsFieldGroupTest.php
+++ b/tests/src/Functional/WidgetLegacy/ParagraphsFieldGroupTest.php
@@ -38,18 +38,18 @@ class ParagraphsFieldGroupTest extends ParagraphsTestBase {
     $edit = [
       'group_formatter' => 'fieldset',
       'label' => 'paragraph_field_group_title',
-      'group_name' => 'field'
+      'group_name' => 'field',
     ];
     $this->drupalPostForm('admin/structure/paragraphs_type/' . $paragraph_type . '/form-display/add-group', $edit, t('Save and continue'));
     $edit = [
-      'format_settings[label]' => 'field_group'
+      'format_settings[label]' => 'field_group',
     ];
     $this->drupalPostForm(NULL, $edit, t('Create group'));
 
     // Put the text field into the field group.
     $edit = [
       'fields[group_field][region]' => 'content',
-      'fields[field_text][parent]' => 'group_field'
+      'fields[field_text][parent]' => 'group_field',
     ];
     $this->drupalPostForm('admin/structure/paragraphs_type/' . $paragraph_type . '/form-display', $edit, t('Save'));
 
@@ -68,4 +68,5 @@ class ParagraphsFieldGroupTest extends ParagraphsTestBase {
     ];
     $this->drupalPostForm(NULL, $edit, t('Save'));
   }
+
 }
diff --git a/tests/src/Functional/WidgetLegacy/ParagraphsInlineEntityFormTest.php b/tests/src/Functional/WidgetLegacy/ParagraphsInlineEntityFormTest.php
index 50742c5..c56538a 100644
--- a/tests/src/Functional/WidgetLegacy/ParagraphsInlineEntityFormTest.php
+++ b/tests/src/Functional/WidgetLegacy/ParagraphsInlineEntityFormTest.php
@@ -37,7 +37,7 @@ class ParagraphsInlineEntityFormTest extends ParagraphsTestBase {
       'cardinality_number' => 1,
     ], [
       'required' => TRUE,
-      'settings[handler_settings][target_bundles][article]' => TRUE
+      'settings[handler_settings][target_bundles][article]' => TRUE,
     ]);
 
     // Enable IEF simple widget.
@@ -89,7 +89,7 @@ class ParagraphsInlineEntityFormTest extends ParagraphsTestBase {
       'cardinality_number' => '1',
     ], [
       'required' => TRUE,
-      'settings[handler_settings][target_bundles][article]' => TRUE
+      'settings[handler_settings][target_bundles][article]' => TRUE,
     ]);
 
     // Set cardinality explicit to -1.
diff --git a/tests/src/Functional/WidgetLegacy/ParagraphsLegacyContentModerationTranslationsTest.php b/tests/src/Functional/WidgetLegacy/ParagraphsLegacyContentModerationTranslationsTest.php
index e36f415..8875383 100644
--- a/tests/src/Functional/WidgetLegacy/ParagraphsLegacyContentModerationTranslationsTest.php
+++ b/tests/src/Functional/WidgetLegacy/ParagraphsLegacyContentModerationTranslationsTest.php
@@ -28,7 +28,7 @@ class ParagraphsLegacyContentModerationTranslationsTest extends ParagraphsTestBa
     'block',
     'link',
     'content_moderation',
-    'content_translation'
+    'content_translation',
   ];
 
   /**
@@ -452,4 +452,5 @@ class ParagraphsLegacyContentModerationTranslationsTest extends ParagraphsTestBa
     $assert_session->pageTextContains('DE Second level first text');
     $assert_session->pageTextContains('DE Second level second text');
   }
+
 }
diff --git a/tests/src/Functional/WidgetLegacy/ParagraphsPreviewTest.php b/tests/src/Functional/WidgetLegacy/ParagraphsPreviewTest.php
index ec84bc5..d42e8b8 100644
--- a/tests/src/Functional/WidgetLegacy/ParagraphsPreviewTest.php
+++ b/tests/src/Functional/WidgetLegacy/ParagraphsPreviewTest.php
@@ -14,9 +14,9 @@ class ParagraphsPreviewTest extends ParagraphsTestBase {
    *
    * @var array
    */
-  public static $modules = array(
+  public static $modules = [
     'image',
-  );
+  ];
 
   /**
    * Tests the revision of paragraphs.
@@ -34,14 +34,14 @@ class ParagraphsPreviewTest extends ParagraphsTestBase {
     // Create paragraph type Headline + Block.
     $this->addParagraphsType('text');
     // Create field types for the text.
-    $this->fieldUIAddNewField('admin/structure/paragraphs_type/text', 'text', 'Text', 'text', array(), array());
+    $this->fieldUIAddNewField('admin/structure/paragraphs_type/text', 'text', 'Text', 'text', [], []);
     $this->assertSession()->pageTextContains('Saved Text configuration.');
 
     $test_text_1 = 'dummy_preview_text_1';
     $test_text_2 = 'dummy_preview_text_2';
     // Create node with two paragraphs.
     $this->drupalGet('node/add/article');
-    $this->drupalPostForm(NULL, array(), 'field_paragraphs_text_add_more');
+    $this->drupalPostForm(NULL, [], 'field_paragraphs_text_add_more');
     // Set the value of the paragraphs.
     $edit = [
       'title[0][value]' => 'Page_title',
@@ -67,7 +67,7 @@ class ParagraphsPreviewTest extends ParagraphsTestBase {
     $this->drupalPostForm(NULL, $edit, t('Save'));
 
     $this->clickLink('Edit');
-    $this->drupalPostForm(NULL, array(), 'field_paragraphs_text_add_more');
+    $this->drupalPostForm(NULL, [], 'field_paragraphs_text_add_more');
     $edit = [
       'field_paragraphs[1][subform][field_text][0][value]' => $test_text_2,
     ];
diff --git a/tests/src/Functional/WidgetLegacy/ParagraphsSummaryFormatterTest.php b/tests/src/Functional/WidgetLegacy/ParagraphsSummaryFormatterTest.php
index d0cc1b3..06e0acf 100644
--- a/tests/src/Functional/WidgetLegacy/ParagraphsSummaryFormatterTest.php
+++ b/tests/src/Functional/WidgetLegacy/ParagraphsSummaryFormatterTest.php
@@ -34,7 +34,7 @@ class ParagraphsSummaryFormatterTest extends ParagraphsTestBase {
     static::fieldUIAddNewField('admin/structure/paragraphs_type/' . $paragraph_type, 'text', 'Text', 'text_long', [], []);
     static::fieldUIAddNewField('admin/structure/paragraphs_type/' . $title_paragraphs_type, 'title', 'Title', 'string', [], []);
 
-    // Add a user Paragraph Type
+    // Add a user Paragraph Type.
     $paragraph_type = 'user_paragraph';
     $this->addParagraphsType($paragraph_type);
     static::fieldUIAddNewField('admin/structure/paragraphs_type/' . $paragraph_type, 'user', 'User', 'entity_reference', ['settings[target_type]' => 'user'], []);
diff --git a/tests/src/Functional/WidgetLegacy/ParagraphsTestBase.php b/tests/src/Functional/WidgetLegacy/ParagraphsTestBase.php
index 3e2096e..a1b5895 100644
--- a/tests/src/Functional/WidgetLegacy/ParagraphsTestBase.php
+++ b/tests/src/Functional/WidgetLegacy/ParagraphsTestBase.php
@@ -81,7 +81,7 @@ abstract class ParagraphsTestBase extends BrowserTestBase {
    * @return object
    *   Newly created and logged in user object.
    */
-  function loginAsAdmin($additional_permissions = [], $reset_permissions = FALSE) {
+  public function loginAsAdmin($additional_permissions = [], $reset_permissions = FALSE) {
     $permissions = $this->admin_permissions;
 
     if ($reset_permissions) {
@@ -110,7 +110,7 @@ abstract class ParagraphsTestBase extends BrowserTestBase {
     $form_display = EntityFormDisplay::load('node.' . $content_type . '.default')
       ->setComponent($paragraphs_field, [
         'type' => 'entity_reference_paragraphs',
-        'settings' => ['add_mode' => $mode]
+        'settings' => ['add_mode' => $mode],
       ]);
     $form_display->save();
   }
diff --git a/tests/src/Functional/WidgetLegacy/ParagraphsTranslationTest.php b/tests/src/Functional/WidgetLegacy/ParagraphsTranslationTest.php
index 409f6c1..e56cf8a 100644
--- a/tests/src/Functional/WidgetLegacy/ParagraphsTranslationTest.php
+++ b/tests/src/Functional/WidgetLegacy/ParagraphsTranslationTest.php
@@ -22,7 +22,7 @@ class ParagraphsTranslationTest extends ParagraphsTestBase {
    *
    * @var array
    */
-  public static $modules = array(
+  public static $modules = [
     'content_translation',
     'link',
     'image',
@@ -30,8 +30,8 @@ class ParagraphsTranslationTest extends ParagraphsTestBase {
     'field_ui',
     'block',
     'language',
-    'node'
-  );
+    'node',
+  ];
 
   /**
    * A user with admin permissions.
@@ -82,7 +82,7 @@ class ParagraphsTranslationTest extends ParagraphsTestBase {
       'settings[paragraph][images][fields][field_images_demo]' => TRUE,
       'settings[paragraph][text_image][fields][field_image_demo]' => TRUE,
       'settings[paragraph][text_image][fields][field_text_demo]' => TRUE,
-      'settings[node][paragraphed_content_demo][settings][language][language_alterable]' => TRUE
+      'settings[node][paragraphed_content_demo][settings][language][language_alterable]' => TRUE,
     ];
     $this->drupalPostForm('admin/config/regional/content-language', $edit, t('Save configuration'));
     // Set the form display to legacy.
@@ -120,10 +120,10 @@ class ParagraphsTranslationTest extends ParagraphsTestBase {
 
     // Check if the publish/unpublish option works.
     $this->drupalGet('admin/structure/paragraphs_type/text_image/form-display');
-    $edit = array(
+    $edit = [
       'fields[status][type]' => 'boolean_checkbox',
       'fields[status][region]' => 'content',
-    );
+    ];
 
     $this->drupalPostForm(NULL, $edit, t('Save'));
     $this->drupalGet('node/add/paragraphed_content_demo');
@@ -141,7 +141,7 @@ class ParagraphsTranslationTest extends ParagraphsTestBase {
     $this->drupalPostForm(NULL, NULL, 'field_paragraphs_demo_1_subform_field_paragraphs_demo_text_add_more');
     $edit = [
       'field_paragraphs_demo[0][subform][status][value]' => FALSE,
-      'field_paragraphs_demo[1][subform][field_paragraphs_demo][0][subform][field_text_demo][0][value]' => 'Dummy text'
+      'field_paragraphs_demo[1][subform][field_paragraphs_demo][0][subform][field_text_demo][0][value]' => 'Dummy text',
     ];
     $this->drupalPostForm(NULL, $edit + ['status[value]' => FALSE], t('Save'));
     $this->assertSession()->pageTextNotContains(t('Example published and unpublished'));
@@ -168,10 +168,10 @@ class ParagraphsTranslationTest extends ParagraphsTestBase {
     // Add paragraphed content.
     $this->drupalGet('node/add/paragraphed_content_demo');
     $this->drupalPostForm(NULL, NULL, t('Add text_image'));
-    $edit = array(
+    $edit = [
       'title[0][value]' => 'Title in english',
       'field_paragraphs_demo[0][subform][field_text_demo][0][value]' => 'Text in english',
-    );
+    ];
     // The button to remove a paragraph is present.
     $this->assertSession()->responseContains(t('Remove'));
     $this->drupalPostForm(NULL, $edit, t('Save'));
@@ -190,12 +190,12 @@ class ParagraphsTranslationTest extends ParagraphsTestBase {
     // Make sure that the original paragraph text is displayed.
     $this->assertSession()->pageTextContains('Text in english');
 
-    $edit = array(
+    $edit = [
       'title[0][value]' => 'Title in french',
       'field_paragraphs_demo[0][subform][field_text_demo][0][value]' => 'Text in french',
       'revision' => TRUE,
       'revision_log[0][value]' => 'french 1',
-    );
+    ];
     $this->drupalPostForm(NULL, $edit, t('Save (this translation)'));
     $this->assertSession()->pageTextContains('paragraphed_content_demo Title in french has been updated.');
 
@@ -215,12 +215,12 @@ class ParagraphsTranslationTest extends ParagraphsTestBase {
     $this->clickLink(t('Edit'));
     $this->assertSession()->pageTextContains('Title in french');
     $this->assertSession()->pageTextContains('Text in french');
-    $edit = array(
+    $edit = [
       'title[0][value]' => 'Title Change in french',
       'field_paragraphs_demo[0][subform][field_text_demo][0][value]' => 'New text in french',
       'revision' => TRUE,
       'revision_log[0][value]' => 'french 2',
-    );
+    ];
     $this->drupalPostForm(NULL, $edit, t('Save (this translation)'));
     $this->assertSession()->pageTextContains('Title Change in french');
     $this->assertSession()->pageTextContains('New text in french');
@@ -246,9 +246,9 @@ class ParagraphsTranslationTest extends ParagraphsTestBase {
     $this->assertSession()->responseNotContains('The content has either been modified by another user, or you have already submitted modifications');
     $this->assertSession()->pageTextContains('Text in french');
 
-    //Add paragraphed content with untranslatable language
+    // Add paragraphed content with untranslatable language.
     $this->drupalGet('node/add/paragraphed_content_demo');
-    $edit = array('langcode[0][value]' => LanguageInterface::LANGCODE_NOT_SPECIFIED);
+    $edit = ['langcode[0][value]' => LanguageInterface::LANGCODE_NOT_SPECIFIED];
     $this->drupalPostForm(NULL, $edit, t('Add text_image'));
     $this->assertSession()->statusCodeEquals(200);
 
@@ -429,7 +429,6 @@ class ParagraphsTranslationTest extends ParagraphsTestBase {
    */
   public function testParagraphTranslationMultilingual() {
     // Case 1: original node langcode in EN, translate in FR, change to DE.
-
     // Add 'Images' paragraph and check the paragraphs buttons are displayed.
     $this->drupalGet('node/add/paragraphed_content_demo');
     $this->drupalPostForm(NULL, NULL, t('Add images'));
@@ -528,7 +527,6 @@ class ParagraphsTranslationTest extends ParagraphsTestBase {
 
     // Case 2: original node langcode in DE, change site langcode to DE, change
     // node langcode to EN.
-
     // Change the site langcode to french.
     $this->drupalPostForm('admin/config/regional/language', [
       'site_default_language' => 'fr',
@@ -606,7 +604,6 @@ class ParagraphsTranslationTest extends ParagraphsTestBase {
   public function testParagraphsMultilingualWorkflow() {
     // Case 1: Check the paragraphs buttons after changing the NODE language
     // (original node langcode in GERMAN, default site langcode in english).
-
     // Create a node and check that the node langcode is 'english'.
     $this->drupalGet('node/add/paragraphed_content_demo');
     $langcode_option = $this->assertSession()->optionExists('edit-langcode-0-value', 'en');
@@ -659,7 +656,6 @@ class ParagraphsTranslationTest extends ParagraphsTestBase {
 
     // Case 2: Check the paragraphs buttons after changing the NODE language
     // (original node langcode in ENGLISH, default site langcode in english).
-
     // Create another node.
     $this->drupalGet('node/add/paragraphed_content_demo');
     // Check that the node langcode is 'english' and add a 'Nested Paragraph'.
@@ -720,7 +716,6 @@ class ParagraphsTranslationTest extends ParagraphsTestBase {
     $this->assertParagraphsLangcode($node2->id());
 
     // Case 3: Check the paragraphs buttons after changing the SITE language.
-
     // Change the site langcode to german.
     $edit = [
       'site_default_language' => 'de',
@@ -871,4 +866,5 @@ class ParagraphsTranslationTest extends ParagraphsTestBase {
       }
     }
   }
+
 }
diff --git a/tests/src/Functional/WidgetLegacy/ParagraphsUiTest.php b/tests/src/Functional/WidgetLegacy/ParagraphsUiTest.php
index 417bf49..a9dbaf2 100644
--- a/tests/src/Functional/WidgetLegacy/ParagraphsUiTest.php
+++ b/tests/src/Functional/WidgetLegacy/ParagraphsUiTest.php
@@ -23,7 +23,7 @@ class ParagraphsUiTest extends ParagraphsTestBase {
     'field_ui',
     'block',
     'language',
-    'node'
+    'node',
   ];
 
   /**
@@ -62,7 +62,7 @@ class ParagraphsUiTest extends ParagraphsTestBase {
       'settings[paragraph][images][fields][field_images_demo]' => TRUE,
       'settings[paragraph][text_image][fields][field_image_demo]' => TRUE,
       'settings[paragraph][text_image][fields][field_text_demo]' => TRUE,
-      'settings[node][paragraphed_content_demo][settings][language][language_alterable]' => TRUE
+      'settings[node][paragraphed_content_demo][settings][language][language_alterable]' => TRUE,
     ];
     $this->drupalPostForm('admin/config/regional/content-language', $edit, t('Save configuration'));
   }
diff --git a/tests/src/Functional/WidgetStable/ParagraphsAccessTest.php b/tests/src/Functional/WidgetStable/ParagraphsAccessTest.php
index 8b18c85..22a2c93 100644
--- a/tests/src/Functional/WidgetStable/ParagraphsAccessTest.php
+++ b/tests/src/Functional/WidgetStable/ParagraphsAccessTest.php
@@ -24,15 +24,15 @@ class ParagraphsAccessTest extends ParagraphsTestBase {
    *
    * @var array
    */
-  public static $modules = array(
+  public static $modules = [
     'content_translation',
     'image',
     'field',
     'field_ui',
     'block',
     'language',
-    'node'
-  );
+    'node',
+  ];
 
   /**
    * {@inheritdoc}
@@ -70,7 +70,7 @@ class ParagraphsAccessTest extends ParagraphsTestBase {
       'settings[paragraph][images][fields][field_images_demo]' => TRUE,
       'settings[paragraph][text_image][fields][field_image_demo]' => TRUE,
       'settings[paragraph][text_image][fields][field_text_demo]' => TRUE,
-      'settings[node][paragraphed_content_demo][settings][language][language_alterable]' => TRUE
+      'settings[node][paragraphed_content_demo][settings][language][language_alterable]' => TRUE,
     ];
     $this->drupalPostForm('admin/config/regional/content-language', $edit, t('Save configuration'));
 
@@ -102,9 +102,9 @@ class ParagraphsAccessTest extends ParagraphsTestBase {
     $role->save();
 
     // Set field_images from demo to private file storage.
-    $edit = array(
+    $edit = [
       'settings[uri_scheme]' => 'private',
-    );
+    ];
     $this->drupalPostForm('admin/structure/paragraphs_type/images/fields/paragraph.images.field_images_demo/storage', $edit, t('Save field settings'));
 
     // Use the stable widget.
@@ -130,19 +130,19 @@ class ParagraphsAccessTest extends ParagraphsTestBase {
     $file_path_2 = $this->container->get('file_system')
       ->realpath('temporary://privateImage2.jpg');
 
-    $edit = array(
+    $edit = [
       'title[0][value]' => 'Security test node',
       'files[field_paragraphs_demo_0_subform_field_images_demo_0][]' => $file_path,
-    );
+    ];
 
     $this->drupalPostForm(NULL, $edit, t('Upload'));
 
-    $edit = array(
+    $edit = [
       'files[field_paragraphs_demo_0_subform_field_images_demo_1][]' => $file_path_2,
-    );
+    ];
 
     $this->drupalPostForm(NULL, $edit, t('Upload'));
-    $this->drupalPostForm(NULL,  [], t('Preview'));
+    $this->drupalPostForm(NULL, [], t('Preview'));
     $image_style = ImageStyle::load('medium');
     $img1_url = $image_style->buildUrl('private://' . date('Y-m') . '/privateImage.jpg');
     $image_url = file_url_transform_relative($img1_url);
@@ -205,7 +205,7 @@ class ParagraphsAccessTest extends ParagraphsTestBase {
     $this->loginAsAdmin($permissions);
     $edit = [
       'fields[status][region]' => 'content',
-      'fields[status][type]' => 'boolean_checkbox'
+      'fields[status][type]' => 'boolean_checkbox',
     ];
     $this->drupalPostForm('admin/structure/paragraphs_type/text/form-display', $edit, 'Save');
     $this->drupalGet('node/add/paragraphed_content_demo');
@@ -214,7 +214,7 @@ class ParagraphsAccessTest extends ParagraphsTestBase {
     $edit = [
       'title[0][value]' => 'unpublished_permissions',
       'field_paragraphs_demo[0][subform][field_text_demo][0][value]' => 'recognizable_test',
-      'field_paragraphs_demo[0][subform][status][value]' => FALSE
+      'field_paragraphs_demo[0][subform][status][value]' => FALSE,
     ];
     $this->drupalPostForm(NULL, $edit, t('Save'));
     $this->assertSession()->pageTextContains('recognizable_test');
@@ -269,7 +269,7 @@ class ParagraphsAccessTest extends ParagraphsTestBase {
     $permissions = [
       'create paragraphed_content_demo content',
       'edit any paragraphed_content_demo content',
-      $filtered_html_format->getPermissionName()
+      $filtered_html_format->getPermissionName(),
     ];
     $this->loginAsAdmin($permissions);
     // Create a node with a Text Paragraph using the filtered html format.
diff --git a/tests/src/Functional/WidgetStable/ParagraphsAddModesTest.php b/tests/src/Functional/WidgetStable/ParagraphsAddModesTest.php
index 637eb85..3105a6e 100644
--- a/tests/src/Functional/WidgetStable/ParagraphsAddModesTest.php
+++ b/tests/src/Functional/WidgetStable/ParagraphsAddModesTest.php
@@ -142,7 +142,7 @@ class ParagraphsAddModesTest extends ParagraphsTestBase {
       $this->assertEquals($button->getValue(), $options[$key]);
     }
     $this->assertEquals(count($buttons), count($options), 'The amount of select options matches with the given array');
-    $this->assertNotEquals($this->xpath('//*[@name="' . $paragraphs_field .'_add_more"]'), [], 'The add button is displayed');
+    $this->assertNotEquals($this->xpath('//*[@name="' . $paragraphs_field . '_add_more"]'), [], 'The add button is displayed');
   }
 
   /**
@@ -153,7 +153,7 @@ class ParagraphsAddModesTest extends ParagraphsTestBase {
     $this->loginAsAdmin([
       'administer content types',
       'administer node form display',
-      'edit any paragraphed_test content'
+      'edit any paragraphed_test content',
     ]);
 
     // Add a Paragraphed test content.
@@ -185,7 +185,7 @@ class ParagraphsAddModesTest extends ParagraphsTestBase {
     $this->assertEquals($elements, []);
     $this->assertNotEquals($header, []);
 
-    // Check if default type is created only for new host
+    // Check if default type is created only for new host.
     $this->setDefaultParagraphType('paragraphed_test', 'paragraphs', 'paragraphs_settings_edit', 'text_image');
     $this->removeDefaultParagraphType('paragraphed_test');
     $edit = ['title[0][value]' => 'New Host'];
@@ -205,7 +205,7 @@ class ParagraphsAddModesTest extends ParagraphsTestBase {
     $this->loginAsAdmin([
       'administer content types',
       'administer node form display',
-      'edit any paragraphed_test content'
+      'edit any paragraphed_test content',
     ]);
 
     // Add a Paragraphed test content.
@@ -232,4 +232,5 @@ class ParagraphsAddModesTest extends ParagraphsTestBase {
     $this->assertEquals($elements, []);
     $this->assertNotEquals($header, []);
   }
+
 }
diff --git a/tests/src/Functional/WidgetStable/ParagraphsAdministrationTest.php b/tests/src/Functional/WidgetStable/ParagraphsAdministrationTest.php
index 57d2dbf..d87bd5a 100644
--- a/tests/src/Functional/WidgetStable/ParagraphsAdministrationTest.php
+++ b/tests/src/Functional/WidgetStable/ParagraphsAdministrationTest.php
@@ -19,11 +19,11 @@ class ParagraphsAdministrationTest extends ParagraphsTestBase {
    *
    * @var array
    */
-  public static $modules = array(
+  public static $modules = [
     'image',
     'file',
-    'views'
-  );
+    'views',
+  ];
 
   /**
    * {@inheritdoc}
@@ -31,7 +31,7 @@ class ParagraphsAdministrationTest extends ParagraphsTestBase {
   protected function setUp() {
     parent::setUp();
     // Create paragraphs content type.
-    $this->drupalCreateContentType(array('type' => 'paragraphs', 'name' => 'Paragraphs'));
+    $this->drupalCreateContentType(['type' => 'paragraphs', 'name' => 'Paragraphs']);
   }
 
   /**
@@ -49,25 +49,25 @@ class ParagraphsAdministrationTest extends ParagraphsTestBase {
     // Create paragraphs type Headline + Block.
     $this->addParagraphsType('text');
     // Create field types for the text.
-    static::fieldUIAddNewField('admin/structure/paragraphs_type/text', 'text', 'Text', 'text', array(), array());
+    static::fieldUIAddNewField('admin/structure/paragraphs_type/text', 'text', 'Text', 'text', [], []);
     $this->assertSession()->pageTextContains('Saved Text configuration.');
 
     // Create an article with paragraphs field.
-    static::fieldUIAddNewField('admin/structure/types/manage/paragraphs', 'paragraphs', 'Paragraphs', 'entity_reference_revisions', array(
+    static::fieldUIAddNewField('admin/structure/types/manage/paragraphs', 'paragraphs', 'Paragraphs', 'entity_reference_revisions', [
       'settings[target_type]' => 'paragraph',
       'cardinality' => '-1',
-    ), array(
+    ], [
       'settings[handler_settings][target_bundles_drag_drop][text][enabled]' => TRUE,
-    ));
+    ]);
     // Configure article fields.
     $this->drupalGet('admin/structure/types/manage/paragraphs/fields');
     $this->clickLink(t('Manage form display'));
-    $this->drupalPostForm(NULL, array('fields[field_paragraphs][type]' => 'paragraphs'), t('Save'));
+    $this->drupalPostForm(NULL, ['fields[field_paragraphs][type]' => 'paragraphs'], t('Save'));
 
     // Create node with our paragraphs.
     $this->drupalGet('node/add/paragraphs');
-    $this->drupalPostForm(NULL, array(), 'field_paragraphs_text_add_more');
-    $this->drupalPostForm(NULL, array(), 'field_paragraphs_text_add_more');
+    $this->drupalPostForm(NULL, [], 'field_paragraphs_text_add_more');
+    $this->drupalPostForm(NULL, [], 'field_paragraphs_text_add_more');
     $edit = [
       'title[0][value]' => 'TEST TITEL',
       'field_paragraphs[0][subform][field_text][0][value]' => 'Test text 1',
@@ -124,7 +124,6 @@ class ParagraphsAdministrationTest extends ParagraphsTestBase {
     $this->assertSession()->pageTextContains('TEST TITEL');
   }
 
-
   /**
    * Tests the paragraph creation.
    */
@@ -165,18 +164,18 @@ class ParagraphsAdministrationTest extends ParagraphsTestBase {
     $this->drupalGet('admin/structure/paragraphs_type/text_image');
     $this->assertSession()->titleEquals('Edit text_image paragraph type | Drupal');
     // Create field types for text and image.
-    static::fieldUIAddNewField('admin/structure/paragraphs_type/text_image', 'text', 'Text', 'text_long', array(), array());
+    static::fieldUIAddNewField('admin/structure/paragraphs_type/text_image', 'text', 'Text', 'text_long', [], []);
     $this->assertSession()->pageTextContains('Saved Text configuration.');
-    static::fieldUIAddNewField('admin/structure/paragraphs_type/text_image', 'image', 'Image', 'image', array(), array('settings[alt_field_required]' => FALSE));
+    static::fieldUIAddNewField('admin/structure/paragraphs_type/text_image', 'image', 'Image', 'image', [], ['settings[alt_field_required]' => FALSE]);
     $this->assertSession()->pageTextContains('Saved Image configuration.');
 
     // Create paragraph type Nested test.
     $this->addParagraphsType('nested_test');
 
-    static::fieldUIAddNewField('admin/structure/paragraphs_type/nested_test', 'paragraphs', 'Paragraphs', 'entity_reference_revisions', array(
+    static::fieldUIAddNewField('admin/structure/paragraphs_type/nested_test', 'paragraphs', 'Paragraphs', 'entity_reference_revisions', [
       'settings[target_type]' => 'paragraph',
       'cardinality' => '-1',
-    ), array());
+    ], []);
 
     // Change the add more button to select mode.
     $this->clickLink(t('Manage form display'));
@@ -187,7 +186,7 @@ class ParagraphsAdministrationTest extends ParagraphsTestBase {
     // Create paragraph type image.
     $this->addParagraphsType('image');
     // Create field types for image.
-    static::fieldUIAddNewField('admin/structure/paragraphs_type/image', 'image_only', 'Image only', 'image', array(), array());
+    static::fieldUIAddNewField('admin/structure/paragraphs_type/image', 'image_only', 'Image only', 'image', [], []);
     $this->assertSession()->pageTextContains('Saved Image only configuration.');
 
     $this->drupalGet('admin/structure/paragraphs_type');
@@ -212,34 +211,34 @@ class ParagraphsAdministrationTest extends ParagraphsTestBase {
     $this->drupalPostForm(NULL, ['fields[field_paragraphs][type]' => 'paragraphs'], $field_name . "_settings_edit");
 
     // Enable setting.
-    $edit = array('fields[' . $field_name . '][settings_edit_form][settings][add_mode]' => 'button');
+    $edit = ['fields[' . $field_name . '][settings_edit_form][settings][add_mode]' => 'button'];
     $this->drupalPostForm(NULL, $edit, t('Save'));
 
     // Check if the setting is stored.
     $this->drupalGet('admin/structure/types/manage/article/form-display');
     $this->assertSession()->pageTextContains('Add mode: Buttons', 'Checking the settings value.');
 
-    $this->drupalPostForm(NULL, array(), $field_name . "_settings_edit");
+    $this->drupalPostForm(NULL, [], $field_name . "_settings_edit");
     // Assert the 'Buttons' option is selected.
     $add_mode_option = $this->assertSession()->optionExists('edit-fields-field-paragraphs-settings-edit-form-settings-add-mode', 'button');
     $this->assertTrue($add_mode_option->hasAttribute('selected'), 'Updated value is correct!.');
 
     // Add two Text + Image paragraphs in article.
     $this->drupalGet('node/add/article');
-    $this->drupalPostForm(NULL, array(), 'field_paragraphs_text_image_add_more');
-    $this->drupalPostForm(NULL, array(), 'field_paragraphs_text_image_add_more');
+    $this->drupalPostForm(NULL, [], 'field_paragraphs_text_image_add_more');
+    $this->drupalPostForm(NULL, [], 'field_paragraphs_text_image_add_more');
 
     // Upload some images.
     $files = $this->getTestFiles('image');
     $file_system = \Drupal::service('file_system');
 
-    $edit = array(
+    $edit = [
       'title[0][value]' => 'Test article',
       'field_paragraphs[0][subform][field_text][0][value]' => 'Test text 1',
       'files[field_paragraphs_0_subform_field_image_0]' => $file_system->realpath($files[0]->uri),
       'field_paragraphs[1][subform][field_text][0][value]' => 'Test text 2',
       'files[field_paragraphs_1_subform_field_image_0]' => $file_system->realpath($files[1]->uri),
-    );
+    ];
     $this->drupalPostForm(NULL, $edit, t('Save'));
     $this->assertSession()->pageTextContains('article Test article has been created.');
 
@@ -261,13 +260,13 @@ class ParagraphsAdministrationTest extends ParagraphsTestBase {
     // Test for closed setting.
     $this->drupalGet('admin/structure/types/manage/article/form-display');
     // Click on the widget settings button to open the widget settings form.
-    $this->drupalPostForm(NULL, array(), "field_paragraphs_settings_edit");
+    $this->drupalPostForm(NULL, [], "field_paragraphs_settings_edit");
     // Enable setting.
-    $edit = array('fields[field_paragraphs][settings_edit_form][settings][edit_mode]' => 'closed');
+    $edit = ['fields[field_paragraphs][settings_edit_form][settings][edit_mode]' => 'closed'];
     $this->drupalPostForm(NULL, $edit, t('Save'));
     // Check if the setting is stored.
     $this->assertSession()->pageTextContains('Edit mode: Closed', 'Checking the settings value.');
-    $this->drupalPostForm(NULL, array(), "field_paragraphs_settings_edit");
+    $this->drupalPostForm(NULL, [], "field_paragraphs_settings_edit");
     // Assert the 'Closed' option is selected.
     $edit_mode_option = $this->assertSession()->optionExists('edit-fields-field-paragraphs-settings-edit-form-settings-edit-mode', 'closed');
     $this->assertTrue($edit_mode_option->hasAttribute('selected'), 'Updated value correctly.');
@@ -280,7 +279,7 @@ class ParagraphsAdministrationTest extends ParagraphsTestBase {
 
     // Test for preview option.
     $this->drupalGet('admin/structure/types/manage/article/form-display');
-    $this->drupalPostForm(NULL, array(), "field_paragraphs_settings_edit");
+    $this->drupalPostForm(NULL, [], "field_paragraphs_settings_edit");
     $edit = [
       'fields[field_paragraphs][settings_edit_form][settings][edit_mode]' => 'closed',
       'fields[field_paragraphs][settings_edit_form][settings][closed_mode]' => 'preview',
@@ -297,14 +296,14 @@ class ParagraphsAdministrationTest extends ParagraphsTestBase {
 
     // Test for open option.
     $this->drupalGet('admin/structure/types/manage/article/form-display');
-    $this->drupalPostForm(NULL, array(), "field_paragraphs_settings_edit");
+    $this->drupalPostForm(NULL, [], "field_paragraphs_settings_edit");
     // Assert the "Closed" and "Preview" options are selected.
     $edit_mode_option = $this->assertSession()->optionExists('edit-fields-field-paragraphs-settings-edit-form-settings-edit-mode', 'closed');
     $this->assertTrue($edit_mode_option->hasAttribute('selected'), 'Correctly updated the "Edit mode" value.');
     $closed_mode_option = $this->assertSession()->optionExists('edit-fields-field-paragraphs-settings-edit-form-settings-closed-mode', 'preview');
-    $this->assertTrue($closed_mode_option->hasAttribute('selected'),'Correctly updated the "Closed mode" value.');
+    $this->assertTrue($closed_mode_option->hasAttribute('selected'), 'Correctly updated the "Closed mode" value.');
     // Restore the value to Open for next test.
-    $edit = array('fields[field_paragraphs][settings_edit_form][settings][edit_mode]' => 'open');
+    $edit = ['fields[field_paragraphs][settings_edit_form][settings][edit_mode]' => 'open'];
     $this->drupalPostForm(NULL, $edit, t('Save'));
     $this->drupalGet('node/1/edit');
     // The textareas for paragraphs should be visible.
@@ -391,10 +390,10 @@ class ParagraphsAdministrationTest extends ParagraphsTestBase {
     $this->assertSession()->fieldExists('files[field_paragraphs_0_subform_field_paragraphs_0_subform_field_image_only_0]');
 
     // Add an image to the required field.
-    $edit = array(
+    $edit = [
       'title[0][value]' => 'test required',
       'files[field_paragraphs_0_subform_field_paragraphs_0_subform_field_image_only_0]' => $file_system->realpath($files[2]->uri),
-    );
+    ];
     $this->drupalPostForm(NULL, $edit, t('Save'));
     $edit = [
       'field_paragraphs[0][subform][field_paragraphs][0][subform][field_image_only][0][alt]' => 'Alternative_text',
@@ -425,11 +424,11 @@ class ParagraphsAdministrationTest extends ParagraphsTestBase {
     static::fieldUIAddExistingField('admin/structure/paragraphs_type/nested_double_test', 'field_paragraphs', 'paragraphs_1');
     $this->clickLink(t('Manage form display'));
     $this->drupalPostForm(NULL, [], 'Save');
-    //$this->drupalPostForm(NULL, array('fields[field_paragraphs][type]' => 'entity_reference_revisions_entity_view'), t('Save'));
-    static::fieldUIAddNewField('admin/structure/paragraphs_type/nested_double_test', 'paragraphs_2', 'paragraphs_2', 'entity_reference_revisions', array(
+    // $this->drupalPostForm(NULL, array('fields[field_paragraphs][type]' => 'entity_reference_revisions_entity_view'), t('Save'));
+    static::fieldUIAddNewField('admin/structure/paragraphs_type/nested_double_test', 'paragraphs_2', 'paragraphs_2', 'entity_reference_revisions', [
       'settings[target_type]' => 'paragraph',
       'cardinality' => '-1',
-    ), array());
+    ], []);
     $this->clickLink(t('Manage form display'));
     $this->drupalPostForm(NULL, [], 'Save');
     $this->drupalPostForm('node/add/article', [], 'field_paragraphs_nested_test_add_more');
@@ -438,9 +437,9 @@ class ParagraphsAdministrationTest extends ParagraphsTestBase {
     ];
     $this->drupalPostForm(NULL, $edit, 'field_paragraphs_0_subform_field_paragraphs_add_more');
     $this->drupalPostForm(NULL, [], 'field_paragraphs_0_subform_field_paragraphs_0_subform_field_paragraphs_image_add_more');
-    $edit = array(
+    $edit = [
       'title[0][value]' => 'Nested twins',
-    );
+    ];
     $this->drupalPostForm(NULL, $edit, t('Save'));
     $this->assertSession()->pageTextContains('Nested twins has been created.');
     $this->assertSession()->pageTextNotContains('This entity (paragraph: ) cannot be referenced.');
@@ -461,10 +460,10 @@ class ParagraphsAdministrationTest extends ParagraphsTestBase {
     $this->addParagraphsType('node_test');
 
     // Add a required node reference field.
-    static::fieldUIAddNewField('admin/structure/paragraphs_type/node_test', 'entity_reference', 'Entity reference', 'entity_reference', array(
+    static::fieldUIAddNewField('admin/structure/paragraphs_type/node_test', 'entity_reference', 'Entity reference', 'entity_reference', [
       'settings[target_type]' => 'node',
-      'cardinality' => '-1'
-    ), [
+      'cardinality' => '-1',
+    ], [
       'settings[handler_settings][target_bundles][article]' => TRUE,
       'required' => TRUE,
     ]);
@@ -485,10 +484,10 @@ class ParagraphsAdministrationTest extends ParagraphsTestBase {
 
     // Adding another required paragraph and deleting that again should not
     // validate closed paragraphs but trying to save the node should.
-    $this->drupalPostForm(NULL, array(), 'field_paragraphs_node_test_add_more');
+    $this->drupalPostForm(NULL, [], 'field_paragraphs_node_test_add_more');
     $this->assertSession()->pageTextNotContains('The referenced entity (node: ' . $node->id() . ') does not exist.');
     $this->assertSession()->fieldExists('field_paragraphs[1][subform][field_entity_reference][0][target_id]');
-    $this->drupalPostForm(NULL, array(), 'field_paragraphs_1_remove');
+    $this->drupalPostForm(NULL, [], 'field_paragraphs_1_remove');
     $this->assertSession()->pageTextNotContains('The referenced entity (node: ' . $node->id() . ') does not exist.');
     $this->assertSession()->fieldNotExists('field_paragraphs[1][subform][field_entity_reference][0][target_id]');
     $this->drupalPostForm(NULL, [], t('Save'));
diff --git a/tests/src/Functional/WidgetStable/ParagraphsAlterByTypeTest.php b/tests/src/Functional/WidgetStable/ParagraphsAlterByTypeTest.php
index e2d243c..79ed209 100644
--- a/tests/src/Functional/WidgetStable/ParagraphsAlterByTypeTest.php
+++ b/tests/src/Functional/WidgetStable/ParagraphsAlterByTypeTest.php
@@ -18,9 +18,8 @@ class ParagraphsAlterByTypeTest extends ParagraphsTestBase {
     'paragraphs_test',
   ];
 
-
   /**
-   * Test widget alter based on paragraph type
+   * Test widget alter based on paragraph type.
    */
   public function testAlterBasedOnType() {
     $this->addParagraphedContentType('paragraphed_test', 'field_paragraphs', 'entity_reference_paragraphs');
@@ -38,4 +37,5 @@ class ParagraphsAlterByTypeTest extends ParagraphsTestBase {
     $this->drupalGet('node/add/paragraphed_test');
     $this->assertSession()->pageTextContains('Altered title');
   }
+
 }
diff --git a/tests/src/Functional/WidgetStable/ParagraphsBehaviorsTest.php b/tests/src/Functional/WidgetStable/ParagraphsBehaviorsTest.php
index be630b7..ec2e638 100644
--- a/tests/src/Functional/WidgetStable/ParagraphsBehaviorsTest.php
+++ b/tests/src/Functional/WidgetStable/ParagraphsBehaviorsTest.php
@@ -332,4 +332,5 @@ class ParagraphsBehaviorsTest extends ParagraphsTestBase {
     $this->assertSession()->fieldValueEquals('field_paragraphs[0][behavior_plugins][test_text_color][text_color]', 'red');
 
   }
+
 }
diff --git a/tests/src/Functional/WidgetStable/ParagraphsConfigTest.php b/tests/src/Functional/WidgetStable/ParagraphsConfigTest.php
index e0644d1..e4cefa0 100644
--- a/tests/src/Functional/WidgetStable/ParagraphsConfigTest.php
+++ b/tests/src/Functional/WidgetStable/ParagraphsConfigTest.php
@@ -17,9 +17,9 @@ class ParagraphsConfigTest extends ParagraphsTestBase {
    *
    * @var array
    */
-  public static $modules = array(
+  public static $modules = [
     'content_translation',
-  );
+  ];
 
   /**
    * Tests adding paragraphs with no translation enabled.
@@ -33,7 +33,6 @@ class ParagraphsConfigTest extends ParagraphsTestBase {
     ]);
 
     // Add a paragraphed content type.
-
     $this->addParagraphedContentType('paragraphed_test');
     $this->addParagraphsType('paragraph_type_test');
     $this->addParagraphsType('text');
@@ -181,7 +180,7 @@ class ParagraphsConfigTest extends ParagraphsTestBase {
     $this->assertSession()->pageTextContains('Add paragraph_type_test');
     $this->assertSession()->pageTextNotContains('Add text');
     $edit = [
-      'title[0][value]' => 'Testing included types'
+      'title[0][value]' => 'Testing included types',
     ];
     $this->drupalPostForm(NULL, $edit, t('Save'));
     $this->assertSession()->pageTextContains('paragraphed_test Testing included types has been created.');
@@ -200,7 +199,7 @@ class ParagraphsConfigTest extends ParagraphsTestBase {
     $this->assertNotNull($button_paragraphed_type_test);
     $this->assertNotNull($button_text);
     $edit = [
-      'title[0][value]' => 'Testing all excluded types'
+      'title[0][value]' => 'Testing all excluded types',
     ];
     $this->drupalPostForm(NULL, $edit, t('Save'));
     $this->assertSession()->pageTextContains('paragraphed_test Testing all excluded types has been created.');
@@ -228,7 +227,7 @@ class ParagraphsConfigTest extends ParagraphsTestBase {
     $this->assertSession()->pageTextContains('Add paragraph_type_test');
     $this->assertSession()->pageTextNotContains('Add text');
     $edit = [
-      'title[0][value]' => 'Testing excluded types'
+      'title[0][value]' => 'Testing excluded types',
     ];
     $this->drupalPostForm(NULL, $edit, t('Save'));
     $this->assertSession()->pageTextContains('paragraphed_test Testing excluded types has been created.');
@@ -244,9 +243,10 @@ class ParagraphsConfigTest extends ParagraphsTestBase {
     $this->drupalGet('node/add/paragraphed_test');
     $this->assertSession()->pageTextContains('You are not allowed to add any of the Paragraph types.');
     $edit = [
-      'title[0][value]' => 'Testing all excluded types'
+      'title[0][value]' => 'Testing all excluded types',
     ];
     $this->drupalPostForm(NULL, $edit, t('Save'));
     $this->assertSession()->pageTextContains('paragraphed_test Testing all excluded types has been created.');
   }
+
 }
diff --git a/tests/src/Functional/WidgetStable/ParagraphsContactTest.php b/tests/src/Functional/WidgetStable/ParagraphsContactTest.php
index 1ddfef4..3b203f1 100644
--- a/tests/src/Functional/WidgetStable/ParagraphsContactTest.php
+++ b/tests/src/Functional/WidgetStable/ParagraphsContactTest.php
@@ -16,9 +16,9 @@ class ParagraphsContactTest extends ParagraphsTestBase {
    *
    * @var array
    */
-  public static $modules = array(
+  public static $modules = [
     'contact',
-  );
+  ];
 
   /**
    * Tests adding paragraphs in contact forms.
@@ -26,7 +26,7 @@ class ParagraphsContactTest extends ParagraphsTestBase {
   public function testContactForm() {
     $this->loginAsAdmin([
       'administer contact forms',
-      'access site-wide contact form'
+      'access site-wide contact form',
     ]);
     // Add a paragraph type.
     $this->addParagraphsType('paragraphs_contact');
@@ -48,4 +48,5 @@ class ParagraphsContactTest extends ParagraphsTestBase {
     $this->assertEquals($elements, []);
     $this->assertNotEquals($header, []);
   }
+
 }
diff --git a/tests/src/Functional/WidgetStable/ParagraphsContentModerationTranslationsTest.php b/tests/src/Functional/WidgetStable/ParagraphsContentModerationTranslationsTest.php
index 5f052e7..21f000c 100644
--- a/tests/src/Functional/WidgetStable/ParagraphsContentModerationTranslationsTest.php
+++ b/tests/src/Functional/WidgetStable/ParagraphsContentModerationTranslationsTest.php
@@ -28,7 +28,7 @@ class ParagraphsContentModerationTranslationsTest extends ParagraphsTestBase {
     'block',
     'link',
     'content_moderation',
-    'content_translation'
+    'content_translation',
   ];
 
   /**
@@ -465,4 +465,5 @@ class ParagraphsContentModerationTranslationsTest extends ParagraphsTestBase {
     $assert_session->pageTextContains('DE Second level first text');
     $assert_session->pageTextContains('DE Second level second text');
   }
+
 }
diff --git a/tests/src/Functional/WidgetStable/ParagraphsDragAndDropModeTest.php b/tests/src/Functional/WidgetStable/ParagraphsDragAndDropModeTest.php
index 99bb299..43732a3 100644
--- a/tests/src/Functional/WidgetStable/ParagraphsDragAndDropModeTest.php
+++ b/tests/src/Functional/WidgetStable/ParagraphsDragAndDropModeTest.php
@@ -19,7 +19,7 @@ class ParagraphsDragAndDropModeTest extends ParagraphsTestBase {
   public static $modules = [
     'node',
     'paragraphs',
-    'field'
+    'field',
   ];
 
   /**
@@ -54,7 +54,7 @@ class ParagraphsDragAndDropModeTest extends ParagraphsTestBase {
 
     $admin = $this->drupalCreateUser([
       'create paragraphed_test content',
-      'edit any paragraphed_test content'
+      'edit any paragraphed_test content',
     ]);
     $this->drupalLogin($admin);
 
@@ -384,7 +384,7 @@ class ParagraphsDragAndDropModeTest extends ParagraphsTestBase {
     $this->assertEquals($text_paragraph_3->get('parent_type')->value, 'paragraph');
 
     // Assert the new parent of the container.
-    $paragraph_3 =Paragraph::load($paragraph_3->id());
+    $paragraph_3 = Paragraph::load($paragraph_3->id());
     $this->assertEquals($paragraph_3->get('parent_id')->value, $paragraph_4->id());
     $this->assertEquals($paragraph_3->get('parent_type')->value, 'paragraph');
   }
diff --git a/tests/src/Functional/WidgetStable/ParagraphsEditModesTest.php b/tests/src/Functional/WidgetStable/ParagraphsEditModesTest.php
index ebef8f2..897abf5 100644
--- a/tests/src/Functional/WidgetStable/ParagraphsEditModesTest.php
+++ b/tests/src/Functional/WidgetStable/ParagraphsEditModesTest.php
@@ -21,7 +21,7 @@ class ParagraphsEditModesTest extends ParagraphsTestBase {
     'block_field',
     'block_content',
     'link',
-    'field_ui'
+    'field_ui',
   ];
 
   /**
@@ -41,7 +41,7 @@ class ParagraphsEditModesTest extends ParagraphsTestBase {
     static::fieldUIAddNewField('admin/structure/paragraphs_type/' . $paragraph_type, 'text', 'Text', 'text_long', [], []);
     static::fieldUIAddNewField('admin/structure/paragraphs_type/' . $title_paragraphs_type, 'title', 'Title', 'string', [], []);
 
-    // Add a user Paragraph Type
+    // Add a user Paragraph Type.
     $paragraph_type = 'user_paragraph';
     $this->addParagraphsType($paragraph_type);
     static::fieldUIAddNewField('admin/structure/paragraphs_type/' . $paragraph_type, 'user', 'User', 'entity_reference', ['settings[target_type]' => 'user'], []);
@@ -178,13 +178,13 @@ class ParagraphsEditModesTest extends ParagraphsTestBase {
     // Allow the user to select if the paragraphs is published or not.
     $edit = [
       'fields[status][region]' => 'content',
-      'fields[status][type]' => 'boolean_checkbox'
+      'fields[status][type]' => 'boolean_checkbox',
     ];
     $this->drupalPostForm('admin/structure/paragraphs_type/' . $title_paragraphs_type . '/form-display', $edit, 'Save');
     $edit = [
       'fields[field_nested_content][type]' => 'paragraphs',
       'fields[status][region]' => 'content',
-      'fields[status][type]' => 'boolean_checkbox'
+      'fields[status][type]' => 'boolean_checkbox',
     ];
     $this->drupalPostForm('admin/structure/paragraphs_type/nested_paragraph/form-display', $edit, 'Save');
 
diff --git a/tests/src/Functional/WidgetStable/ParagraphsEntityTranslationWithNonTranslatableParagraphs.php b/tests/src/Functional/WidgetStable/ParagraphsEntityTranslationWithNonTranslatableParagraphs.php
index 6a1d161..f2457e3 100644
--- a/tests/src/Functional/WidgetStable/ParagraphsEntityTranslationWithNonTranslatableParagraphs.php
+++ b/tests/src/Functional/WidgetStable/ParagraphsEntityTranslationWithNonTranslatableParagraphs.php
@@ -29,30 +29,30 @@ class ParagraphsEntityTranslationWithNonTranslatableParagraphs extends Paragraph
     $this->drupalLogin($this->admin_user);
 
     // Add a languages.
-    $edit = array(
+    $edit = [
       'predefined_langcode' => 'de',
-    );
+    ];
     $this->drupalPostForm('admin/config/regional/language/add', $edit, t('Add language'));
-    $edit = array(
+    $edit = [
       'predefined_langcode' => 'fr',
-    );
+    ];
     $this->drupalPostForm('admin/config/regional/language/add', $edit, t('Add language'));
 
     // Create article content type with a paragraphs field.
     $this->addParagraphedContentType('article', 'field_paragraphs');
     $this->drupalGet('admin/structure/types/manage/article');
     // Make content type translatable.
-    $edit = array(
+    $edit = [
       'language_configuration[content_translation]' => TRUE,
-    );
+    ];
     $this->drupalPostForm('admin/structure/types/manage/article', $edit, t('Save content type'));
     $this->drupalGet('admin/structure/types/manage/article');
 
     // Ensue the paragraphs field itself isn't translatable - this would be a
     // currently not supported configuration otherwise.
-    $edit = array(
+    $edit = [
       'translatable' => FALSE,
-    );
+    ];
     $this->drupalPostForm('admin/structure/types/manage/article/fields/node.article.field_paragraphs', $edit, t('Save settings'));
 
     // Add Paragraphs type.
@@ -87,9 +87,9 @@ class ParagraphsEntityTranslationWithNonTranslatableParagraphs extends Paragraph
     // Make sure that the original paragraph text is displayed.
     $this->assertSession()->pageTextContains('Title English');
 
-    $edit = array(
+    $edit = [
       'title[0][value]' => 'Title French',
-    );
+    ];
     $this->drupalPostForm(NULL, $edit, t('Save (this translation)'));
     $this->assertSession()->pageTextContains('article Title French has been updated.');
 
@@ -99,9 +99,9 @@ class ParagraphsEntityTranslationWithNonTranslatableParagraphs extends Paragraph
     // Make sure that the original paragraph text is displayed.
     $this->assertSession()->pageTextContains('Title English');
 
-    $edit = array(
+    $edit = [
       'title[0][value]' => 'Title German',
-    );
+    ];
     $this->drupalPostForm(NULL, $edit, t('Save (this translation)'));
     $this->assertSession()->pageTextContains('article Title German has been updated.');
   }
diff --git a/tests/src/Functional/WidgetStable/ParagraphsFieldGroupTest.php b/tests/src/Functional/WidgetStable/ParagraphsFieldGroupTest.php
index 1757e01..cad656d 100644
--- a/tests/src/Functional/WidgetStable/ParagraphsFieldGroupTest.php
+++ b/tests/src/Functional/WidgetStable/ParagraphsFieldGroupTest.php
@@ -39,18 +39,18 @@ class ParagraphsFieldGroupTest extends ParagraphsTestBase {
     $edit = [
       'group_formatter' => 'fieldset',
       'label' => 'paragraph_field_group_title',
-      'group_name' => 'field'
+      'group_name' => 'field',
     ];
     $this->drupalPostForm('admin/structure/paragraphs_type/' . $paragraph_type . '/form-display/add-group', $edit, t('Save and continue'));
     $edit = [
-      'format_settings[label]' => 'field_group'
+      'format_settings[label]' => 'field_group',
     ];
     $this->drupalPostForm(NULL, $edit, t('Create group'));
 
     // Put the text field into the field group.
     $edit = [
       'fields[group_field][region]' => 'content',
-      'fields[field_text][parent]' => 'group_field'
+      'fields[field_text][parent]' => 'group_field',
     ];
     $this->drupalPostForm('admin/structure/paragraphs_type/' . $paragraph_type . '/form-display', $edit, t('Save'));
 
diff --git a/tests/src/Functional/WidgetStable/ParagraphsHeaderActionsTest.php b/tests/src/Functional/WidgetStable/ParagraphsHeaderActionsTest.php
index d003796..56cfc37 100644
--- a/tests/src/Functional/WidgetStable/ParagraphsHeaderActionsTest.php
+++ b/tests/src/Functional/WidgetStable/ParagraphsHeaderActionsTest.php
@@ -3,7 +3,6 @@
 namespace Drupal\Tests\paragraphs\Functional\WidgetStable;
 
 use Drupal\language\Entity\ConfigurableLanguage;
-use Symfony\Component\CssSelector\CssSelectorConverter;
 
 /**
  * Tests collapse all button.
@@ -17,9 +16,9 @@ class ParagraphsHeaderActionsTest extends ParagraphsTestBase {
    *
    * @var array
    */
-  public static $modules = array(
+  public static $modules = [
     'content_translation',
-  );
+  ];
 
   /**
    * Tests header actions.
@@ -311,7 +310,7 @@ class ParagraphsHeaderActionsTest extends ParagraphsTestBase {
   /**
    * Tests drag and drop button visibility while translating.
    */
-  function testHeaderActionsWhileTranslating() {
+  public function testHeaderActionsWhileTranslating() {
     // Display drag and drop in tests.
     $this->addParagraphedContentType('paragraphed_test');
     \Drupal::state()->set('paragraphs_test_dragdrop_force_show', TRUE);
diff --git a/tests/src/Functional/WidgetStable/ParagraphsInlineEntityFormTest.php b/tests/src/Functional/WidgetStable/ParagraphsInlineEntityFormTest.php
index df6b06e..8155966 100644
--- a/tests/src/Functional/WidgetStable/ParagraphsInlineEntityFormTest.php
+++ b/tests/src/Functional/WidgetStable/ParagraphsInlineEntityFormTest.php
@@ -41,7 +41,7 @@ class ParagraphsInlineEntityFormTest extends ParagraphsTestBase {
       'cardinality_number' => 1,
     ], [
       'required' => TRUE,
-      'settings[handler_settings][target_bundles][article]' => TRUE
+      'settings[handler_settings][target_bundles][article]' => TRUE,
     ]);
 
     // Enable IEF simple widget.
@@ -97,7 +97,7 @@ class ParagraphsInlineEntityFormTest extends ParagraphsTestBase {
       'cardinality_number' => '1',
     ], [
       'required' => TRUE,
-      'settings[handler_settings][target_bundles][article]' => TRUE
+      'settings[handler_settings][target_bundles][article]' => TRUE,
     ]);
 
     // Set cardinality explicit to -1.
@@ -139,7 +139,7 @@ class ParagraphsInlineEntityFormTest extends ParagraphsTestBase {
 
     // Set the values of second paragraph.
     $edit = [
-      'field_paragraphs[1][subform][field_article][0][inline_entity_form][title][0][value]' => 'Basic 2'
+      'field_paragraphs[1][subform][field_article][0][inline_entity_form][title][0][value]' => 'Basic 2',
     ];
     $this->drupalPostForm(NULL, $edit, t('Save'));
   }
diff --git a/tests/src/Functional/WidgetStable/ParagraphsPreviewTest.php b/tests/src/Functional/WidgetStable/ParagraphsPreviewTest.php
index d500ab4..1ee0534 100644
--- a/tests/src/Functional/WidgetStable/ParagraphsPreviewTest.php
+++ b/tests/src/Functional/WidgetStable/ParagraphsPreviewTest.php
@@ -14,9 +14,9 @@ class ParagraphsPreviewTest extends ParagraphsTestBase {
    *
    * @var array
    */
-  public static $modules = array(
+  public static $modules = [
     'image',
-  );
+  ];
 
   /**
    * Tests the revision of paragraphs.
@@ -37,14 +37,14 @@ class ParagraphsPreviewTest extends ParagraphsTestBase {
     // Create paragraph type Headline + Block.
     $this->addParagraphsType('text');
     // Create field types for the text.
-    $this->fieldUIAddNewField('admin/structure/paragraphs_type/text', 'text', 'Text', 'text', array(), array());
+    $this->fieldUIAddNewField('admin/structure/paragraphs_type/text', 'text', 'Text', 'text', [], []);
     $this->assertSession()->pageTextContains('Saved Text configuration.');
 
     $test_text_1 = 'dummy_preview_text_1';
     $test_text_2 = 'dummy_preview_text_2';
     // Create node with two paragraphs.
     $this->drupalGet('node/add/article');
-    $this->drupalPostForm(NULL, array(), 'field_paragraphs_text_add_more');
+    $this->drupalPostForm(NULL, [], 'field_paragraphs_text_add_more');
     // Set the value of the paragraphs.
     $edit = [
       'title[0][value]' => 'Page_title',
@@ -70,7 +70,7 @@ class ParagraphsPreviewTest extends ParagraphsTestBase {
     $this->drupalPostForm(NULL, $edit, t('Save'));
 
     $this->clickLink('Edit');
-    $this->drupalPostForm(NULL, array(), 'field_paragraphs_text_add_more');
+    $this->drupalPostForm(NULL, [], 'field_paragraphs_text_add_more');
     $edit = [
       'field_paragraphs[1][subform][field_text][0][value]' => $test_text_2,
     ];
diff --git a/tests/src/Functional/WidgetStable/ParagraphsReplicateEnableTest.php b/tests/src/Functional/WidgetStable/ParagraphsReplicateEnableTest.php
index 1cc922a..e534da3 100644
--- a/tests/src/Functional/WidgetStable/ParagraphsReplicateEnableTest.php
+++ b/tests/src/Functional/WidgetStable/ParagraphsReplicateEnableTest.php
@@ -7,7 +7,6 @@ namespace Drupal\Tests\paragraphs\Functional\WidgetStable;
  *
  * @group paragraphs
  */
-
 class ParagraphsReplicateEnableTest extends ParagraphsDuplicateFeatureTest {
 
   public static $modules = [
diff --git a/tests/src/Functional/WidgetStable/ParagraphsSummaryFormatterTest.php b/tests/src/Functional/WidgetStable/ParagraphsSummaryFormatterTest.php
index 43202b9..d4d8db7 100644
--- a/tests/src/Functional/WidgetStable/ParagraphsSummaryFormatterTest.php
+++ b/tests/src/Functional/WidgetStable/ParagraphsSummaryFormatterTest.php
@@ -33,7 +33,7 @@ class ParagraphsSummaryFormatterTest extends ParagraphsTestBase {
     static::fieldUIAddNewField('admin/structure/paragraphs_type/' . $paragraph_type, 'text', 'Text', 'text_long', [], []);
     static::fieldUIAddNewField('admin/structure/paragraphs_type/' . $title_paragraphs_type, 'title', 'Title', 'string', [], []);
 
-    // Add a user Paragraph Type
+    // Add a user Paragraph Type.
     $paragraph_type = 'user_paragraph';
     $this->addParagraphsType($paragraph_type);
     static::fieldUIAddNewField('admin/structure/paragraphs_type/' . $paragraph_type, 'user', 'User', 'entity_reference', ['settings[target_type]' => 'user'], []);
diff --git a/tests/src/Functional/WidgetStable/ParagraphsTestBase.php b/tests/src/Functional/WidgetStable/ParagraphsTestBase.php
index 82f8e5e..783abd1 100644
--- a/tests/src/Functional/WidgetStable/ParagraphsTestBase.php
+++ b/tests/src/Functional/WidgetStable/ParagraphsTestBase.php
@@ -27,7 +27,7 @@ abstract class ParagraphsTestBase extends LegacyParagraphsTestBase {
     $form_display = EntityFormDisplay::load('node.' . $content_type . '.default')
       ->setComponent($paragraphs_field, [
         'type' => 'paragraphs',
-        'settings' => ['add_mode' => $mode]
+        'settings' => ['add_mode' => $mode],
       ]);
     $form_display->save();
   }
diff --git a/tests/src/Functional/WidgetStable/ParagraphsTranslationTest.php b/tests/src/Functional/WidgetStable/ParagraphsTranslationTest.php
index bb78ef4..160a068 100644
--- a/tests/src/Functional/WidgetStable/ParagraphsTranslationTest.php
+++ b/tests/src/Functional/WidgetStable/ParagraphsTranslationTest.php
@@ -22,7 +22,7 @@ class ParagraphsTranslationTest extends ParagraphsTestBase {
    *
    * @var array
    */
-  public static $modules = array(
+  public static $modules = [
     'content_translation',
     'link',
     'image',
@@ -30,8 +30,8 @@ class ParagraphsTranslationTest extends ParagraphsTestBase {
     'field_ui',
     'block',
     'language',
-    'node'
-  );
+    'node',
+  ];
 
   /**
    * {@inheritdoc}
@@ -75,7 +75,7 @@ class ParagraphsTranslationTest extends ParagraphsTestBase {
       'settings[paragraph][images][fields][field_images_demo]' => TRUE,
       'settings[paragraph][text_image][fields][field_image_demo]' => TRUE,
       'settings[paragraph][text_image][fields][field_text_demo]' => TRUE,
-      'settings[node][paragraphed_content_demo][settings][language][language_alterable]' => TRUE
+      'settings[node][paragraphed_content_demo][settings][language][language_alterable]' => TRUE,
     ];
     $this->drupalPostForm('admin/config/regional/content-language', $edit, t('Save configuration'));
 
@@ -106,10 +106,10 @@ class ParagraphsTranslationTest extends ParagraphsTestBase {
 
     // Check if the publish/unpublish option works.
     $this->drupalGet('admin/structure/paragraphs_type/text_image/form-display');
-    $edit = array(
+    $edit = [
       'fields[status][type]' => 'boolean_checkbox',
       'fields[status][region]' => 'content',
-    );
+    ];
     // Use the stable widget.
     $form_display = EntityFormDisplay::load('node.paragraphed_content_demo.default')
       ->setComponent('field_paragraphs_demo', [
@@ -138,7 +138,7 @@ class ParagraphsTranslationTest extends ParagraphsTestBase {
     $this->drupalPostForm(NULL, NULL, 'field_paragraphs_demo_1_subform_field_paragraphs_demo_text_add_more');
     $edit = [
       'field_paragraphs_demo[0][subform][status][value]' => FALSE,
-      'field_paragraphs_demo[1][subform][field_paragraphs_demo][0][subform][field_text_demo][0][value]' => 'Dummy text'
+      'field_paragraphs_demo[1][subform][field_paragraphs_demo][0][subform][field_text_demo][0][value]' => 'Dummy text',
     ];
     $this->drupalPostForm(NULL, $edit, t('Save'));
     $this->assertSession()->pageTextNotContains(t('Example published and unpublished'));
@@ -165,10 +165,10 @@ class ParagraphsTranslationTest extends ParagraphsTestBase {
     // Add paragraphed content.
     $this->drupalGet('node/add/paragraphed_content_demo');
     $this->drupalPostForm(NULL, NULL, t('Add text_image'));
-    $edit = array(
+    $edit = [
       'title[0][value]' => 'Title in english',
       'field_paragraphs_demo[0][subform][field_text_demo][0][value]' => 'Text in english',
-    );
+    ];
     // The button to remove a paragraph is present.
     $this->assertSession()->responseContains(t('Remove'));
     $this->drupalPostForm(NULL, $edit, t('Save'));
@@ -187,12 +187,12 @@ class ParagraphsTranslationTest extends ParagraphsTestBase {
     // Make sure that the original paragraph text is displayed.
     $this->assertSession()->pageTextContains('Text in english');
 
-    $edit = array(
+    $edit = [
       'title[0][value]' => 'Title in french',
       'field_paragraphs_demo[0][subform][field_text_demo][0][value]' => 'Text in french',
       'revision' => TRUE,
       'revision_log[0][value]' => 'french 1',
-    );
+    ];
     $this->drupalPostForm(NULL, $edit, t('Save (this translation)'));
     $this->assertSession()->pageTextContains('paragraphed_content_demo Title in french has been updated.');
 
@@ -212,12 +212,12 @@ class ParagraphsTranslationTest extends ParagraphsTestBase {
     $this->clickLink(t('Edit'));
     $this->assertSession()->pageTextContains('Title in french');
     $this->assertSession()->pageTextContains('Text in french');
-    $edit = array(
+    $edit = [
       'title[0][value]' => 'Title Change in french',
       'field_paragraphs_demo[0][subform][field_text_demo][0][value]' => 'New text in french',
       'revision' => TRUE,
       'revision_log[0][value]' => 'french 2',
-    );
+    ];
     $this->drupalPostForm(NULL, $edit, t('Save (this translation)'));
     $this->assertSession()->pageTextContains('Title Change in french');
     $this->assertSession()->pageTextContains('New text in french');
@@ -243,9 +243,9 @@ class ParagraphsTranslationTest extends ParagraphsTestBase {
     $this->assertSession()->responseNotContains('The content has either been modified by another user, or you have already submitted modifications');
     $this->assertSession()->pageTextContains('Text in french');
 
-    //Add paragraphed content with untranslatable language
+    // Add paragraphed content with untranslatable language.
     $this->drupalGet('node/add/paragraphed_content_demo');
-    $edit = array('langcode[0][value]' => LanguageInterface::LANGCODE_NOT_SPECIFIED);
+    $edit = ['langcode[0][value]' => LanguageInterface::LANGCODE_NOT_SPECIFIED];
     $this->drupalPostForm(NULL, $edit, t('Add text_image'));
     $this->assertSession()->statusCodeEquals(200);
 
@@ -451,7 +451,7 @@ class ParagraphsTranslationTest extends ParagraphsTestBase {
     $this->addParagraphsType('node_reference');
     static::fieldUIAddNewField('admin/structure/paragraphs_type/node_reference', 'entity_reference', 'Entity reference', 'entity_reference', [
       'settings[target_type]' => 'node',
-      'cardinality' => '-1'
+      'cardinality' => '-1',
     ], [
       'settings[handler_settings][target_bundles][paragraphed_content_demo]' => TRUE,
     ]);
@@ -486,7 +486,6 @@ class ParagraphsTranslationTest extends ParagraphsTestBase {
    */
   public function testParagraphTranslationMultilingual() {
     // Case 1: original node langcode in EN, translate in FR, change to DE.
-
     // Add 'Images' paragraph and check the paragraphs buttons are displayed.
     // Use the stable widget.
     $form_display = EntityFormDisplay::load('node.paragraphed_content_demo.default')
@@ -597,7 +596,6 @@ class ParagraphsTranslationTest extends ParagraphsTestBase {
 
     // Case 2: original node langcode in DE, change site langcode to DE, change
     // node langcode to EN.
-
     // Change the site langcode to french.
     $this->drupalPostForm('admin/config/regional/language', [
       'site_default_language' => 'fr',
@@ -648,7 +646,7 @@ class ParagraphsTranslationTest extends ParagraphsTestBase {
     ];
     $this->drupalPostForm(NULL, $edit, 'field_paragraphs_demo_images_add_more');
     $this->assertParagraphsLangcode($node->id(), 'de');
-      $this->assertParagraphsButtons(3);
+    $this->assertParagraphsButtons(3);
     // Upload a new image, check the paragraphs langcode are still 'de' and the
     // paragraphs buttons are displayed.
     $images = $this->getTestFiles('image')[4];
@@ -738,7 +736,6 @@ class ParagraphsTranslationTest extends ParagraphsTestBase {
 
     // Case 2: Check the paragraphs buttons after changing the NODE language
     // (original node langcode in ENGLISH, default site langcode in english).
-
     // Create another node.
     $this->drupalGet('node/add/paragraphed_content_demo');
     // Check that the node langcode is 'english' and add a 'Nested Paragraph'.
@@ -799,7 +796,6 @@ class ParagraphsTranslationTest extends ParagraphsTestBase {
     $this->assertParagraphsLangcode($node2->id());
 
     // Case 3: Check the paragraphs buttons after changing the SITE language.
-
     // Change the site langcode to german.
     $edit = [
       'site_default_language' => 'de',
@@ -950,4 +946,5 @@ class ParagraphsTranslationTest extends ParagraphsTestBase {
       }
     }
   }
+
 }
diff --git a/tests/src/Functional/WidgetStable/ParagraphsTranslationsTest.php b/tests/src/Functional/WidgetStable/ParagraphsTranslationsTest.php
index 70a5858..ab2dd7c 100644
--- a/tests/src/Functional/WidgetStable/ParagraphsTranslationsTest.php
+++ b/tests/src/Functional/WidgetStable/ParagraphsTranslationsTest.php
@@ -27,7 +27,7 @@ class ParagraphsTranslationsTest extends ParagraphsTestBase {
     'field_ui',
     'block',
     'link',
-    'content_translation'
+    'content_translation',
   ];
 
   /**
diff --git a/tests/src/Functional/WidgetStable/ParagraphsTypesTest.php b/tests/src/Functional/WidgetStable/ParagraphsTypesTest.php
index 29d6a79..2974c8c 100644
--- a/tests/src/Functional/WidgetStable/ParagraphsTypesTest.php
+++ b/tests/src/Functional/WidgetStable/ParagraphsTypesTest.php
@@ -86,7 +86,7 @@ class ParagraphsTypesTest extends ParagraphsTestBase {
     // Create a paragraph type with label and id more than 32 characters.
     $edit = [
       'label' => 'Test',
-      'id' => 'test_name_with_more_than_32_characters'
+      'id' => 'test_name_with_more_than_32_characters',
     ];
     $this->drupalPostForm(NULL, $edit, 'Save and manage fields');
     $this->assertSession()->pageTextContains('Machine-readable name cannot be longer than 32 characters but is currently 38 characters long.');
@@ -94,4 +94,5 @@ class ParagraphsTypesTest extends ParagraphsTestBase {
     $this->drupalPostForm(NULL, $edit, 'Save and manage fields');
     $this->assertSession()->pageTextContains('Saved the Test Paragraphs type.');
   }
+
 }
diff --git a/tests/src/Functional/WidgetStable/ParagraphsUiTest.php b/tests/src/Functional/WidgetStable/ParagraphsUiTest.php
index 18faa1e..60fedd1 100644
--- a/tests/src/Functional/WidgetStable/ParagraphsUiTest.php
+++ b/tests/src/Functional/WidgetStable/ParagraphsUiTest.php
@@ -14,15 +14,15 @@ class ParagraphsUiTest extends ParagraphsTestBase {
   /**
    * {@inheritdoc}
    */
-  public static $modules = array(
+  public static $modules = [
     'content_translation',
     'image',
     'field',
     'field_ui',
     'block',
     'language',
-    'node'
-  );
+    'node',
+  ];
 
   /**
    * {@inheritdoc}
@@ -60,7 +60,7 @@ class ParagraphsUiTest extends ParagraphsTestBase {
       'settings[paragraph][images][fields][field_images_demo]' => TRUE,
       'settings[paragraph][text_image][fields][field_image_demo]' => TRUE,
       'settings[paragraph][text_image][fields][field_text_demo]' => TRUE,
-      'settings[node][paragraphed_content_demo][settings][language][language_alterable]' => TRUE
+      'settings[node][paragraphed_content_demo][settings][language][language_alterable]' => TRUE,
     ];
     $this->drupalPostForm('admin/config/regional/content-language', $edit, t('Save configuration'));
   }
diff --git a/tests/src/FunctionalJavascript/LoginAdminTrait.php b/tests/src/FunctionalJavascript/LoginAdminTrait.php
index baf3032..a672948 100644
--- a/tests/src/FunctionalJavascript/LoginAdminTrait.php
+++ b/tests/src/FunctionalJavascript/LoginAdminTrait.php
@@ -41,4 +41,5 @@ trait LoginAdminTrait {
     $this->drupalLogin($this->admin_user);
     return $this->admin_user;
   }
+
 }
diff --git a/tests/src/FunctionalJavascript/ParagraphsAddWidgetTest.php b/tests/src/FunctionalJavascript/ParagraphsAddWidgetTest.php
index 50463c5..d8d014e 100644
--- a/tests/src/FunctionalJavascript/ParagraphsAddWidgetTest.php
+++ b/tests/src/FunctionalJavascript/ParagraphsAddWidgetTest.php
@@ -42,8 +42,7 @@ class ParagraphsAddWidgetTest extends WebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp()
-  {
+  protected function setUp() {
     parent::setUp();
     // Place the breadcrumb, tested in fieldUIAddNewField().
     $this->drupalPlaceBlock('system_breadcrumb_block');
@@ -71,7 +70,7 @@ class ParagraphsAddWidgetTest extends WebDriverTestBase {
     $this->assertSession()->assertWaitOnAjaxRequest();
     $edit = [
       'fields[field_paragraphs][settings_edit_form][settings][edit_mode]' => 'closed',
-      'fields[field_paragraphs][settings_edit_form][settings][add_mode]' => 'modal'
+      'fields[field_paragraphs][settings_edit_form][settings][add_mode]' => 'modal',
     ];
     $this->drupalPostForm(NULL, $edit, 'Update');
     $this->assertSession()->assertWaitOnAjaxRequest();
diff --git a/tests/src/FunctionalJavascript/ParagraphsClientsideButtonsTest.php b/tests/src/FunctionalJavascript/ParagraphsClientsideButtonsTest.php
index f2511d7..9bec329 100644
--- a/tests/src/FunctionalJavascript/ParagraphsClientsideButtonsTest.php
+++ b/tests/src/FunctionalJavascript/ParagraphsClientsideButtonsTest.php
@@ -217,25 +217,25 @@ class ParagraphsClientsideButtonsTest extends WebDriverTestBase {
     $this->addFieldtoParagraphType('rich_paragraph', 'field_nested_paragraphs', 'entity_reference_revisions', ['target_type' => 'paragraph']);
     $form_display = \Drupal::service('entity_display.repository')->getFormDisplay('paragraph', 'rich_paragraph');
     $form_display->setComponent('field_nested_paragraphs', [
-        'type' => 'paragraphs',
-        'settings' => [
-          'title' => 'Paragraph',
-          'title_plural' => 'Paragraphs',
-          'edit_mode' => 'closed',
-          'closed_mode' => 'summary',
-          'autocollapse' => 'none',
-          'add_mode' => 'modal',
-          'form_display_mode' => 'default',
-          'default_paragraph_type' => '_none',
-          'features' => [
-            'duplicate' => 'duplicate',
-            'collapse_edit_all' => 'collapse_edit_all',
-            'add_above' => 'add_above',
-          ],
-          'third_party_settings' => [],
-          'region' => 'content',
+      'type' => 'paragraphs',
+      'settings' => [
+        'title' => 'Paragraph',
+        'title_plural' => 'Paragraphs',
+        'edit_mode' => 'closed',
+        'closed_mode' => 'summary',
+        'autocollapse' => 'none',
+        'add_mode' => 'modal',
+        'form_display_mode' => 'default',
+        'default_paragraph_type' => '_none',
+        'features' => [
+          'duplicate' => 'duplicate',
+          'collapse_edit_all' => 'collapse_edit_all',
+          'add_above' => 'add_above',
         ],
-      ])
+        'third_party_settings' => [],
+        'region' => 'content',
+      ],
+    ])
       ->save();
 
     $this->drupalGet("/node/{$node_id}/edit");
diff --git a/tests/src/FunctionalJavascript/ParagraphsStableEditPerspectivesUiTest.php b/tests/src/FunctionalJavascript/ParagraphsStableEditPerspectivesUiTest.php
index b587963..51d7017 100644
--- a/tests/src/FunctionalJavascript/ParagraphsStableEditPerspectivesUiTest.php
+++ b/tests/src/FunctionalJavascript/ParagraphsStableEditPerspectivesUiTest.php
@@ -4,7 +4,6 @@ namespace Drupal\Tests\paragraphs\FunctionalJavascript;
 
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
-use Drupal\paragraphs\Entity\ParagraphsType;
 
 /**
  * Test paragraphs user interface.
@@ -49,7 +48,7 @@ class ParagraphsStableEditPerspectivesUiTest extends WebDriverTestBase {
    */
   public function testEditPerspectives() {
     $this->loginAsAdmin([
-      'edit behavior plugin settings'
+      'edit behavior plugin settings',
     ]);
 
     $page = $this->getSession()->getPage();
@@ -74,7 +73,7 @@ class ParagraphsStableEditPerspectivesUiTest extends WebDriverTestBase {
     // Assert scroll position when switching tabs.
     $this->getSession()->resizeWindow(800, 500);
     $this->drupalGet('node/add/testcontent');
-    $button = $this->getSession ()->getPage()->findButton('Add TestPlugin');
+    $button = $this->getSession()->getPage()->findButton('Add TestPlugin');
     $button->press();
     $this->assertSession()->assertWaitOnAjaxRequest();
     $button->press();
@@ -118,7 +117,7 @@ class ParagraphsStableEditPerspectivesUiTest extends WebDriverTestBase {
    */
   public function testPerspectivesAddModesVisibility() {
     $this->loginAsAdmin([
-      'edit behavior plugin settings'
+      'edit behavior plugin settings',
     ]);
 
     $page = $this->getSession()->getPage();
@@ -218,7 +217,7 @@ class ParagraphsStableEditPerspectivesUiTest extends WebDriverTestBase {
    */
   public function testPerspectivesWithMultipleFields() {
     $this->loginAsAdmin([
-      'edit behavior plugin settings'
+      'edit behavior plugin settings',
     ]);
 
     // Add a nested Paragraph type.
diff --git a/tests/src/FunctionalJavascript/ParagraphsTestBaseTrait.php b/tests/src/FunctionalJavascript/ParagraphsTestBaseTrait.php
index f6f19db..510d4ef 100644
--- a/tests/src/FunctionalJavascript/ParagraphsTestBaseTrait.php
+++ b/tests/src/FunctionalJavascript/ParagraphsTestBaseTrait.php
@@ -24,7 +24,6 @@ trait ParagraphsTestBaseTrait {
    */
   protected $workflow;
 
-
   /**
    * Adds a content type with a Paragraphs field.
    *
@@ -201,7 +200,7 @@ trait ParagraphsTestBaseTrait {
    *   (optional) Machine name of the content entity type that the bundle
    *   belongs to. Defaults to "node".
    */
-    protected function setParagraphsWidgetSettings($bundle, $paragraphs_field, array $settings, $field_widget = NULL, $entity_type = 'node') {
+  protected function setParagraphsWidgetSettings($bundle, $paragraphs_field, array $settings, $field_widget = NULL, $entity_type = 'node') {
     /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $default_form_display */
     $default_form_display = \Drupal::entityTypeManager()
       ->getStorage('entity_form_display')
diff --git a/tests/src/Kernel/ParagraphsBehaviorPluginsTest.php b/tests/src/Kernel/ParagraphsBehaviorPluginsTest.php
index 7d2508c..cdbe008 100644
--- a/tests/src/Kernel/ParagraphsBehaviorPluginsTest.php
+++ b/tests/src/Kernel/ParagraphsBehaviorPluginsTest.php
@@ -44,15 +44,15 @@ class ParagraphsBehaviorPluginsTest extends KernelTestBase {
    */
   public function testBehaviorSettings() {
     // Create a paragraph type.
-    $paragraph_type = ParagraphsType::create(array(
+    $paragraph_type = ParagraphsType::create([
       'label' => 'test_text',
       'id' => 'test_text',
       'behavior_plugins' => [
         'test_text_color' => [
           'enabled' => TRUE,
-        ]
+        ],
       ],
-    ));
+    ]);
     $paragraph_type->save();
 
     // Create a paragraph and set its feature settings.
@@ -61,7 +61,7 @@ class ParagraphsBehaviorPluginsTest extends KernelTestBase {
     ]);
     $feature_settings = [
       'test_text_color' => [
-        'text_color' => 'red'
+        'text_color' => 'red',
       ],
     ];
     $paragraph->setAllBehaviorSettings($feature_settings);
diff --git a/tests/src/Kernel/ParagraphsCollapsedSummaryTest.php b/tests/src/Kernel/ParagraphsCollapsedSummaryTest.php
index 93be484..cdb1e8b 100644
--- a/tests/src/Kernel/ParagraphsCollapsedSummaryTest.php
+++ b/tests/src/Kernel/ParagraphsCollapsedSummaryTest.php
@@ -49,7 +49,7 @@ class ParagraphsCollapsedSummaryTest extends KernelTestBase {
     \Drupal::moduleHandler()->loadInclude('paragraphs', 'install');
 
     // Create a text paragraph type with test_text_color plugin enabled.
-    $paragraph_type = ParagraphsType::create(array(
+    $paragraph_type = ParagraphsType::create([
       'label' => 'text_paragraph',
       'id' => 'text_paragraph',
       'behavior_plugins' => [
@@ -57,7 +57,7 @@ class ParagraphsCollapsedSummaryTest extends KernelTestBase {
           'enabled' => TRUE,
         ],
       ],
-    ));
+    ]);
     $paragraph_type->save();
     $this->addParagraphsField('text_paragraph', 'text', 'string');
     EntityFormDisplay::create([
@@ -204,7 +204,7 @@ class ParagraphsCollapsedSummaryTest extends KernelTestBase {
       'entity_type' => 'paragraph',
       'type' => $field_type,
       'cardinality' => '-1',
-      'settings' => $field_edit
+      'settings' => $field_edit,
     ]);
     $field_storage->save();
     $field = FieldConfig::create([
diff --git a/tests/src/Kernel/ParagraphsCompositeRelationshipTest.php b/tests/src/Kernel/ParagraphsCompositeRelationshipTest.php
index 4be7c37..1e19db4 100644
--- a/tests/src/Kernel/ParagraphsCompositeRelationshipTest.php
+++ b/tests/src/Kernel/ParagraphsCompositeRelationshipTest.php
@@ -25,7 +25,7 @@ class ParagraphsCompositeRelationshipTest extends KernelTestBase {
    *
    * @var array
    */
-  public static $modules = array(
+  public static $modules = [
     'paragraphs',
     'node',
     'user',
@@ -34,7 +34,7 @@ class ParagraphsCompositeRelationshipTest extends KernelTestBase {
     'entity_reference_revisions',
     'language',
     'file',
-  );
+  ];
 
   /**
    * {@inheritdoc}
@@ -58,66 +58,66 @@ class ParagraphsCompositeRelationshipTest extends KernelTestBase {
    */
   public function testParagraphsRevisions() {
     // Create the paragraph type.
-    $paragraph_type = ParagraphsType::create(array(
+    $paragraph_type = ParagraphsType::create([
       'label' => 'test_text',
       'id' => 'test_text',
-    ));
+    ]);
     $paragraph_type->save();
 
-    $paragraph_type_nested = ParagraphsType::create(array(
+    $paragraph_type_nested = ParagraphsType::create([
       'label' => 'test_nested',
       'id' => 'test_nested',
-    ));
+    ]);
     $paragraph_type_nested->save();
 
     // Add a paragraph field to the article.
-    $field_storage = FieldStorageConfig::create(array(
+    $field_storage = FieldStorageConfig::create([
       'field_name' => 'nested_paragraph_field',
       'entity_type' => 'paragraph',
       'type' => 'entity_reference_revisions',
       'cardinality' => '-1',
-      'settings' => array(
-        'target_type' => 'paragraph'
-      ),
-    ));
+      'settings' => [
+        'target_type' => 'paragraph',
+      ],
+    ]);
     $field_storage->save();
-    $field = FieldConfig::create(array(
+    $field = FieldConfig::create([
       'field_storage' => $field_storage,
       'bundle' => 'test_nested',
-    ));
+    ]);
     $field->save();
 
     // Add a paragraph field to the article.
-    $field_storage = FieldStorageConfig::create(array(
+    $field_storage = FieldStorageConfig::create([
       'field_name' => 'node_paragraph_field',
       'entity_type' => 'node',
       'type' => 'entity_reference_revisions',
       'cardinality' => '-1',
-      'settings' => array(
-        'target_type' => 'paragraph'
-      ),
-    ));
+      'settings' => [
+        'target_type' => 'paragraph',
+      ],
+    ]);
     $field_storage->save();
-    $field = FieldConfig::create(array(
+    $field = FieldConfig::create([
       'field_storage' => $field_storage,
       'bundle' => 'article',
-    ));
+    ]);
     $field->save();
 
     // Add a paragraph field to the user.
-    $field_storage = FieldStorageConfig::create(array(
+    $field_storage = FieldStorageConfig::create([
       'field_name' => 'user_paragraph_field',
       'entity_type' => 'user',
       'type' => 'entity_reference_revisions',
-      'settings' => array(
-        'target_type' => 'paragraph'
-      ),
-    ));
+      'settings' => [
+        'target_type' => 'paragraph',
+      ],
+    ]);
     $field_storage->save();
-    $field = FieldConfig::create(array(
+    $field = FieldConfig::create([
       'field_storage' => $field_storage,
       'bundle' => 'user',
-    ));
+    ]);
     $field->save();
 
     // Create a paragraph.
@@ -170,8 +170,8 @@ class ParagraphsCompositeRelationshipTest extends KernelTestBase {
     $node = Node::create([
       'title' => $this->randomMachineName(),
       'type' => 'article',
-      'node_paragraph_field' => array($paragraph1, $paragraph2, $paragraph3, $paragraph4_nested_parent),
-      ]);
+      'node_paragraph_field' => [$paragraph1, $paragraph2, $paragraph3, $paragraph4_nested_parent],
+    ]);
     $node->save();
 
     // Create an user with a paragraph.
@@ -296,7 +296,7 @@ class ParagraphsCompositeRelationshipTest extends KernelTestBase {
     // Create a new paragraph and add a german translation.
     $paragraph = Paragraph::create([
       'title' => 'Paragraph',
-      'type' => 'test_text'
+      'type' => 'test_text',
     ]);
     $paragraph->addTranslation('de');
     $paragraph->save();
@@ -305,7 +305,7 @@ class ParagraphsCompositeRelationshipTest extends KernelTestBase {
     $node = Node::load($node->id());
     $node->addTranslation('de', [
       'title' => 'german',
-      'node_paragraph_field' => $paragraph
+      'node_paragraph_field' => $paragraph,
     ]);
     $node->save();
 
@@ -344,4 +344,5 @@ class ParagraphsCompositeRelationshipTest extends KernelTestBase {
     self::assertEquals($paragraph['parent_type'][0]['value'], $entity_type, 'Matching parent type.');
     self::assertEquals($paragraph['parent_field_name'][0]['value'], $field_name, 'Matching parent field name.');
   }
+
 }
diff --git a/tests/src/Kernel/ParagraphsEntityMethodsTest.php b/tests/src/Kernel/ParagraphsEntityMethodsTest.php
index c4b7805..31f13e6 100644
--- a/tests/src/Kernel/ParagraphsEntityMethodsTest.php
+++ b/tests/src/Kernel/ParagraphsEntityMethodsTest.php
@@ -7,7 +7,6 @@ use Drupal\KernelTests\KernelTestBase;
 use Drupal\node\Entity\Node;
 use Drupal\paragraphs\Entity\Paragraph;
 use Drupal\Tests\paragraphs\FunctionalJavascript\ParagraphsTestBaseTrait;
-use Drupal\Tests\paragraphs\Traits\ParagraphsLastEntityQueryTrait;
 
 /**
  * Tests some methods from the Paragraph entity.
diff --git a/tests/src/Kernel/ParagraphsReplicateTest.php b/tests/src/Kernel/ParagraphsReplicateTest.php
index 2d2b68a..bb96705 100644
--- a/tests/src/Kernel/ParagraphsReplicateTest.php
+++ b/tests/src/Kernel/ParagraphsReplicateTest.php
@@ -2,7 +2,6 @@
 
 namespace Drupal\Tests\paragraphs\Kernel;
 
-use Drupal\Core\Entity\Entity;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\node\Entity\Node;
@@ -147,8 +146,8 @@ class ParagraphsReplicateTest extends KernelTestBase {
     $node = Node::create([
       'title' => $this->randomMachineName(),
       'type' => 'article',
-      'node_paragraph_field' => array($paragraph, $paragraph_nested_parent),
-      ]);
+      'node_paragraph_field' => [$paragraph, $paragraph_nested_parent],
+    ]);
     $node->save();
 
     $replicated_node = $this->container->get('replicate.replicator')
@@ -185,4 +184,5 @@ class ParagraphsReplicateTest extends KernelTestBase {
     $this->assertEquals('Parent paragraph - replicated', $replicated_node->node_paragraph_field[1]->entity->title->value, 'Field value on the replicated parent paragraph are updated.');
     $this->assertEquals('Nested paragraph - replicated', $replicated_node->node_paragraph_field[1]->entity->nested_paragraph_field[0]->entity->title->value, 'Field value on the replicated nested paragraph are updated.');
   }
+
 }
diff --git a/tests/src/Kernel/ParagraphsTypeHasEnabledBehaviorPluginTest.php b/tests/src/Kernel/ParagraphsTypeHasEnabledBehaviorPluginTest.php
index 05de586..d9f62b2 100644
--- a/tests/src/Kernel/ParagraphsTypeHasEnabledBehaviorPluginTest.php
+++ b/tests/src/Kernel/ParagraphsTypeHasEnabledBehaviorPluginTest.php
@@ -28,7 +28,7 @@ class ParagraphsTypeHasEnabledBehaviorPluginTest extends KernelTestBase {
   /**
    * ParagraphsType entity build in setUp()
    *
-   * @var ParagraphsType
+   * @var \Drupal\paragraphs\Entity\ParagraphsType
    */
   protected $paragraphsType;
 
diff --git a/tests/src/Traits/ParagraphsCoreVersionUiTestTrait.php b/tests/src/Traits/ParagraphsCoreVersionUiTestTrait.php
index f08040b..047eef9 100644
--- a/tests/src/Traits/ParagraphsCoreVersionUiTestTrait.php
+++ b/tests/src/Traits/ParagraphsCoreVersionUiTestTrait.php
@@ -20,7 +20,7 @@ trait ParagraphsCoreVersionUiTestTrait {
    * @param array $edit
    *   Field data in an associative array.
    * @param mixed $submit
-   *   Value of the submit button whose click is to be emulated. For example,
+   *   Value of the submit button whose click is to be emulated. For example,.
    * @param array $options
    *   (optional) Options to be forwarded to the url generator.
    * @param array $headers
