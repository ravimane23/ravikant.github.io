diff --git a/replicate.api.php b/replicate.api.php
index b573387..4434be9 100644
--- a/replicate.api.php
+++ b/replicate.api.php
@@ -9,12 +9,12 @@
  * Unlike the D7 version the D8 version no longer uses hooks.
  *
  * Available events are:
- * 
+ *
  * - \Drupal\replicate\Events\ReplicatorEvents::AFTER_SAVE
  *   This event is fired after the entire entity got replicated and saved.
  * - replicate__entity__{$entity_type_id}
  *   This event allows to change the logic how an entity is replicated. It retrieves
- *   a copy of the duplicated entity, before any field level customization is 
+ *   a copy of the duplicated entity, before any field level customization is
  *   executed
  * - replicate__entity_field__{$field_type_id}
  *   This event allows you to manipulate the replication of a specific field type.
diff --git a/replicate.drush.inc b/replicate.drush.inc
index c356a4a..70b2c50 100644
--- a/replicate.drush.inc
+++ b/replicate.drush.inc
@@ -9,21 +9,21 @@
  * Implements hook_drush_command().
  */
 function replicate_drush_command() {
-  $items = array();
+  $items = [];
 
-  $items['replicate-drush-entity-by-ids'] = array(
+  $items['replicate-drush-entity-by-ids'] = [
     'description' => 'Replicate an entity',
-    'arguments' => array(
+    'arguments' => [
       'entity-type' => dt('Type of entity (eg. Node, Comment, ...) that you wish to replicate.'),
       'entity-ids' => dt('A comma delimited list of entity IDs which should be replicated (eg. NodeID, TermID, ...).'),
-    ),
+    ],
     'required-arguments' => 1,
-    'aliases' => array('rep', 'replicate'),
-    'examples' => array(
+    'aliases' => ['rep', 'replicate'],
+    'examples' => [
       'drush replicate-drush-entity-by-ids node 1' => 'Replicate node 1 using full command.',
       'drush replicate node 1,2,3' => 'Replicate nodes 1,2 and 3 using aliased command.',
-    ),
-  );
+    ],
+  ];
 
   return $items;
 }
diff --git a/src/EventSubscriber/ReplicatePathFieldSubscriber.php b/src/EventSubscriber/ReplicatePathFieldSubscriber.php
index d450279..fd59e88 100644
--- a/src/EventSubscriber/ReplicatePathFieldSubscriber.php
+++ b/src/EventSubscriber/ReplicatePathFieldSubscriber.php
@@ -16,7 +16,7 @@ class ReplicatePathFieldSubscriber implements EventSubscriberInterface {
   /**
    * Cleans a path on an entity being replicated.
    *
-   * @param ReplicateEntityFieldEvent $event
+   * @param \Drupal\replicate\Events\ReplicateEntityFieldEvent $event
    *   The event we're working on.
    */
   public function onPathClone(ReplicateEntityFieldEvent $event) {
diff --git a/src/Events/AfterSaveEvent.php b/src/Events/AfterSaveEvent.php
index 5acb264..0b8b7ab 100644
--- a/src/Events/AfterSaveEvent.php
+++ b/src/Events/AfterSaveEvent.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\replicate\Events;
 
+/**
+ *
+ */
 class AfterSaveEvent extends ReplicateEventBase {
 
 }
diff --git a/src/Events/ReplicateAlterEvent.php b/src/Events/ReplicateAlterEvent.php
index 220563c..97369bc 100644
--- a/src/Events/ReplicateAlterEvent.php
+++ b/src/Events/ReplicateAlterEvent.php
@@ -4,6 +4,9 @@ namespace Drupal\replicate\Events;
 
 use Drupal\Core\Entity\EntityInterface;
 
+/**
+ *
+ */
 class ReplicateAlterEvent extends ReplicateEventBase {
 
   /**
@@ -11,6 +14,9 @@ class ReplicateAlterEvent extends ReplicateEventBase {
    */
   protected $original;
 
+  /**
+   *
+   */
   public function __construct(EntityInterface $entity, EntityInterface $original) {
     parent::__construct($entity);
     $this->original = $original;
diff --git a/src/Events/ReplicateEntityEvent.php b/src/Events/ReplicateEntityEvent.php
index d7eb53a..95311de 100644
--- a/src/Events/ReplicateEntityEvent.php
+++ b/src/Events/ReplicateEntityEvent.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\replicate\Events;
 
+/**
+ *
+ */
 class ReplicateEntityEvent extends ReplicateEventBase {
 
 }
diff --git a/src/Events/ReplicateEntityFieldEvent.php b/src/Events/ReplicateEntityFieldEvent.php
index 6b42383..e555a68 100644
--- a/src/Events/ReplicateEntityFieldEvent.php
+++ b/src/Events/ReplicateEntityFieldEvent.php
@@ -5,6 +5,9 @@ namespace Drupal\replicate\Events;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 
+/**
+ *
+ */
 class ReplicateEntityFieldEvent extends ReplicateEventBase {
 
   /**
@@ -28,7 +31,7 @@ class ReplicateEntityFieldEvent extends ReplicateEventBase {
   }
 
   /**
-   * @return FieldItemListInterface
+   * @return \Drupal\Core\Field\FieldItemListInterface
    */
   public function getFieldItemList() {
     return $this->fieldItemList;
diff --git a/src/Events/ReplicateEventBase.php b/src/Events/ReplicateEventBase.php
index 92739dc..a7c0167 100644
--- a/src/Events/ReplicateEventBase.php
+++ b/src/Events/ReplicateEventBase.php
@@ -5,6 +5,9 @@ namespace Drupal\replicate\Events;
 use Drupal\Core\Entity\EntityInterface;
 use Symfony\Component\EventDispatcher\Event;
 
+/**
+ *
+ */
 abstract class ReplicateEventBase extends Event {
 
   /**
@@ -12,6 +15,9 @@ abstract class ReplicateEventBase extends Event {
    */
   protected $entity;
 
+  /**
+   *
+   */
   public function __construct(EntityInterface $entity) {
     $this->entity = $entity;
   }
diff --git a/src/Events/ReplicatorEvents.php b/src/Events/ReplicatorEvents.php
index cb5209a..4b1106a 100644
--- a/src/Events/ReplicatorEvents.php
+++ b/src/Events/ReplicatorEvents.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\replicate\Events;
 
+/**
+ *
+ */
 final class ReplicatorEvents {
 
   /**
@@ -23,6 +26,9 @@ final class ReplicatorEvents {
     return 'replicate__entity__' . $entity_type_id;
   }
 
+  /**
+   *
+   */
   public static function replicateEntityField($field_type) {
     return 'replicate__entity_field__' . $field_type;
   }
diff --git a/src/Replicator.php b/src/Replicator.php
index 54b317e..74f0eb5 100644
--- a/src/Replicator.php
+++ b/src/Replicator.php
@@ -52,7 +52,6 @@ class Replicator {
     $this->eventDispatcher = $event_dispatcher;
   }
 
-
   /**
    * Replicate a entity by entity type ID and entity ID and save it.
    *
@@ -139,7 +138,7 @@ class Replicator {
       $this->eventDispatcher->dispatch(ReplicatorEvents::replicateEntityEvent($entity->getEntityTypeId()), $event);
 
       if ($clone instanceof FieldableEntityInterface) {
-        /** @var FieldableEntityInterface $clone */
+        /** @var \Drupal\Core\Entity\FieldableEntityInterface $clone */
         $this->dispatchEventCloneEntityFields($clone);
       }
 
@@ -185,7 +184,7 @@ class Replicator {
       // @todo Can this ever happen? The interface only assures EntityInterface.
       throw new FieldException($this->t('Trying to clone into non fieldable Entity.'));
     }
-    /** @var FieldableEntityInterface $entity */
+    /** @var \Drupal\Core\Entity\FieldableEntityInterface $entity */
 
     $violations = $target_field->validate();
     if ($violations->count()) {
