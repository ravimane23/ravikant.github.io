diff --git a/js/jquery.tableSort.js b/js/jquery.tableSort.js
index 601d46c..19271bd 100644
--- a/js/jquery.tableSort.js
+++ b/js/jquery.tableSort.js
@@ -9,203 +9,205 @@
 =============================== */
 
 
-jQuery.fn.sortTable = function(params) {
-
-
-	/*-----------
-	| STOP right now if anim already in progress
-	-----------*/
-
-	if ($(this).find(':animated').length > 0) return;
-	
-	/*-----------
-	| VALIDATE TABLE & PARAMS
-	|	- if no col to sort on passed, complain and return
-	|	- if table doesn't contain requested col, complain and return
-	| If !sortType or invalid sortType, assume ascii sort
-	-----------*/
-	
-	var error = null;
-	var complain = null;
-	if (!params.onCol) { error = "No column specified to search on"; complain = true; }
-	else if ($(this).find('td:nth-child('+params.onCol+')').length == 0) { error = "The requested column wasn't found in the table"; complain = true; }
-	if (error) { if (complain) alert(error); return; }
-	if (!params.sortType || params.sortType != 'numeric') params.sortType = 'ascii';
-
-
-	/*-----------
-	| PREP
-	| 	- declare array to store the contents of each <td>, or, if sorting on regexp, the pattern match of the regexp in each <td>
-	| 	- Give the <table> position: relative to aid animation
-	| 	- Mark the col we're sorting on with an identifier class
-	-----------*/
-	
-	var valuesToSort = [];
-	$(this).css('position', 'relative');
-	var doneAnimating = 0;
-	var tdSelectorText = 'td'+(!params.onCol ? '' : ':nth-child('+params.onCol+')');
-	$(this).find('td:nth-child('+params.onCol+')').addClass('sortOnThisCol');
-	var thiss = this;
-
-
-	/*-----------
-	| Iterate over table and. For each:
-	| 	- append its content / regexp match (see above) to valuesToSort[]
-	| 	- create a new <div>, give it position: absolute and copy over the <td>'s content into it
-	| 	- fix the <td>'s width/height to its offset width/height so that, when we remove its html, it won't change shape
-	|	- clear the <td>'s content
-	| 	- clear the <td>'s content
-	| There is no visual effect in this. But it means each <td>'s content is now 'animatable', since it's position: absolute.
-	-----------*/	
-	
-	var counter = 0;
-	$(this).find('td').each(function() {
-		if ($(this).is('.sortOnThisCol') || (!params.onCol && !params.keepRelationships)) {
-			var valForSort = !params.child ? $(this).text() : (params.child != 'input' ? $(this).find(params.child).text() : $(this).find(params.child).val());
-			if (params.regexp) {
-				valForSort = valForSort.match(new RegExp(params.regexp))[!params.regexpIndex ? 0 : params.regexpIndex];
-			}
-			valuesToSort.push(valForSort);
-		}
-		var thisTDHTMLHolder = document.createElement('div');
-		with($(thisTDHTMLHolder)) {
-			html($(this).html());
-			if (params.child && params.child == 'input') html(html().replace(/<input /, "<input value='"+$(this).find(params.child).val()+"'", html()));
-			css({position: 'relative', left: 0, top: 0});
-		}
-		$(this).html('');
-		$(this).append(thisTDHTMLHolder);
-		counter++;
-	});
-	
-	
-	/*-----------
-	| Sort values array.
-	|	- Sort (either simply, on ascii, or numeric if sortNumeric == true)
-	|	- If descending == true, reverse after sort
-	-----------*/
-
-	params.sortType == 'numeric' ? valuesToSort.sort(function(a, b) { return (a.replace(/[^\d\.]/g, '', a)-b.replace(/[^\d\.]/g, '', b)); }) : valuesToSort.sort();
-	if (params.sortDesc) {
-		valuesToSort_tempCopy = [];
-		for(var u=valuesToSort.length; u--; u>=0) valuesToSort_tempCopy.push(valuesToSort[u]);
-		valuesToSort = valuesToSort_tempCopy;
-		delete(valuesToSort_tempCopy)
-	}
-	
-
-	
-	/*-----------
-	| Now, for each:
-	-----------*/
-	
-	for(var k in valuesToSort) {
-		
-		//establish current <td> relating to this value of the array
-		var currTD = $($(this).find(tdSelectorText).filter(function() {
-			return (
-				(
-					!params.regexp
-					&&
-					(
-						(
-							params.child
-							&&
-							(
-								(
-									params.child != 'input'
-									&&
-									valuesToSort[k] == $(this).find(params.child).text()
-								)
-								||
-								params.child == 'input'
-								&&
-								valuesToSort[k] == $(this).find(params.child).val()
-							)
-						)
-						||
-						(
-							!params.child
-							&&
-							valuesToSort[k] == $(this).children('div').html()
-						)
-					)
-				)
-				||
-				(
-					params.regexp
-					&&
-					$(this).children('div').html().match(new RegExp(params.regexp))[!params.regexpIndex ? 0 : params.regexpIndex] == valuesToSort[k]
-				)
-			)
-			&&
-			!$(this).hasClass('tableSort_TDRepopulated');
-		}).get(0));
-		
-		//give current <td> a class to mark it as having been used, so we don't get confused with duplicate values
-		currTD.addClass('tableSort_TDRepopulated');
-		
-		//establish target <td> for this value and store as a node reference on this <td>
-		var targetTD = $($(this).find(tdSelectorText).get(k));
-		currTD.get(0).toTD = targetTD;
-		
-		//if we're sorting on a particular column and maintaining relationships, also give the other <td>s in rows a node reference
-		//denoting ITS target, so they move with their lead siibling
-		if (params.keepRelationships) {
-			var counter = 0;
-			$(currTD).parent().children('td').each(function() {
-				$(this).get(0).toTD = $(targetTD.parent().children().get(counter));
-				counter++;
-			});
-		}
-		
-		//establish current relative positions for the current and target <td>s and use this to calculate how far each <div> needs to move
-		var currPos = currTD.position();
-		var targetPos = targetTD.position();
-		var moveBy_top = targetPos.top - currPos.top;
-		
-		//invert values if going backwards/upwards
-		if (targetPos.top > currPos.top) moveBy_top = Math.abs(moveBy_top);
-		
-		/*-----------
-		| ANIMATE
-		| 	- work out what to animate on.
-		| 		- if !keepRelationships, animate only <td>s in the col we're sorting on (identified by .sortOnThisCol)
-		| 		- if keepRelationships, animate all cols but <td>s that aren't .sortOnThisCol follow lead sibiling with .sortOnThisCol
-		| 	- run animation. On callback, update each <td> with content of <div> that just moved into it and remove <div>s
-		|	- If noAnim, we'll still run aniamte() but give it a low duration so it appears instant
-		-----------*/		
-		
-		var animateOn = params.keepRelationships ? currTD.add(currTD.siblings()) : currTD;
-		var done = 0;
-		animateOn.children('div').animate({top: moveBy_top}, !params.noAnim ? 500 : 0, null, function() {
-			if ($(this).parent().is('.sortOnThisCol') || !params.keepRelationships) {
-				done++;
-				if (done == valuesToSort.length-1) thiss.tableSort_cleanUp();
-			}
-		});
-		
-	}
-		
+jQuery.fn.sortTable = function (params) {
+
+    /*-----------
+    | STOP right now if anim already in progress
+    -----------*/
+
+    if ($(this).find(':animated').length > 0) { return;
+    }
+
+    /*-----------
+    | VALIDATE TABLE & PARAMS
+    |    - if no col to sort on passed, complain and return
+    |    - if table doesn't contain requested col, complain and return
+    | If !sortType or invalid sortType, assume ascii sort
+    -----------*/
+
+    var error = null;
+    var complain = null;
+    if (!params.onCol) { error = "No column specified to search on"; complain = true; }
+    else if ($(this).find('td:nth-child(' + params.onCol + ')').length == 0) { error = "The requested column wasn't found in the table"; complain = true; }
+    if (error) { if (complain) { alert(error);
+    } return; }
+    if (!params.sortType || params.sortType != 'numeric') { params.sortType = 'ascii';
+    }
+
+    /*-----------
+    | PREP
+    |     - declare array to store the contents of each <td>, or, if sorting on regexp, the pattern match of the regexp in each <td>
+    |     - Give the <table> position: relative to aid animation
+    |     - Mark the col we're sorting on with an identifier class
+    -----------*/
+
+    var valuesToSort = [];
+    $(this).css('position', 'relative');
+    var doneAnimating = 0;
+    var tdSelectorText = 'td' + (!params.onCol ? '' : ':nth-child(' + params.onCol + ')');
+    $(this).find('td:nth-child(' + params.onCol + ')').addClass('sortOnThisCol');
+    var thiss = this;
+
+    /*-----------
+    | Iterate over table and. For each:
+    |     - append its content / regexp match (see above) to valuesToSort[]
+    |     - create a new <div>, give it position: absolute and copy over the <td>'s content into it
+    |     - fix the <td>'s width/height to its offset width/height so that, when we remove its html, it won't change shape
+    |    - clear the <td>'s content
+    |     - clear the <td>'s content
+    | There is no visual effect in this. But it means each <td>'s content is now 'animatable', since it's position: absolute.
+    -----------*/
+
+    var counter = 0;
+    $(this).find('td').each(function () {
+        if ($(this).is('.sortOnThisCol') || (!params.onCol && !params.keepRelationships)) {
+            var valForSort = !params.child ? $(this).text() : (params.child != 'input' ? $(this).find(params.child).text() : $(this).find(params.child).val());
+            if (params.regexp) {
+                valForSort = valForSort.match(new RegExp(params.regexp))[!params.regexpIndex ? 0 : params.regexpIndex];
+            }
+            valuesToSort.push(valForSort);
+        }
+        var thisTDHTMLHolder = document.createElement('div');
+        with($(thisTDHTMLHolder)) {
+            html($(this).html());
+            if (params.child && params.child == 'input') { html(html().replace(/<input /, "<input value='" + $(this).find(params.child).val() + "'", html()));
+            }
+            css({position: 'relative', left: 0, top: 0});
+        }
+        $(this).html('');
+        $(this).append(thisTDHTMLHolder);
+        counter++;
+    });
+
+    /*-----------
+    | Sort values array.
+    |    - Sort (either simply, on ascii, or numeric if sortNumeric == true)
+    |    - If descending == true, reverse after sort
+    -----------*/
+
+    params.sortType == 'numeric' ? valuesToSort.sort(function (a, b) { return (a.replace(/[^\d\.]/g, '', a) - b.replace(/[^\d\.]/g, '', b)); }) : valuesToSort.sort();
+    if (params.sortDesc) {
+        valuesToSort_tempCopy = [];
+        for(var u = valuesToSort.length; u--; u >= 0) { valuesToSort_tempCopy.push(valuesToSort[u]);
+        }
+        valuesToSort = valuesToSort_tempCopy;
+        delete(valuesToSort_tempCopy)
+    }
+
+    /*-----------
+    | Now, for each:
+    -----------*/
+
+    for(var k in valuesToSort) {
+
+        //establish current <td> relating to this value of the array
+        var currTD = $($(this).find(tdSelectorText).filter(function () {
+            return (
+                (
+                    !params.regexp
+                    &&
+                    (
+                        (
+                            params.child
+                            &&
+                            (
+                                (
+                                    params.child != 'input'
+                                    &&
+                                    valuesToSort[k] == $(this).find(params.child).text()
+                                )
+                                ||
+                                params.child == 'input'
+                                &&
+                                valuesToSort[k] == $(this).find(params.child).val()
+                            )
+                        )
+                        ||
+                        (
+                            !params.child
+                            &&
+                            valuesToSort[k] == $(this).children('div').html()
+                        )
+                    )
+                )
+                ||
+                (
+                    params.regexp
+                    &&
+                    $(this).children('div').html().match(new RegExp(params.regexp))[!params.regexpIndex ? 0 : params.regexpIndex] == valuesToSort[k]
+                )
+            )
+            &&
+            !$(this).hasClass('tableSort_TDRepopulated');
+        }).get(0));
+
+        //give current <td> a class to mark it as having been used, so we don't get confused with duplicate values
+        currTD.addClass('tableSort_TDRepopulated');
+
+        //establish target <td> for this value and store as a node reference on this <td>
+        var targetTD = $($(this).find(tdSelectorText).get(k));
+        currTD.get(0).toTD = targetTD;
+
+        //if we're sorting on a particular column and maintaining relationships, also give the other <td>s in rows a node reference
+        //denoting ITS target, so they move with their lead siibling
+        if (params.keepRelationships) {
+            var counter = 0;
+            $(currTD).parent().children('td').each(function () {
+                $(this).get(0).toTD = $(targetTD.parent().children().get(counter));
+                counter++;
+            });
+        }
+
+        //establish current relative positions for the current and target <td>s and use this to calculate how far each <div> needs to move
+        var currPos = currTD.position();
+        var targetPos = targetTD.position();
+        var moveBy_top = targetPos.top - currPos.top;
+
+        //invert values if going backwards/upwards
+        if (targetPos.top > currPos.top) { moveBy_top = Math.abs(moveBy_top);
+        }
+
+        /*-----------
+        | ANIMATE
+        |     - work out what to animate on.
+        |         - if !keepRelationships, animate only <td>s in the col we're sorting on (identified by .sortOnThisCol)
+        |         - if keepRelationships, animate all cols but <td>s that aren't .sortOnThisCol follow lead sibiling with .sortOnThisCol
+        |     - run animation. On callback, update each <td> with content of <div> that just moved into it and remove <div>s
+        |    - If noAnim, we'll still run aniamte() but give it a low duration so it appears instant
+        -----------*/
+
+        var animateOn = params.keepRelationships ? currTD.add(currTD.siblings()) : currTD;
+        var done = 0;
+        animateOn.children('div').animate({top: moveBy_top}, !params.noAnim ? 500 : 0, null, function () {
+            if ($(this).parent().is('.sortOnThisCol') || !params.keepRelationships) {
+                done++;
+                if (done == valuesToSort.length - 1) { thiss.tableSort_cleanUp();
+                }
+            }
+        });
+
+    }
+
 };
 
 
-jQuery.fn.tableSort_cleanUp = function() {
-
-	/*-----------
-	| AFTER ANIM
-	| 	- assign each <td> its new content as property of it (DON'T populate it yet - this <td> may still need to be read by
-	|	  other <td>s' toTD node references
-	|	- once new contents for each <td> gathered, populate
-	|	- remove some identifier classes and properties
-	-----------*/
-	$(this).find('td').each(function() {
-		if($(this).get(0).toTD) $($(this).get(0).toTD).get(0).newHTML = $(this).children('div').html();
-	});
-	$(this).find('td').each(function() { $(this).html($(this).get(0).newHTML); });
-	$('td.tableSort_TDRepopulated').removeClass('tableSort_TDRepopulated');
-	$(this).find('.sortOnThisCol').removeClass('sortOnThisCol');
-	$(this).find('td[newHTML]').attr('newHTML', '');
-	$(this).find('td[toTD]').attr('toTD', '');
-	
-};
\ No newline at end of file
+jQuery.fn.tableSort_cleanUp = function () {
+
+    /*-----------
+    | AFTER ANIM
+    |     - assign each <td> its new content as property of it (DON'T populate it yet - this <td> may still need to be read by
+    |      other <td>s' toTD node references
+    |    - once new contents for each <td> gathered, populate
+    |    - remove some identifier classes and properties
+    -----------*/
+    $(this).find('td').each(function () {
+        if($(this).get(0).toTD) { $($(this).get(0).toTD).get(0).newHTML = $(this).children('div').html();
+        }
+    });
+    $(this).find('td').each(function () { $(this).html($(this).get(0).newHTML); });
+    $('td.tableSort_TDRepopulated').removeClass('tableSort_TDRepopulated');
+    $(this).find('.sortOnThisCol').removeClass('sortOnThisCol');
+    $(this).find('td[newHTML]').attr('newHTML', '');
+    $(this).find('td[toTD]').attr('toTD', '');
+
+};
diff --git a/js/jquery.tablesorter.js b/js/jquery.tablesorter.js
index a14d071..ac22d92 100644
--- a/js/jquery.tablesorter.js
+++ b/js/jquery.tablesorter.js
@@ -1,103 +1,103 @@
 /*
- * 
+ *
  * TableSorter 2.0 - Client-side table sorting with ease!
  * Version 2.0.5b
  * @requires jQuery v1.2.3
- * 
+ *
  * Copyright (c) 2007 Christian Bach
  * Examples and docs at: http://tablesorter.com
  * Dual licensed under the MIT and GPL licenses:
  * http://www.opensource.org/licenses/mit-license.php
  * http://www.gnu.org/licenses/gpl.html
- * 
+ *
  */
 /**
- * 
+ *
  * @description Create a sortable table with multi-column sorting capabilitys
- * 
+ *
  * @example $('table').tablesorter();
  * @desc Create a simple tablesorter interface.
- * 
+ *
  * @example $('table').tablesorter({ sortList:[[0,0],[1,0]] });
  * @desc Create a tablesorter interface and sort on the first and secound column column headers.
- * 
+ *
  * @example $('table').tablesorter({ headers: { 0: { sorter: false}, 1: {sorter: false} } });
- *          
+ *
  * @desc Create a tablesorter interface and disableing the first and second  column headers.
- *      
- * 
+ *
+ *
  * @example $('table').tablesorter({ headers: { 0: {sorter:"integer"}, 1: {sorter:"currency"} } });
- * 
+ *
  * @desc Create a tablesorter interface and set a column parser for the first
  *       and second column.
- * 
- * 
+ *
+ *
  * @param Object
  *            settings An object literal containing key/value pairs to provide
  *            optional settings.
- * 
- * 
+ *
+ *
  * @option String cssHeader (optional) A string of the class name to be appended
  *         to sortable tr elements in the thead of the table. Default value:
  *         "header"
- * 
+ *
  * @option String cssAsc (optional) A string of the class name to be appended to
  *         sortable tr elements in the thead on a ascending sort. Default value:
  *         "headerSortUp"
- * 
+ *
  * @option String cssDesc (optional) A string of the class name to be appended
  *         to sortable tr elements in the thead on a descending sort. Default
  *         value: "headerSortDown"
- * 
+ *
  * @option String sortInitialOrder (optional) A string of the inital sorting
  *         order can be asc or desc. Default value: "asc"
- * 
+ *
  * @option String sortMultisortKey (optional) A string of the multi-column sort
  *         key. Default value: "shiftKey"
- * 
+ *
  * @option String textExtraction (optional) A string of the text-extraction
  *         method to use. For complex html structures inside td cell set this
  *         option to "complex", on large tables the complex option can be slow.
  *         Default value: "simple"
- * 
+ *
  * @option Object headers (optional) An array containing the forces sorting
  *         rules. This option let's you specify a default sorting rule. Default
  *         value: null
- * 
+ *
  * @option Array sortList (optional) An array containing the forces sorting
  *         rules. This option let's you specify a default sorting rule. Default
  *         value: null
- * 
+ *
  * @option Array sortForce (optional) An array containing forced sorting rules.
  *         This option let's you specify a default sorting rule, which is
  *         prepended to user-selected rules. Default value: null
- * 
+ *
  * @option Boolean sortLocaleCompare (optional) Boolean flag indicating whatever
  *         to use String.localeCampare method or not. Default set to true.
- * 
- * 
+ *
+ *
  * @option Array sortAppend (optional) An array containing forced sorting rules.
  *         This option let's you specify a default sorting rule, which is
  *         appended to user-selected rules. Default value: null
- * 
+ *
  * @option Boolean widthFixed (optional) Boolean flag indicating if tablesorter
  *         should apply fixed widths to the table columns. This is usefull when
  *         using the pager companion plugin. This options requires the dimension
  *         jquery plugin. Default value: false
- * 
+ *
  * @option Boolean cancelSelection (optional) Boolean flag indicating if
  *         tablesorter should cancel selection of the table headers text.
  *         Default value: true
- * 
+ *
  * @option Boolean debug (optional) Boolean flag indicating if tablesorter
  *         should display debuging information usefull for development.
- * 
+ *
  * @type jQuery
- * 
+ *
  * @name tablesorter
- * 
+ *
  * @cat Plugins/Tablesorter
- * 
+ *
  * @author Christian Bach/christian.bach@polyester.se
  */
 
@@ -158,7 +158,8 @@
                     var parsersDebug = "";
                 }
 
-                if (table.tBodies.length == 0) return; // In the case of empty tables
+                if (table.tBodies.length == 0) { return; // In the case of empty tables
+                }
                 var rows = table.tBodies[0].rows;
 
                 if (rows[0]) {
@@ -295,9 +296,11 @@
 
                 var text = "";
 
-                if (!node) return "";
+                if (!node) { return "";
+                }
 
-                if (!config.supportsTextContent) config.supportsTextContent = node.textContent || false;
+                if (!config.supportsTextContent) { config.supportsTextContent = node.textContent || false;
+                }
 
                 if (config.textExtraction == "simple") {
                     if (config.supportsTextContent) {
@@ -333,7 +336,6 @@
                     tableBody = $(table.tBodies[0]),
                     rows = [];
 
-
                 for (var i = 0; i < totalRows; i++) {
                     var pos = n[i][checkCell];
 
@@ -347,12 +349,10 @@
                             tableBody[0].appendChild(r[pos][j]);
                         }
 
-                        // 
+                        //
                     }
                 }
 
-
-
                 if (table.config.appender) {
 
                     table.config.appender(table, rows);
@@ -381,7 +381,7 @@
                 }
 
                 var meta = ($.metadata) ? true : false;
-                
+
                 var header_index = computeTableHeaderCellIndexes(table);
 
                 $tableHeaders = $(table.config.selectorHeaders, table).each(function (index) {
@@ -389,16 +389,18 @@
                     this.column = header_index[this.parentNode.rowIndex + "-" + this.cellIndex];
                     // this.column = index;
                     this.order = formatSortingOrder(table.config.sortInitialOrder);
-                    
-          
+
           this.count = this.order;
 
-                    if (checkHeaderMetadata(this) || checkHeaderOptions(table, index)) this.sortDisabled = true;
-          if (checkHeaderOptionsSortingLocked(table, index)) this.order = this.lockedOrder = checkHeaderOptionsSortingLocked(table, index);
+                    if (checkHeaderMetadata(this) || checkHeaderOptions(table, index)) { this.sortDisabled = true;
+                    }
+          if (checkHeaderOptionsSortingLocked(table, index)) { this.order = this.lockedOrder = checkHeaderOptionsSortingLocked(table, index);
+          }
 
                     if (!this.sortDisabled) {
                         var $th = $(this).addClass(table.config.cssHeader);
-                        if (table.config.onRenderHeader) table.config.onRenderHeader.apply($th);
+                        if (table.config.onRenderHeader) { table.config.onRenderHeader.apply($th);
+                        }
                     }
 
                     // add cell to headerList
@@ -418,7 +420,6 @@
             // http://www.javascripttoolbox.com/lib/table/examples.php
             // http://www.javascripttoolbox.com/temp/table_cellindex.html
 
-
             function computeTableHeaderCellIndexes(t) {
                 var matrix = [];
                 var lookup = {};
@@ -493,12 +494,13 @@
                 };
                 return false;
             }
-      
+
        function checkHeaderOptionsSortingLocked(table, i) {
-                if ((table.config.headers[i]) && (table.config.headers[i].lockedOrder)) return table.config.headers[i].lockedOrder;
+                if ((table.config.headers[i]) && (table.config.headers[i].lockedOrder)) { return table.config.headers[i].lockedOrder;
+                }
                 return false;
             }
-      
+
             function applyWidget(table) {
                 var c = table.config.widgets;
                 var l = c.length;
@@ -664,12 +666,14 @@
             };
 
             function sortText(a, b) {
-                if (table.config.sortLocaleCompare) return a.localeCompare(b);
+                if (table.config.sortLocaleCompare) { return a.localeCompare(b);
+                }
                 return ((a < b) ? -1 : ((a > b) ? 1 : 0));
             };
 
             function sortTextDesc(a, b) {
-                if (table.config.sortLocaleCompare) return b.localeCompare(a);
+                if (table.config.sortLocaleCompare) { return b.localeCompare(a);
+                }
                 return ((b < a) ? -1 : ((b > a) ? 1 : 0));
             };
 
@@ -687,7 +691,8 @@
             this.construct = function (settings) {
                 return this.each(function () {
                     // if no thead or tbody quit.
-                    if (!this.tHead || !this.tBodies) return;
+                    if (!this.tHead || !this.tBodies) { return;
+                    }
                     // declare
                     var $this, $document, $headers, cache, config, shiftDown = 0,
                         sortOrder;
@@ -712,7 +717,6 @@
                     // apply event handling to headers
                     // this is to big, perhaps break it out?
                     $headers.click(
-
                     function (e) {
                         var totalRows = ($this[0].tBodies[0] && $this[0].tBodies[0].rows.length) || 0;
                         if (!this.sortDisabled && totalRows > 0) {
@@ -726,8 +730,9 @@
                             // get current column sort order
                             this.order = this.count++ % 2;
               // always sort on the locked order.
-              if(this.lockedOrder) this.order = this.lockedOrder;
-              
+              if(this.lockedOrder) { this.order = this.lockedOrder;
+              }
+
               // user only whants to sort on one
                             // column
                             if (!e[config.sortMultiSortKey]) {
@@ -861,8 +866,9 @@
             this.clearTableBody = function (table) {
                 if ($.browser.msie) {
                     function empty() {
-                        while (this.firstChild)
+                        while (this.firstChild) {
                         this.removeChild(this.firstChild);
+                        }
                     }
                     empty.apply(table.tBodies[0]);
                 } else {
@@ -1017,7 +1023,8 @@
                 $tr = $(this);
                 // style children rows the same way the parent
                 // row was styled
-                if (!$tr.hasClass(table.config.cssChildRow)) row++;
+                if (!$tr.hasClass(table.config.cssChildRow)) { row++;
+                }
                 odd = (row % 2 == 0);
                 $tr.removeClass(
                 table.config.widgetZebra.css[odd ? 0 : 1]).addClass(
diff --git a/js/ultimate_cron.nodejs.js b/js/ultimate_cron.nodejs.js
index 683b8b3..1172c5b 100644
--- a/js/ultimate_cron.nodejs.js
+++ b/js/ultimate_cron.nodejs.js
@@ -73,4 +73,3 @@
   }, 1000);
 
 }(jQuery));
-
diff --git a/src/Controller/JobController.php b/src/Controller/JobController.php
index 3201631..28ea808 100644
--- a/src/Controller/JobController.php
+++ b/src/Controller/JobController.php
@@ -3,7 +3,6 @@
 namespace Drupal\ultimate_cron\Controller;
 
 use Drupal\Core\Controller\ControllerBase;
-use Drupal\Core\Logger\RfcLogLevel;
 use Drupal\ultimate_cron\Entity\CronJob;
 
 /**
@@ -51,13 +50,13 @@ class JobController extends ControllerBase {
    */
   public function showLogs(CronJob $ultimate_cron_job) {
 
-    $header = array(
+    $header = [
       $this->t('Severity'),
       $this->t('Start Time'),
       $this->t('End Time'),
       $this->t('Message'),
       $this->t('Duration'),
-    );
+    ];
 
     $build['ultimate_cron_job_logs_table'] = [
       '#type' => 'table',
diff --git a/src/CronJobAccessControlHandler.php b/src/CronJobAccessControlHandler.php
index 3f0015f..b225f43 100644
--- a/src/CronJobAccessControlHandler.php
+++ b/src/CronJobAccessControlHandler.php
@@ -30,4 +30,5 @@ class CronJobAccessControlHandler extends EntityAccessControlHandler {
     }
     return parent::checkAccess($entity, $operation, $account);
   }
+
 }
diff --git a/src/CronJobDiscovery.php b/src/CronJobDiscovery.php
index 8944966..d0ec3d8 100644
--- a/src/CronJobDiscovery.php
+++ b/src/CronJobDiscovery.php
@@ -85,7 +85,7 @@ class CronJobDiscovery {
             'configuration' => [
               'rules' => ['* * * * *'],
             ],
-          ]
+          ],
         ];
 
         $job = CronJob::create($values);
@@ -105,12 +105,12 @@ class CronJobDiscovery {
   protected function ensureCronJobExists($info, $id) {
     $job = NULL;
     if (!CronJob::load($id)) {
-      $values = array(
+      $values = [
         'title' => $this->getJobTitle($id),
         'id' => $id,
         'module' => $info['module'],
         'callback' => $info['callback'],
-      );
+      ];
 
       $job = CronJob::create($values);
 
@@ -128,7 +128,7 @@ class CronJobDiscovery {
    *   The default job title.
    */
   protected function getJobTitle($id) {
-    $titles = array();
+    $titles = [];
 
     $titles['comment_cron'] = t('Store the maximum possible comments per thread');
     $titles['dblog_cron'] = t('Remove expired log messages and flood control events');
@@ -157,7 +157,7 @@ class CronJobDiscovery {
    *   All hook definitions available.
    */
   protected function getHooks() {
-    $hooks = array();
+    $hooks = [];
     // Generate list of jobs provided by modules.
     $modules = array_keys($this->moduleHandler->getModuleList());
     foreach ($modules as $module) {
@@ -177,20 +177,20 @@ class CronJobDiscovery {
    *   Hook definitions for the specified module.
    */
   protected function getModuleHooks($module) {
-    $items = array();
+    $items = [];
 
     // Add hook_cron() if applicable.
     if ($this->moduleHandler->implementsHook($module, 'cron')) {
       $info = $this->moduleExtensionList->getExtensionInfo($module);
       $callback = "{$module}_cron";
-      $items[$callback] = array(
+      $items[$callback] = [
         'module' => $module,
-        'title' =>  isset($titles[$callback]) ? $titles[$callback] : 'Default cron handler',
+        'title' => isset($titles[$callback]) ? $titles[$callback] : 'Default cron handler',
         'configure' => empty($info['configure']) ? NULL : $info['configure'],
         'callback' => $callback,
-        'tags' => array(),
+        'tags' => [],
         'pass job argument' => FALSE,
-      );
+      ];
       $items["{$module}_cron"]['tags'][] = 'core';
     }
 
@@ -198,4 +198,3 @@ class CronJobDiscovery {
   }
 
 }
-
diff --git a/src/CronJobInterface.php b/src/CronJobInterface.php
index 7dc4dae..6416bb2 100644
--- a/src/CronJobInterface.php
+++ b/src/CronJobInterface.php
@@ -3,9 +3,10 @@
 namespace Drupal\ultimate_cron;
 
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
-use Drupal\ultimate_cron\Logger\LogEntry;
-use Drupal\ultimate_cron\Logger\LoggerBase;
 
+/**
+ *
+ */
 interface CronJobInterface extends ConfigEntityInterface {
 
   /**
@@ -30,7 +31,7 @@ interface CronJobInterface extends ConfigEntityInterface {
    * @return array
    *   Array of UltimateCronLogEntry objects.
    */
-  public static function loadLatestLogEntries($jobs, $log_types = array(ULTIMATE_CRON_LOG_TYPE_NORMAL));
+  public static function loadLatestLogEntries($jobs, $log_types = [ULTIMATE_CRON_LOG_TYPE_NORMAL]);
 
   /**
    * Get multiple job progresses.
@@ -47,7 +48,7 @@ interface CronJobInterface extends ConfigEntityInterface {
    * Gets the title of the created cron job.
    *
    * @return mixed
-   *  Cron job title.
+   *   Cron job title.
    */
   public function getTitle();
 
@@ -55,7 +56,7 @@ interface CronJobInterface extends ConfigEntityInterface {
    * Gets the cron job callback string.
    *
    * @return string
-   *  Callback string.
+   *   Callback string.
    */
   public function getCallback();
 
@@ -63,7 +64,7 @@ interface CronJobInterface extends ConfigEntityInterface {
    * Gets the cron job module name used for the callback string.
    *
    * @return string
-   *  Module name.
+   *   Module name.
    */
   public function getModule();
 
@@ -71,7 +72,7 @@ interface CronJobInterface extends ConfigEntityInterface {
    * Gets scheduler array which holds info about the scheduler settings.
    *
    * @return array
-   *  Scheduler settings
+   *   Scheduler settings
    */
   public function getSchedulerId();
 
@@ -79,7 +80,7 @@ interface CronJobInterface extends ConfigEntityInterface {
    * Gets launcher array which holds info about the launcher settings.
    *
    * @return array
-   *  Launcher settings
+   *   Launcher settings
    */
   public function getLauncherId();
 
@@ -87,7 +88,7 @@ interface CronJobInterface extends ConfigEntityInterface {
    * Gets logger array which holds info about the logger settings.
    *
    * @return array
-   *  Logger settings
+   *   Logger settings
    */
   public function getLoggerId();
 
@@ -95,8 +96,9 @@ interface CronJobInterface extends ConfigEntityInterface {
    * Sets the title of the created cron job.
    *
    * @param $title
+   *
    * @return mixed
-   *  Cron job title.
+   *   Cron job title.
    */
   public function setTitle($title);
 
@@ -104,8 +106,9 @@ interface CronJobInterface extends ConfigEntityInterface {
    * Sets the cron job callback string.
    *
    * @param $callback
+   *
    * @return string
-   *  Callback string.
+   *   Callback string.
    */
   public function setCallback($callback);
 
@@ -113,8 +116,9 @@ interface CronJobInterface extends ConfigEntityInterface {
    * Sets the cron job module name used for the callback string.
    *
    * @param $module
+   *
    * @return string
-   *  Module name.
+   *   Module name.
    */
   public function setModule($module);
 
@@ -122,8 +126,9 @@ interface CronJobInterface extends ConfigEntityInterface {
    * Sets scheduler array which holds info about the scheduler settings.
    *
    * @param $scheduler_id
+   *
    * @return array
-   *  Scheduler settings
+   *   Scheduler settings
    */
   public function setSchedulerId($scheduler_id);
 
@@ -131,8 +136,9 @@ interface CronJobInterface extends ConfigEntityInterface {
    * Sets launcher array which holds info about the launcher settings.
    *
    * @param $launcher_id
+   *
    * @return array
-   *  Launcher settings
+   *   Launcher settings
    */
   public function setLauncherId($launcher_id);
 
@@ -140,8 +146,9 @@ interface CronJobInterface extends ConfigEntityInterface {
    * Sets logger array which holds info about the logger settings.
    *
    * @param $logger_id
+   *
    * @return array
-   *  Logger settings
+   *   Logger settings
    */
   public function setLoggerId($logger_id);
 
@@ -208,7 +215,7 @@ interface CronJobInterface extends ConfigEntityInterface {
    *
    * @param string $lock_id
    *   The lock id to unlock.
-   * @param boolean $manual
+   * @param bool $manual
    *   Whether or not this is a manual unlock.
    */
   public function unlock($lock_id = NULL, $manual = FALSE);
@@ -233,7 +240,7 @@ interface CronJobInterface extends ConfigEntityInterface {
   /**
    * Get log entries.
    *
-   * @param integer $limit
+   * @param int $limit
    *   (optional) Number of log entries per page.
    *
    * @return array
@@ -247,7 +254,7 @@ interface CronJobInterface extends ConfigEntityInterface {
    * @param string $lock_id
    *   The lock id of the log entry.
    *
-   * @return LogEntry
+   * @return \Drupal\ultimate_cron\Logger\LogEntry
    *   The log entry.
    */
   public function loadLogEntry($lock_id);
@@ -255,10 +262,10 @@ interface CronJobInterface extends ConfigEntityInterface {
   /**
    * Load latest log.
    *
-   * @return LogEntry
+   * @return \Drupal\ultimate_cron\Logger\LogEntry
    *   The latest log entry for this job.
    */
-  public function loadLatestLogEntry($log_types = array(ULTIMATE_CRON_LOG_TYPE_NORMAL));
+  public function loadLatestLogEntry($log_types = [ULTIMATE_CRON_LOG_TYPE_NORMAL]);
 
   /**
    * Start logging.
@@ -279,7 +286,7 @@ interface CronJobInterface extends ConfigEntityInterface {
    * @param string $lock_id
    *   The lock id of the log to resume.
    *
-   * @return LogEntry
+   * @return \Drupal\ultimate_cron\Logger\LogEntry
    *   The log entry object.
    */
   public function resumeLog($lock_id);
diff --git a/src/CronJobListBuilder.php b/src/CronJobListBuilder.php
index ae88b0e..dcf5c4b 100644
--- a/src/CronJobListBuilder.php
+++ b/src/CronJobListBuilder.php
@@ -23,15 +23,16 @@ class CronJobListBuilder extends DraggableListBuilder {
    * {@inheritdoc}
    */
   public function buildHeader() {
-    $header = array();
-    $header['label'] = array('data' => t('Title'));
-    $header['module'] = array('data' => t('Module'));
-    $header['scheduled'] = array('data' => t('Scheduled'));
-    $header['started'] = array('data' => t('Last Run'));
-    $header['duration'] = array('data' => t('Duration'));
-    $header['status'] = array('data' => t('Status'));
+    $header = [];
+    $header['label'] = ['data' => t('Title')];
+    $header['module'] = ['data' => t('Module')];
+    $header['scheduled'] = ['data' => t('Scheduled')];
+    $header['started'] = ['data' => t('Last Run')];
+    $header['duration'] = ['data' => t('Duration')];
+    $header['status'] = ['data' => t('Status')];
     return $header + parent::buildHeader();
   }
+
   /**
    * {@inheritdoc}
    */
@@ -51,12 +52,12 @@ class CronJobListBuilder extends DraggableListBuilder {
     // If the start time is 0, the jobs have never been run.
     $row['started']['#markup'] = $log_entry->start_time ? \Drupal::service('date.formatter')->format($log_entry->start_time, "short") : $this->t('Never');
 
-    // Display duration
+    // Display duration.
     $progress = $entity->isLocked() ? $entity->formatProgress() : '';
     $row['duration'] = [
       '#markup' => '<span class="duration-time" data-src="' . $log_entry->getDuration() . '">' . $log_entry->formatDuration() . '</span> <span class="duration-progress">' . $progress . '</span>',
       '#wrapper_attributes' => ['title' => $log_entry->formatEndTime()],
-     ];
+    ];
 
     if (!$entity->isValid()) {
       $row['status']['#markup'] = $this->t('Missing');
@@ -98,7 +99,7 @@ class CronJobListBuilder extends DraggableListBuilder {
           'title' => t('Run'),
           'weight' => 9,
           'url' => $entity->toUrl('run'),
-        ]
+        ],
       ];
     }
 
diff --git a/src/CronPlugin.php b/src/CronPlugin.php
index 7d98636..1f3dd05 100644
--- a/src/CronPlugin.php
+++ b/src/CronPlugin.php
@@ -1,6 +1,7 @@
 <?php
 
 namespace Drupal\ultimate_cron;
+
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
@@ -16,9 +17,9 @@ use Drupal\Core\Plugin\PluginFormInterface;
  */
 class CronPlugin extends PluginBase implements PluginInspectionInterface, ConfigurableInterface, DependentPluginInterface, PluginFormInterface {
   static public $multiple = FALSE;
-  static public $instances = array();
+  static public $instances = [];
   public $weight = 0;
-  static public $globalOptions = array();
+  static public $globalOptions = [];
 
   /**
    * {@inheritdoc}
@@ -34,14 +35,13 @@ class CronPlugin extends PluginBase implements PluginInspectionInterface, Config
    * @return array
    */
   public static function getPluginTypes() {
-    return array(
+    return [
       'scheduler' => t('Scheduler'),
       'launcher' => t('Launcher'),
-      'logger' => t('Logger')
-    );
+      'logger' => t('Logger'),
+    ];
   }
 
-
   /**
    * {@inheritdoc}
    */
@@ -63,14 +63,14 @@ class CronPlugin extends PluginBase implements PluginInspectionInterface, Config
    * {@inheritdoc}
    */
   public function defaultConfiguration() {
-    return array();
+    return [];
   }
 
   /**
    * {@inheritdoc}
    */
   public function calculateDependencies() {
-    return array();
+    return [];
   }
 
   /**
@@ -84,7 +84,7 @@ class CronPlugin extends PluginBase implements PluginInspectionInterface, Config
    * {@inheritdoc}
    */
   public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
-    return array();
+    return [];
   }
 
   /**
@@ -103,7 +103,7 @@ class CronPlugin extends PluginBase implements PluginInspectionInterface, Config
    * @return mixed
    *   Value of option if any, NULL if not found.
    */
-  static public function getGlobalOption($name) {
+  public static function getGlobalOption($name) {
     return isset(static::$globalOptions[$name]) ? static::$globalOptions[$name] : NULL;
   }
 
@@ -113,7 +113,7 @@ class CronPlugin extends PluginBase implements PluginInspectionInterface, Config
    * @return array
    *   All options currently set, keyed by name.
    */
-  static public function getGlobalOptions() {
+  public static function getGlobalOptions() {
     return static::$globalOptions;
   }
 
@@ -125,7 +125,7 @@ class CronPlugin extends PluginBase implements PluginInspectionInterface, Config
    * @param string $value
    *   The value to give it.
    */
-  static public function setGlobalOption($name, $value) {
+  public static function setGlobalOption($name, $value) {
     static::$globalOptions[$name] = $value;
   }
 
@@ -242,18 +242,18 @@ class CronPlugin extends PluginBase implements PluginInspectionInterface, Config
         if (!$remove_non_fallbacks) {
           if ($element['#type'] == 'radios') {
             $label = $this->settingsLabel($child, $defaults[$child]);
-            $element['#options'] = array(
-              '' => t('Default (@default)', array('@default' => $label)),
-            ) + $element['#options'];
+            $element['#options'] = [
+              '' => t('Default (@default)', ['@default' => $label]),
+            ] + $element['#options'];
           }
           elseif ($element['#type'] == 'select' && empty($element['#multiple'])) {
             $label = $this->settingsLabel($child, $defaults[$child]);
-            $element['#options'] = array(
-              '' => t('Default (@default)', array('@default' => $label)),
-            ) + $element['#options'];
+            $element['#options'] = [
+              '' => t('Default (@default)', ['@default' => $label]),
+            ] + $element['#options'];
           }
           elseif ($defaults[$child] !== '') {
-            $element['#description'] .= ' ' . t('(Blank = @default).', array('@default' => $this->settingsLabel($child, $defaults[$child])));
+            $element['#description'] .= ' ' . t('(Blank = @default).', ['@default' => $this->settingsLabel($child, $defaults[$child])]);
           }
           unset($element['#required']);
         }
diff --git a/src/CronPluginMultiple.php b/src/CronPluginMultiple.php
index ca8f9d5..3d301c8 100644
--- a/src/CronPluginMultiple.php
+++ b/src/CronPluginMultiple.php
@@ -1,32 +1,37 @@
 <?php
 
+use Drupal\ultimate_cron\CronPlugin;
+
 namespace Drupal\ultimate_cron;
 
-class CronPluginMultiple extends \Drupal\ultimate_cron\CronPlugin {
+/**
+ *
+ */
+class CronPluginMultiple extends CronPlugin {
   static public $multiple = TRUE;
 
   /**
    * Default settings form.
    */
-  static public function defaultSettingsForm(&$form, &$form_state, $plugin_info) {
+  public static function defaultSettingsForm(&$form, &$form_state, $plugin_info) {
     $plugin_type = $plugin_info['type'];
     foreach (ultimate_cron_plugin_load_all($plugin_type) as $name => $plugin) {
       if ($plugin->isValid()) {
         $plugins[] = l($plugin->title, "admin/config/system/cron/$plugin_type/$name");
       }
     }
-    $form['available'] = array(
-      '#markup' => theme('item_list', array(
+    $form['available'] = [
+      '#markup' => theme('item_list', [
         'title' => $plugin_info['defaults']['static']['title plural proper'] . ' available',
-        'items' => $plugins
-      ))
-    );
+        'items' => $plugins,
+      ]),
+    ];
   }
 
   /**
    * Job settings form.
    */
-  static public function jobSettingsForm(&$form, &$form_state, $plugin_type, $job) {
+  public static function jobSettingsForm(&$form, &$form_state, $plugin_type, $job) {
     // Check valid plugins.
     $plugins = ultimate_cron_plugin_load_all($plugin_type);
     foreach ($plugins as $name => $plugin) {
@@ -41,14 +46,14 @@ class CronPluginMultiple extends \Drupal\ultimate_cron\CronPlugin {
     }
 
     $weight = 10;
-    $form_state['default_values']['settings'][$plugin_type] = array();
+    $form_state['default_values']['settings'][$plugin_type] = [];
     $form['settings'][$plugin_type]['#tree'] = TRUE;
     foreach ($plugins as $name => $plugin) {
-      $form_state['default_values']['settings'][$plugin_type][$name] = array();
+      $form_state['default_values']['settings'][$plugin_type][$name] = [];
       if (empty($form_state['values']['settings'][$plugin_type][$name])) {
-        $form_state['values']['settings'][$plugin_type][$name] = array();
+        $form_state['values']['settings'][$plugin_type][$name] = [];
       }
-      $form['settings'][$plugin_type][$name] = array(
+      $form['settings'][$plugin_type][$name] = [
         '#title' => $plugin->title,
         '#group' => 'settings_tabs',
         '#type' => 'fieldset',
@@ -57,7 +62,7 @@ class CronPluginMultiple extends \Drupal\ultimate_cron\CronPlugin {
         '#collapsible' => TRUE,
         '#collapsed' => TRUE,
         '#weight' => $weight++,
-      );
+      ];
 
       $defaults = $plugin->getDefaultSettings($job);
 
@@ -82,7 +87,7 @@ class CronPluginMultiple extends \Drupal\ultimate_cron\CronPlugin {
   /**
    * Job settings form validate handler.
    */
-  static public function jobSettingsFormValidate($form, &$form_state, $plugin_type, $job = NULL) {
+  public static function jobSettingsFormValidate($form, &$form_state, $plugin_type, $job = NULL) {
     $plugins = ultimate_cron_plugin_load_all($plugin_type);
     foreach ($plugins as $plugin) {
       if ($plugin->isValid($job)) {
@@ -94,7 +99,7 @@ class CronPluginMultiple extends \Drupal\ultimate_cron\CronPlugin {
   /**
    * Job settings form submit handler.
    */
-  static public function jobSettingsFormSubmit($form, &$form_state, $plugin_type, $job = NULL) {
+  public static function jobSettingsFormSubmit($form, &$form_state, $plugin_type, $job = NULL) {
     $plugins = ultimate_cron_plugin_load_all($plugin_type);
     foreach ($plugins as $name => $plugin) {
       if ($plugin->isValid($job)) {
@@ -103,15 +108,16 @@ class CronPluginMultiple extends \Drupal\ultimate_cron\CronPlugin {
         // Weed out blank values that have fallbacks.
         $elements = & $form['settings'][$plugin_type][$name];
         $values = & $form_state['values']['settings'][$plugin_type][$name];
-        $plugin->cleanForm($elements, $values, array(
+        $plugin->cleanForm($elements, $values, [
           'settings',
           $plugin_type,
-          $name
-        ));
+          $name,
+        ]);
       }
       else {
         unset($form_state['values']['settings'][$plugin_type][$name]);
       }
     }
   }
+
 }
diff --git a/src/CronRule.php b/src/CronRule.php
index 8b0ecab..e94724c 100644
--- a/src/CronRule.php
+++ b/src/CronRule.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\ultimate_cron;
 
+/**
+ *
+ */
 class CronRule {
 
   public $rule = NULL;
@@ -9,17 +12,17 @@ class CronRule {
   public $skew = 0;
 
   public $allow_shorthand = FALSE;
-  private static $ranges = array(
-    'minutes' => array(0, 59),
-    'hours' => array(0, 23),
-    'days' => array(1, 31),
-    'months' => array(1, 12),
-    'weekdays' => array(0, 6),
-  );
+  private static $ranges = [
+    'minutes' => [0, 59],
+    'hours' => [0, 23],
+    'days' => [1, 31],
+    'months' => [1, 12],
+    'weekdays' => [0, 6],
+  ];
 
   private $type = NULL;
-  static private $cache = array();
-  static private $instances = array();
+  static private $cache = [];
+  static private $instances = [];
   private $last_run;
   private $next_run;
 
@@ -28,15 +31,15 @@ class CronRule {
    *
    * @param string $rule
    *   The crontab rule to use.
-   * @param integer $time
+   * @param int $time
    *   The time to test against.
-   * @param integer $skew
+   * @param int $skew
    *   Skew for @ flag.
    *
    * @return CronRule
    *   CronRule object.
    */
-  static public function factory($rule, $time = NULL, $skew = 0) {
+  public static function factory($rule, $time = NULL, $skew = 0) {
     if (strpos($rule, '@') === FALSE) {
       $skew = 0;
     }
@@ -56,9 +59,9 @@ class CronRule {
    *
    * @param string $rule
    *   The crontab rule to use.
-   * @param integer $time
+   * @param int $time
    *   The time to test against.
-   * @param integer $skew
+   * @param int $skew
    *   Skew for @ flag.
    */
   public function __construct($rule, $time, $skew) {
@@ -76,13 +79,13 @@ class CronRule {
    *     [1] = lower
    *     [2] = upper
    *     [5] = step
-   *     [7] = offset
+   *     [7] = offset.
    *
    * @return string
    *   Comma-separated list of values.
    */
   public function expandInterval($matches) {
-    $result = array();
+    $result = [];
 
     $lower = $matches[1];
     $upper = isset($matches[2]) && $matches[2] != '' ? $matches[2] : $lower;
@@ -101,7 +104,7 @@ class CronRule {
   }
 
   /**
-   * Prepare part
+   * Prepare part.
    *
    * @param string $part
    *   The part.
@@ -131,16 +134,16 @@ class CronRule {
    */
   public function expandRange($part, $type) {
     $this->type = $type;
-    $part = preg_replace_callback('!(\d+)(?:-(\d+))?((/(\d+))?(\+(\d+))?)?!', array(
+    $part = preg_replace_callback('!(\d+)(?:-(\d+))?((/(\d+))?(\+(\d+))?)?!', [
       $this,
-      'expandInterval'
-    ), $part);
+      'expandInterval',
+    ], $part);
     if (!preg_match('/([^0-9\,])/', $part)) {
       $part = explode(',', $part);
       rsort($part);
     }
     else {
-      $part = array();
+      $part = [];
     }
     return $part;
   }
@@ -153,7 +156,7 @@ class CronRule {
    */
   public function preProcessRule(&$parts) {
     // Allow JAN-DEC.
-    $months = array(
+    $months = [
       1 => 'jan',
       'feb',
       'mar',
@@ -165,12 +168,12 @@ class CronRule {
       'sep',
       'oct',
       'nov',
-      'dec'
-    );
+      'dec',
+    ];
     $parts[3] = strtr(strtolower($parts[3]), array_flip($months));
 
     // Allow SUN-SUN.
-    $days = array('sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat');
+    $days = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];
     $parts[4] = strtr(strtolower($parts[4]), array_flip($days));
     $parts[4] = str_replace('7', '0', $parts[4]);
 
@@ -206,14 +209,14 @@ class CronRule {
     $parts = preg_split('/\s+/', $this->rule);
     if ($this->allow_shorthand) {
       // Allow short rules by appending wildcards?
-      $parts += array('*', '*', '*', '*', '*');
+      $parts += ['*', '*', '*', '*', '*'];
       $parts = array_slice($parts, 0, 5);
     }
     if (count($parts) != 5) {
       return self::$cache['intervals'][$this->rule][$this->skew] = FALSE;
     }
     $this->preProcessRule($parts);
-    $intervals = array();
+    $intervals = [];
     $intervals['parts'] = $parts;
     $intervals['minutes'] = $this->expandRange($parts[0], 'minutes');
     if (empty($intervals['minutes'])) {
@@ -268,7 +271,7 @@ class CronRule {
   /**
    * Get last schedule time of rule in UNIX timestamp format.
    *
-   * @return integer
+   * @return int
    *   UNIX timestamp of last schedule time.
    */
   public function getLastSchedule() {
@@ -377,7 +380,7 @@ class CronRule {
   /**
    * Get next schedule time of rule in UNIX timestamp format.
    *
-   * @return integer
+   * @return int
    *   UNIX timestamp of next schedule time.
    */
   public function getNextSchedule() {
@@ -472,4 +475,5 @@ class CronRule {
   public function isValid() {
     return $this->getLastSchedule() === FALSE ? FALSE : TRUE;
   }
+
 }
diff --git a/src/CronSignal.php b/src/CronSignal.php
index 344669e..1ed8716 100644
--- a/src/CronSignal.php
+++ b/src/CronSignal.php
@@ -2,7 +2,11 @@
 
 namespace Drupal\ultimate_cron;
 
+/**
+ *
+ */
 class CronSignal {
+
   /**
    * Get a signal without claiming it.
    *
@@ -14,10 +18,10 @@ class CronSignal {
    * @return string
    *   The signal if any.
    */
-  static public function peek($name, $signal) {
+  public static function peek($name, $signal) {
     $database = \Drupal::service('ultimate_cron.database_factory');
     return $database->select('ultimate_cron_signal', 's')
-      ->fields('s', array('job_name'))
+      ->fields('s', ['job_name'])
       ->condition('job_name', $name)
       ->condition('signal_name', $signal)
       ->condition('claimed', 0)
@@ -37,10 +41,10 @@ class CronSignal {
    *   The signal if any. If a signal is found, it is "claimed" and therefore
    *   cannot be claimed again.
    */
-  static public function get($name, $signal) {
+  public static function get($name, $signal) {
     $database = \Drupal::service('ultimate_cron.database_factory');
     $claimed = $database->update('ultimate_cron_signal')
-      ->fields(array('claimed' => 1))
+      ->fields(['claimed' => 1])
       ->condition('job_name', $name)
       ->condition('signal_name', $signal)
       ->condition('claimed', 0)
@@ -63,18 +67,19 @@ class CronSignal {
    * @param string $signal
    *   The name of the signal.
    *
-   * @return boolean
+   * @return bool
    *   TRUE if the signal was set.
+   *
    * @throws \Exception
    */
-  static public function set($name, $signal) {
+  public static function set($name, $signal) {
     $database = \Drupal::service('ultimate_cron.database_factory');
     return $database->merge('ultimate_cron_signal')
-      ->keys(array(
+      ->keys([
         'job_name' => $name,
         'signal_name' => $signal,
-      ))
-      ->fields(array('claimed' => 0))
+      ])
+      ->fields(['claimed' => 0])
       ->execute();
   }
 
@@ -86,7 +91,7 @@ class CronSignal {
    * @param string $signal
    *   The name of the signal.
    */
-  static public function clear($name, $signal) {
+  public static function clear($name, $signal) {
     $database = \Drupal::service('ultimate_cron.database_factory');
     $database->delete('ultimate_cron_signal')
       ->condition('job_name', $name)
@@ -100,10 +105,11 @@ class CronSignal {
    * @param string $name
    *   The name of the job.
    */
-  static public function flush($name) {
+  public static function flush($name) {
     $database = \Drupal::service('ultimate_cron.database_factory');
     $database->delete('ultimate_cron_signal')
       ->condition('job_name', $name)
       ->execute();
   }
+
 }
diff --git a/src/Entity/CronJob.php b/src/Entity/CronJob.php
index 8aeec23..500e7f8 100644
--- a/src/Entity/CronJob.php
+++ b/src/Entity/CronJob.php
@@ -103,17 +103,17 @@ class CronJob extends ConfigEntityBase implements CronJobInterface {
   /**
    * @var array
    */
-  protected $scheduler = array('id' => 'simple');
+  protected $scheduler = ['id' => 'simple'];
 
   /**
    * @var array
    */
-  protected $launcher = array('id' => 'serial');
+  protected $launcher = ['id' => 'serial'];
 
   /**
    * @var array
    */
-  protected $logger = array('id' => 'database');
+  protected $logger = ['id' => 'database'];
 
   /**
    * @var \Drupal\ultimate_cron\CronPlugin
@@ -154,7 +154,7 @@ class CronJob extends ConfigEntityBase implements CronJobInterface {
     parent::postSave($storage, $update);
     if ($update && empty($this->dont_log)) {
       $log = $this->startLog(uniqid($this->id(), TRUE), '', ULTIMATE_CRON_LOG_TYPE_ADMIN);
-      $log->log('Job modified by ' . $log->formatUser(), array(), RfcLogLevel::INFO);
+      $log->log('Job modified by ' . $log->formatUser(), [], RfcLogLevel::INFO);
       $log->finish();
     }
   }
@@ -179,7 +179,7 @@ class CronJob extends ConfigEntityBase implements CronJobInterface {
       if (empty($entity->dont_log)) {
         /** @var \Drupal\ultimate_cron\Entity\CronJob $entity */
         $log = $entity->startLog(uniqid($entity->id(), TRUE), 'modification', ULTIMATE_CRON_LOG_TYPE_ADMIN);
-        $log->log('Job deleted by ' . $log->formatUser(), array(), RfcLogLevel::INFO);
+        $log->log('Job deleted by ' . $log->formatUser(), [], RfcLogLevel::INFO);
         $log->finish();
       }
     }
@@ -288,7 +288,7 @@ class CronJob extends ConfigEntityBase implements CronJobInterface {
     }
     /* @var \Drupal\Core\Plugin\DefaultPluginManager $manager */
     $manager = \Drupal::service('plugin.manager.ultimate_cron.' . $plugin_type);
-    $this->plugins[$plugin_type] = $manager->createInstance($name, isset($this->{$plugin_type}['configuration']) ? $this->{$plugin_type}['configuration'] : array());
+    $this->plugins[$plugin_type] = $manager->createInstance($name, isset($this->{$plugin_type}['configuration']) ? $this->{$plugin_type}['configuration'] : []);
     return $this->plugins[$plugin_type];
   }
 
@@ -297,6 +297,7 @@ class CronJob extends ConfigEntityBase implements CronJobInterface {
    *
    * @param $plugin_type
    *   The type of plugin.
+   *
    * @return array
    *   An array of this plugin's configuration.
    */
@@ -352,17 +353,17 @@ class CronJob extends ConfigEntityBase implements CronJobInterface {
 
     $callback = $this->classResolver->getInstanceFromDefinition($class_or_service);
 
-    return array($callback, $method);
+    return [$callback, $method];
   }
 
   /**
    * Check job schedule.
    */
   public function isScheduled() {
-    \Drupal::moduleHandler()->invokeAll('cron_pre_schedule', array($this));
+    \Drupal::moduleHandler()->invokeAll('cron_pre_schedule', [$this]);
     $result = empty($this->disabled) && !$this->isLocked() && $this->getPlugin('scheduler')
-        ->isScheduled($this);
-    \Drupal::moduleHandler()->invokeAll('cron_post_schedule', array($this));
+      ->isScheduled($this);
+    \Drupal::moduleHandler()->invokeAll('cron_post_schedule', [$this]);
     return $result;
   }
 
@@ -383,14 +384,14 @@ class CronJob extends ConfigEntityBase implements CronJobInterface {
     $launcher = $this->getPlugin('launcher');
     $lock_id = $launcher->lock($this);
     if (!$lock_id) {
-      \Drupal::logger('ultimate_cron')->error('Could not get lock for job @name', array(
+      \Drupal::logger('ultimate_cron')->error('Could not get lock for job @name', [
         '@name' => $this->id(),
-      ));
+      ]);
       return FALSE;
     }
-    $this->sendMessage('lock', array(
+    $this->sendMessage('lock', [
       'lock_id' => $lock_id,
-    ));
+    ]);
     return $lock_id;
   }
 
@@ -410,9 +411,9 @@ class CronJob extends ConfigEntityBase implements CronJobInterface {
     if ($lock_id) {
       $result = $this->getPlugin('launcher')->unlock($lock_id, $manual);
     }
-    $this->sendMessage('unlock', array(
+    $this->sendMessage('unlock', [
       'lock_id' => $lock_id,
-    ));
+    ]);
     return $result;
   }
 
@@ -429,12 +430,12 @@ class CronJob extends ConfigEntityBase implements CronJobInterface {
    * @param array $jobs
    *   Jobs to check locks for.
    */
-  static public function isLockedMultiple($jobs) {
-    $launchers = array();
+  public static function isLockedMultiple($jobs) {
+    $launchers = [];
     foreach ($jobs as $job) {
       $launchers[$job->getPlugin('launcher')->name][$job->id()] = $job;
     }
-    $locked = array();
+    $locked = [];
     foreach ($launchers as $launcher => $jobs) {
       $locked += ultimate_cron_plugin_load('launcher', $launcher)->isLockedMultiple($jobs);
     }
@@ -460,7 +461,7 @@ class CronJob extends ConfigEntityBase implements CronJobInterface {
     try {
       $this->clearSignals();
       $this->initializeProgress();
-      \Drupal::moduleHandler()->invokeAll('cron_pre_run', array($this));
+      \Drupal::moduleHandler()->invokeAll('cron_pre_run', [$this]);
 
       // Force the current user to anonymous to ensure consistent permissions
       // on cron runs.
@@ -488,7 +489,7 @@ class CronJob extends ConfigEntityBase implements CronJobInterface {
     }
     finally {
       self::$currentJob = NULL;
-      \Drupal::moduleHandler()->invokeAll('cron_post_run', array($this));
+      \Drupal::moduleHandler()->invokeAll('cron_post_run', [$this]);
       $this->finishProgress();
 
       // Restore original user account.
@@ -533,7 +534,7 @@ class CronJob extends ConfigEntityBase implements CronJobInterface {
    * @return LogEntry
    *   The latest log entry for this job.
    */
-  public function loadLatestLogEntry($log_types = array(ULTIMATE_CRON_LOG_TYPE_NORMAL)) {
+  public function loadLatestLogEntry($log_types = [ULTIMATE_CRON_LOG_TYPE_NORMAL]) {
     return $this->getPlugin('logger')->load($this->id(), NULL, $log_types);
   }
 
@@ -546,12 +547,12 @@ class CronJob extends ConfigEntityBase implements CronJobInterface {
    * @return array
    *   Array of UltimateCronLogEntry objects.
    */
-  static public function loadLatestLogEntries($jobs, $log_types = array(ULTIMATE_CRON_LOG_TYPE_NORMAL)) {
-    $loggers = array();
+  public static function loadLatestLogEntries($jobs, $log_types = [ULTIMATE_CRON_LOG_TYPE_NORMAL]) {
+    $loggers = [];
     foreach ($jobs as $job) {
       $loggers[$job->getPlugin('logger')->name][$job->id()] = $job;
     }
-    $log_entries = array();
+    $log_entries = [];
     foreach ($loggers as $logger => $jobs) {
       $log_entries += ultimate_cron_plugin_load('logger', $logger)->loadLatestLogEntries($jobs, $log_types);
     }
@@ -589,7 +590,7 @@ class CronJob extends ConfigEntityBase implements CronJobInterface {
    * Get module name for this job.
    */
   public function getModuleName() {
-    static $names = array();
+    static $names = [];
     if (!isset($names[$this->module])) {
       $info = $this->moduleExtensionList->getExtensionInfo($this->module);
       $names[$this->module] = $info && !empty($info['name']) ? $info['name'] : $this->module;
@@ -601,7 +602,7 @@ class CronJob extends ConfigEntityBase implements CronJobInterface {
    * Get module description for this job.
    */
   public function getModuleDescription() {
-    static $descs = array();
+    static $descs = [];
     if (!isset($descs[$this->module])) {
       $info = $this->moduleExtensionList->getExtensionInfo($this->module);
       $descs[$this->module] = $info && !empty($info['description']) ? $info['description'] : '';
@@ -642,12 +643,12 @@ class CronJob extends ConfigEntityBase implements CronJobInterface {
    * @return array
    *   Progress of jobs, keyed by job name.
    */
-  static public function getProgressMultiple($jobs) {
-    $launchers = array();
+  public static function getProgressMultiple($jobs) {
+    $launchers = [];
     foreach ($jobs as $job) {
       $launchers[$job->getPlugin('launcher')->name][$job->id()] = $job;
     }
-    $progresses = array();
+    $progresses = [];
     foreach ($launchers as $launcher => $jobs) {
       $progresses += ultimate_cron_plugin_load('launcher', $launcher)->getProgressMultiple($jobs);
     }
@@ -662,9 +663,9 @@ class CronJob extends ConfigEntityBase implements CronJobInterface {
    */
   public function setProgress($progress) {
     if ($this->getPlugin('launcher')->setProgress($this, $progress)) {
-      $this->sendMessage('setProgress', array(
+      $this->sendMessage('setProgress', [
         'progress' => $progress,
-      ));
+      ]);
       return TRUE;
     }
     return FALSE;
@@ -702,7 +703,7 @@ class CronJob extends ConfigEntityBase implements CronJobInterface {
    * @param array $data
    *   Data blob for the given action.
    */
-  public function sendMessage($action, $data = array()) {
+  public function sendMessage($action, $data = []) {
     // @TODO: Nodejs integration has not been ported to 8.x yet.
     if (FALSE && \Drupal::moduleHandler()->moduleExists('nodejs')) {
       $settings = ultimate_cron_plugin_load('settings', 'general')->getDefaultSettings();
@@ -710,11 +711,11 @@ class CronJob extends ConfigEntityBase implements CronJobInterface {
         return;
       }
 
-      $elements = array();
+      $elements = [];
 
       $build = clone $this;
 
-      $cell_idxs = array();
+      $cell_idxs = [];
 
       switch ($action) {
         case 'lock':
@@ -722,41 +723,41 @@ class CronJob extends ConfigEntityBase implements CronJobInterface {
           if (empty($data['log_entry'])) {
             $build->lock_id = $data['lock_id'];
             $build->log_entry = $logger->factoryLogEntry($build->name);
-            $build->log_entry->setData(array(
+            $build->log_entry->setData([
               'lid' => $data['lock_id'],
               'start_time' => microtime(TRUE),
-            ));
+            ]);
           }
           else {
             $build->log_entry = $data['log_entry'];
           }
-          $cell_idxs = array(
+          $cell_idxs = [
             'tr#' . $build->name . ' .ctools-export-ui-start-time' => 3,
             'tr#' . $build->name . ' .ctools-export-ui-duration' => 4,
             'tr#' . $build->name . ' .ctools-export-ui-status' => 5,
             'tr#' . $build->name . ' .ctools-export-ui-operations' => 7,
-          );
+          ];
           break;
 
         case 'unlock':
           $build->log_entry = $build->loadLogEntry($data['lock_id']);
           $build->lock_id = FALSE;
-          $cell_idxs = array(
+          $cell_idxs = [
             'tr#' . $build->name . ' .ctools-export-ui-start-time' => 3,
             'tr#' . $build->name . ' .ctools-export-ui-duration' => 4,
             'tr#' . $build->name . ' .ctools-export-ui-status' => 5,
             'tr#' . $build->name . ' .ctools-export-ui-operations' => 7,
-          );
+          ];
           break;
 
         case 'setProgress':
           $build->lock_id = $build->isLocked();
           $build->log_entry = $build->loadLogEntry($build->lock_id);
-          $cell_idxs = array(
+          $cell_idxs = [
             'tr#' . $build->name . ' .ctools-export-ui-start-time' => 3,
             'tr#' . $build->name . ' .ctools-export-ui-duration' => 4,
             'tr#' . $build->name . ' .ctools-export-ui-status' => 5,
-          );
+          ];
           break;
       }
       $cells = $build->rebuild_ctools_export_ui_table_row();
@@ -764,16 +765,16 @@ class CronJob extends ConfigEntityBase implements CronJobInterface {
         $elements[$selector] = $cells[$cell_idx];
       }
 
-      $message = (object) array(
+      $message = (object) [
         'channel' => 'ultimate_cron',
-        'data' => (object) array(
+        'data' => (object) [
           'action' => $action,
           'job' => $build,
           'timestamp' => microtime(TRUE),
           'elements' => $elements,
-        ),
+        ],
         'callback' => 'nodejsUltimateCron',
-      );
+      ];
       nodejs_send_content_channel_message($message);
     }
   }
diff --git a/src/Form/CronJobDisableForm.php b/src/Form/CronJobDisableForm.php
index 6eacf01..255bfd2 100644
--- a/src/Form/CronJobDisableForm.php
+++ b/src/Form/CronJobDisableForm.php
@@ -5,16 +5,18 @@ namespace Drupal\ultimate_cron\Form;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 
-
+/**
+ *
+ */
 class CronJobDisableForm extends EntityConfirmFormBase {
 
   /**
    * {@inheritdoc}
    */
   public function getQuestion() {
-    return $this->t('Do you really want to disable @cronjob_id cron job?', array(
+    return $this->t('Do you really want to disable @cronjob_id cron job?', [
       '@cronjob_id' => $this->getEntity()->label(),
-    ));
+    ]);
   }
 
   /**
@@ -47,5 +49,5 @@ class CronJobDisableForm extends EntityConfirmFormBase {
       ->addStatus($this->t('Disabled cron job %cronjob.', ['%cronjob' => $this->entity->label()]));
     $form_state->setRedirectUrl($this->getCancelUrl());
   }
-  
+
 }
diff --git a/src/Form/CronJobEnableForm.php b/src/Form/CronJobEnableForm.php
index 16b23c6..29f8e6b 100644
--- a/src/Form/CronJobEnableForm.php
+++ b/src/Form/CronJobEnableForm.php
@@ -5,16 +5,18 @@ namespace Drupal\ultimate_cron\Form;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 
-
+/**
+ *
+ */
 class CronJobEnableForm extends EntityConfirmFormBase {
 
   /**
    * {@inheritdoc}
    */
   public function getQuestion() {
-    return $this->t('Do you really want to enable @cronjob_id cron job?', array(
+    return $this->t('Do you really want to enable @cronjob_id cron job?', [
       '@cronjob_id' => $this->getEntity()->label(),
-    ));
+    ]);
   }
 
   /**
@@ -47,5 +49,5 @@ class CronJobEnableForm extends EntityConfirmFormBase {
       ->addStatus($this->t('Enabled cron job %cronjob.', ['%cronjob' => $this->entity->label()]));
     $form_state->setRedirectUrl($this->getCancelUrl());
   }
-  
+
 }
diff --git a/src/Form/CronJobForm.php b/src/Form/CronJobForm.php
index 9819bd1..3ee8bfe 100644
--- a/src/Form/CronJobForm.php
+++ b/src/Form/CronJobForm.php
@@ -5,7 +5,6 @@ namespace Drupal\ultimate_cron\Form;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\ultimate_cron\CronPlugin;
-use Drupal\ultimate_cron\CronRule;
 
 /**
  * Base form controller for cron job forms.
@@ -27,51 +26,51 @@ class CronJobForm extends EntityForm {
     /* @var \Drupal\ultimate_cron\Entity\CronJob $job */
     $job = $this->entity;
 
-    $form['title'] = array(
+    $form['title'] = [
       '#title' => t('Title'),
       '#description' => t('This will appear in the administrative interface to easily identify it.'),
       '#type' => 'textfield',
       '#default_value' => $job->getTitle(),
-    );
+    ];
 
-    $form['id'] = array(
+    $form['id'] = [
       '#type' => 'machine_name',
       '#default_value' => $job->id(),
-      '#machine_name' => array(
+      '#machine_name' => [
         'exists' => '\Drupal\ultimate_cron\Entity\CronJob::load',
-        'source' => array('title'),
-      ),
+        'source' => ['title'],
+      ],
       '#disabled' => !$job->isNew(),
-    );
+    ];
 
-    $form['status'] = array(
+    $form['status'] = [
       '#type' => 'checkbox',
       '#title' => t('Enabled'),
       '#default_value' => $job->status(),
       '#description' => t('This checkbox enables the cron job. Disabled Cron jobs are not run.'),
-    );
+    ];
 
-    $form['module_info'] = array(
+    $form['module_info'] = [
       '#type' => 'item',
       '#title' => $this->t('Module'),
       '#markup' => $job->getModule(),
-    );
+    ];
 
     $callback = $job->getCallback();
     if (is_array($callback)) {
       $callback = get_class($callback[0]) . '::' . $callback[1];
     }
 
-    $form['callback_info'] = array(
+    $form['callback_info'] = [
       '#type' => 'item',
       '#title' => $this->t('Callback'),
       '#markup' => $callback,
-    );
+    ];
 
     // Setup vertical tabs.
-    $form['settings_tabs'] = array(
+    $form['settings_tabs'] = [
       '#type' => 'vertical_tabs',
-    );
+    ];
 
     // Load settings for each plugin in its own vertical tab.
     $plugin_types = CronPlugin::getPluginTypes();
@@ -83,62 +82,64 @@ class CronJobForm extends EntityForm {
       $plugin_settings = $job->get($plugin_type);
 
       // Generate select options.
-      $options = array();
+      $options = [];
       foreach ($plugins as $value => $key) {
         if (!empty($key['default']) && $key['default'] == TRUE) {
-          $options = array($value => t('@title (Default)', array('@title' => $key['title']))) + $options;
+          $options = [$value => t('@title (Default)', ['@title' => $key['title']])] + $options;
         }
         else {
           $options[$value] = $key['title'];
         }
       }
 
-      $form[$plugin_type] = array(
+      $form[$plugin_type] = [
         '#type' => 'details',
         '#title' => $plugin_label,
         '#group' => 'settings_tabs',
         '#tree' => TRUE,
-      );
+      ];
 
-      $form[$plugin_type]['id'] = array(
+      $form[$plugin_type]['id'] = [
         '#type' => 'select',
         '#title' => $plugin_label,
         '#options' => $options,
         '#plugin_type' => $plugin_type,
         '#default_value' => $plugin_settings['id'],
-        '#description' => $this->t("Select which @plugin to use for this job.", array('@plugin' => $plugin_type)),
+        '#description' => $this->t("Select which @plugin to use for this job.", ['@plugin' => $plugin_type]),
         '#group' => 'settings_tabs',
         '#executes_submit_callback' => TRUE,
-        '#ajax' => array(
-          'callback' => array($this, 'updateSelectedPluginType'),
+        '#ajax' => [
+          'callback' => [$this, 'updateSelectedPluginType'],
           'wrapper' => $plugin_type . '_settings',
           'method' => 'replace',
-        ),
-        '#submit' => array('::submitForm', '::rebuild'),
-        '#limit_validation_errors' => array(array($plugin_type, 'id')),
-      );
+        ],
+        '#submit' => ['::submitForm', '::rebuild'],
+        '#limit_validation_errors' => [[$plugin_type, 'id']],
+      ];
 
-      $form[$plugin_type]['select'] = array(
+      $form[$plugin_type]['select'] = [
         '#type' => 'submit',
         '#name' => $plugin_type . '_select',
         '#value' => t('Select'),
-        '#submit' => array('::submitForm', '::rebuild'),
-        '#limit_validation_errors' => array(array($plugin_type, 'id')),
-        '#attributes' => array('class' => array('js-hide')),
-      );
+        '#submit' => ['::submitForm', '::rebuild'],
+        '#limit_validation_errors' => [[$plugin_type, 'id']],
+        '#attributes' => ['class' => ['js-hide']],
+      ];
 
       $plugin = $job->getPlugin($plugin_type);
-      $temp_form = array();
+      $temp_form = [];
       $form[$plugin_type]['configuration'] = $plugin->buildConfigurationForm($temp_form, $form_state);
       $form[$plugin_type]['configuration']['#prefix'] = '<div id="' . $plugin_type . '_settings' . '">';
       $form[$plugin_type]['configuration']['#suffix'] = '</div>';
     }
 
-    //$form['#attached']['js'][] = drupal_get_path('module', 'ultimate_cron') . '/js/ultimate_cron.job.js';
-
+    // $form['#attached']['js'][] = drupal_get_path('module', 'ultimate_cron') . '/js/ultimate_cron.job.js';
     return $form;
   }
 
+  /**
+   *
+   */
   public function updateSelectedPluginType(array $form, FormStateInterface $form_state) {
     return $form[$form_state->getTriggeringElement()['#plugin_type']]['configuration'];
   }
diff --git a/src/Form/GeneralSettingsForm.php b/src/Form/GeneralSettingsForm.php
index b1f24b1..3931e45 100644
--- a/src/Form/GeneralSettingsForm.php
+++ b/src/Form/GeneralSettingsForm.php
@@ -1,6 +1,7 @@
 <?php
 
 namespace Drupal\ultimate_cron\Form;
+
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Datetime\DateFormatter;
 use Drupal\Core\Form\ConfigFormBase;
@@ -86,7 +87,7 @@ class GeneralSettingsForm extends ConfigFormBase {
     ];
 
     // @todo enable this when supported again
-    $form['nodejs'] = array(
+    $form['nodejs'] = [
       '#type' => 'checkbox',
       '#title' => t('nodejs'),
       '#default_value' => $config->get('nodejs'),
@@ -94,36 +95,36 @@ class GeneralSettingsForm extends ConfigFormBase {
       '#fallback' => TRUE,
 
       '#access' => FALSE,
-    );
+    ];
 
     // Queue settings. Visual hierarchy disabled since this is currently
     // the only general settings group.
     $form['queue'] = [
-      //'#type' => 'details',
-      //'#title' => 'queue',
-      //'#group' => 'settings_tabs',
+      // '#type' => 'details',
+      // '#title' => 'queue',
+      // '#group' => 'settings_tabs',
       '#tree' => TRUE,
     ];
 
-    $form['queue']['enabled'] = array(
+    $form['queue']['enabled'] = [
       '#title' => t('Override cron queue processing'),
       '#description' => t('If enabled, queue workers are exposed as cron jobs and can be configured separately. When disabled, the standard queue processing is used. <strong>This feature is currently experimental, do not enable unless you need it.</strong>'),
       '#type' => 'checkbox',
       '#default_value' => $config->get('queue.enabled'),
       '#fallback' => TRUE,
-    );
+    ];
 
-    $queue_states = array(
-      '#states' => array(
-        'visible' => array(':input[name="queue[enabled]"]' => array('checked' => TRUE)),
-      ),
-    );
+    $queue_states = [
+      '#states' => [
+        'visible' => [':input[name="queue[enabled]"]' => ['checked' => TRUE]],
+      ],
+    ];
 
-    $form['queue']['timeouts'] = array(
+    $form['queue']['timeouts'] = [
       '#type' => 'fieldset',
       '#title' => t('Timeouts'),
-    ) + $queue_states;
-    $form['queue']['timeouts']['lease_time'] = array(
+    ] + $queue_states;
+    $form['queue']['timeouts']['lease_time'] = [
       '#title' => t("Queue lease time"),
       '#type' => 'number',
       '#default_value' => $config->get('queue.timeouts.lease_time'),
@@ -131,9 +132,9 @@ class GeneralSettingsForm extends ConfigFormBase {
       '#fallback' => TRUE,
       '#required' => TRUE,
       '#min' => 0,
-      '#step' => 0.01
-    );
-    $form['queue']['timeouts']['time'] = array(
+      '#step' => 0.01,
+    ];
+    $form['queue']['timeouts']['time'] = [
       '#title' => t('Time'),
       '#type' => 'number',
       '#default_value' => $config->get('queue.timeouts.time'),
@@ -141,14 +142,14 @@ class GeneralSettingsForm extends ConfigFormBase {
       '#fallback' => TRUE,
       '#required' => TRUE,
       '#min' => 0,
-      '#step' => 0.01
-    );
+      '#step' => 0.01,
+    ];
 
-    $form['queue']['delays'] = array(
+    $form['queue']['delays'] = [
       '#type' => 'fieldset',
       '#title' => t('Delays'),
-    ) + $queue_states;
-    $form['queue']['delays']['empty_delay'] = array(
+    ] + $queue_states;
+    $form['queue']['delays']['empty_delay'] = [
       '#title' => t("Empty delay"),
       '#type' => 'number',
       '#default_value' => $config->get('queue.delays.empty_delay'),
@@ -156,9 +157,9 @@ class GeneralSettingsForm extends ConfigFormBase {
       '#fallback' => TRUE,
       '#required' => TRUE,
       '#min' => 0,
-      '#step' => 0.01
-    );
-    $form['queue']['delays']['item_delay'] = array(
+      '#step' => 0.01,
+    ];
+    $form['queue']['delays']['item_delay'] = [
       '#title' => t("Item delay"),
       '#type' => 'number',
       '#default_value' => $config->get('queue.delays.item_delay'),
@@ -166,28 +167,28 @@ class GeneralSettingsForm extends ConfigFormBase {
       '#fallback' => TRUE,
       '#required' => TRUE,
       '#min' => 0,
-      '#step' => 0.01
-    );
+      '#step' => 0.01,
+    ];
 
-    $throttle_states = array(
-      '#states' => array(
-        'visible' => array(':input[name="queue[throttle][enabled]"]' => array('checked' => TRUE)),
-      ),
-    );
+    $throttle_states = [
+      '#states' => [
+        'visible' => [':input[name="queue[throttle][enabled]"]' => ['checked' => TRUE]],
+      ],
+    ];
 
-    $form['queue']['throttle'] = array(
+    $form['queue']['throttle'] = [
       '#type' => 'fieldset',
       '#title' => t('Throttling'),
       // @todo Show when throttling is implemented.
       '#access' => FALSE,
-    ) + $queue_states;
-    $form['queue']['throttle']['enabled'] = array(
+    ] + $queue_states;
+    $form['queue']['throttle']['enabled'] = [
       '#title' => t('Throttle'),
       '#type' => 'checkbox',
       '#default_value' => $config->get('queue.throttle.enabled'),
       '#description' => t('Throttle queues using multiple threads.'),
-    );
-    $form['queue']['throttle']['threads'] = array(
+    ];
+    $form['queue']['throttle']['threads'] = [
       '#title' => t('Threads'),
       '#type' => 'number',
       '#default_value' => $config->get('queue.throttle.threads'),
@@ -195,8 +196,8 @@ class GeneralSettingsForm extends ConfigFormBase {
       '#fallback' => TRUE,
       '#required' => TRUE,
       '#min' => 0,
-    ) + $throttle_states;
-    $form['queue']['throttle']['threshold'] = array(
+    ] + $throttle_states;
+    $form['queue']['throttle']['threshold'] = [
       '#title' => t('Threshold'),
       '#type' => 'number',
       '#default_value' => $config->get('queue.throttle.threshold'),
@@ -204,7 +205,7 @@ class GeneralSettingsForm extends ConfigFormBase {
       '#fallback' => TRUE,
       '#required' => TRUE,
       '#min' => 0,
-    ) + $throttle_states;
+    ] + $throttle_states;
 
     return parent::buildForm($form, $form_state);
   }
diff --git a/src/Form/LauncherSettingsForm.php b/src/Form/LauncherSettingsForm.php
index 836ff37..206aab2 100644
--- a/src/Form/LauncherSettingsForm.php
+++ b/src/Form/LauncherSettingsForm.php
@@ -1,6 +1,7 @@
 <?php
 
 namespace Drupal\ultimate_cron\Form;
+
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
 
@@ -71,9 +72,9 @@ class LauncherSettingsForm extends ConfigFormBase {
       '#default_value' => $values->get('launcher.thread'),
       '#options' => $options,
       '#description' => t('Which thread to run jobs in.') . '<br/>' .
-        t('<strong>Any</strong>: Just use any available thread') . '<br/>' .
-        t('<strong>Fixed</strong>: Only run in one specific thread. The maximum number of threads is spread across the jobs.') . '<br/>' .
-        t('<strong>1-?</strong>: Only run when a specific thread is invoked. This setting only has an effect when cron is run through cron.php with an argument ?thread=N or through Drush with --options=thread=N.'),
+      t('<strong>Any</strong>: Just use any available thread') . '<br/>' .
+      t('<strong>Fixed</strong>: Only run in one specific thread. The maximum number of threads is spread across the jobs.') . '<br/>' .
+      t('<strong>1-?</strong>: Only run when a specific thread is invoked. This setting only has an effect when cron is run through cron.php with an argument ?thread=N or through Drush with --options=thread=N.'),
       '#fallback' => TRUE,
       '#required' => TRUE,
       '#weight' => 2,
diff --git a/src/Form/LoggerSettingsForm.php b/src/Form/LoggerSettingsForm.php
index 009b10b..1d1090d 100644
--- a/src/Form/LoggerSettingsForm.php
+++ b/src/Form/LoggerSettingsForm.php
@@ -1,6 +1,7 @@
 <?php
 
 namespace Drupal\ultimate_cron\Form;
+
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
 
@@ -42,22 +43,22 @@ class LoggerSettingsForm extends ConfigFormBase {
       '#tree' => TRUE,
     ];
 
-    $form['cache']['bin'] = array(
+    $form['cache']['bin'] = [
       '#type' => 'textfield',
       '#title' => t('Cache bin'),
       '#description' => t('Select which cache bin to use for storing logs.'),
       '#default_value' => $config->get('logger.cache.bin'),
       '#fallback' => TRUE,
       '#required' => TRUE,
-    );
-    $form['cache']['timeout'] = array(
+    ];
+    $form['cache']['timeout'] = [
       '#type' => 'textfield',
       '#title' => t('Cache timeout'),
       '#description' => t('Seconds before cache entry expires (0 = never, -1 = on next general cache wipe).'),
       '#default_value' => $config->get('logger.cache.timeout'),
       '#fallback' => TRUE,
       '#required' => TRUE,
-    );
+    ];
 
     // Settings for Database logger.
     $form['database'] = [
@@ -71,7 +72,7 @@ class LoggerSettingsForm extends ConfigFormBase {
       2 => t('Remove logs older than a specified age'),
       3 => t('Retain only a specific amount of log entries'),
     ];
-    $form['database']['method'] = array(
+    $form['database']['method'] = [
       '#type' => 'select',
       '#title' => t('Log entry cleanup method'),
       '#description' => t('Select which method to use for cleaning up logs.'),
@@ -79,34 +80,34 @@ class LoggerSettingsForm extends ConfigFormBase {
       '#default_value' => $config->get('logger.database.method'),
       '#fallback' => TRUE,
       '#required' => TRUE,
-    );
+    ];
 
-    $states = array('expire' => array(), 'retain' => array());
-    $form['database']['method_expire'] = array(
+    $states = ['expire' => [], 'retain' => []];
+    $form['database']['method_expire'] = [
       '#type' => 'fieldset',
       '#title' => t('Remove logs older than a specified age'),
-    ) + $states['expire'];
-    $form['database']['method_expire']['expire'] = array(
+    ] + $states['expire'];
+    $form['database']['method_expire']['expire'] = [
       '#type' => 'textfield',
       '#title' => t('Log entry expiration'),
       '#description' => t('Remove log entries older than X seconds.'),
       '#default_value' => $config->get('logger.database.expire'),
       '#fallback' => TRUE,
       '#required' => TRUE,
-    ) + $states['expire'];
+    ] + $states['expire'];
 
-    $form['database']['method_retain'] = array(
+    $form['database']['method_retain'] = [
       '#type' => 'fieldset',
       '#title' => t('Retain only a specific amount of log entries'),
-    ) + $states['retain'];
-    $form['database']['method_retain']['retain'] = array(
+    ] + $states['retain'];
+    $form['database']['method_retain']['retain'] = [
       '#type' => 'textfield',
       '#title' => t('Retain logs'),
       '#description' => t('Retain X amount of log entries.'),
       '#default_value' => $config->get('logger.database.retain'),
       '#fallback' => TRUE,
       '#required' => TRUE,
-    ) + $states['retain'];
+    ] + $states['retain'];
 
     return parent::buildForm($form, $form_state);
   }
diff --git a/src/Form/SchedulerSettingsForm.php b/src/Form/SchedulerSettingsForm.php
index c9bdc71..626f746 100644
--- a/src/Form/SchedulerSettingsForm.php
+++ b/src/Form/SchedulerSettingsForm.php
@@ -32,9 +32,9 @@ class SchedulerSettingsForm extends ConfigFormBase {
     $rules = is_array($values->get('rules')) ? implode(';', $values->get('rules')) : '';
 
     // Setup vertical tabs.
-    $form['settings_tabs'] = array(
+    $form['settings_tabs'] = [
       '#type' => 'vertical_tabs',
-    );
+    ];
 
     // Settings for crontab.
     $form['crontab'] = [
@@ -44,33 +44,33 @@ class SchedulerSettingsForm extends ConfigFormBase {
       '#tree' => TRUE,
     ];
 
-    $form['crontab']['catch_up'] = array(
+    $form['crontab']['catch_up'] = [
       '#title' => t("Catch up"),
       '#type' => 'textfield',
       '#default_value' => $values->get('catch_up'),
       '#description' => t("Don't run job after X seconds of rule."),
       '#fallback' => TRUE,
       '#required' => TRUE,
-    );
+    ];
 
-    $form['crontab']['rules'] = array(
+    $form['crontab']['rules'] = [
       '#title' => t("Rules"),
       '#type' => 'textfield',
       '#default_value' => $rules,
       '#description' => t('Semi-colon separated list of crontab rules.'),
       '#fallback' => TRUE,
       '#required' => TRUE,
-      '#element_validate' => array('ultimate_cron_plugin_crontab_element_validate_rule'),
-    );
-    $form['crontab']['rules_help'] = array(
+      '#element_validate' => ['ultimate_cron_plugin_crontab_element_validate_rule'],
+    ];
+    $form['crontab']['rules_help'] = [
       '#type' => 'fieldset',
       '#title' => t('Rules help'),
       '#collapsible' => TRUE,
       '#collapsed' => TRUE,
-    );
-    $form['crontab']['rules_help']['info'] = array(
+    ];
+    $form['crontab']['rules_help']['info'] = [
       '#markup' => file_get_contents(drupal_get_path('module', 'ultimate_cron') . '/help/rules.html'),
-    );
+    ];
 
     // Settings for Simple scheduler.
     $form['simple'] = [
@@ -91,7 +91,7 @@ class SchedulerSettingsForm extends ConfigFormBase {
       '0+@ 0 * * *' => 'Every day',
       '0+@ 0 * * 0' => 'Every week',
     ];
-    $form['simple']['rule'] = array(
+    $form['simple']['rule'] = [
       '#type' => 'select',
       '#title' => t('Run cron every'),
       '#default_value' => $values->get('rule'),
@@ -99,7 +99,7 @@ class SchedulerSettingsForm extends ConfigFormBase {
       '#options' => $options,
       '#fallback' => TRUE,
       '#required' => TRUE,
-    );
+    ];
 
     parent::buildForm($form, $form_state);
   }
diff --git a/src/Launcher/LauncherBase.php b/src/Launcher/LauncherBase.php
index 0711b81..6428127 100644
--- a/src/Launcher/LauncherBase.php
+++ b/src/Launcher/LauncherBase.php
@@ -38,7 +38,6 @@ use Drupal\ultimate_cron\CronJobInterface;
  *       exists, but can be overridden. It is assumed that this function
  *       checks the jobs schedule before launching and that it also handles
  *       locking wrt concurrency for the launcher itself.
- *
  */
 abstract class LauncherBase extends CronPlugin implements LauncherInterface {
 
@@ -46,7 +45,7 @@ abstract class LauncherBase extends CronPlugin implements LauncherInterface {
    * {@inheritdoc}
    */
   public function isLockedMultiple(array $jobs) {
-    $lock_ids = array();
+    $lock_ids = [];
     foreach ($jobs as $name => $job) {
       $lock_ids[$name] = $this->isLocked($job);
     }
@@ -68,9 +67,9 @@ abstract class LauncherBase extends CronPlugin implements LauncherInterface {
    */
   public function formatRunning(CronJobInterface $job) {
     $file = drupal_get_path('module', 'ultimate_cron') . '/icons/hourglass.png';
-    $status = theme('image', array('path' => $file));
+    $status = theme('image', ['path' => $file]);
     $title = t('running');
-    return array($status, $title);
+    return [$status, $title];
   }
 
   /**
@@ -78,9 +77,9 @@ abstract class LauncherBase extends CronPlugin implements LauncherInterface {
    */
   public function formatUnfinished(CronJobInterface $job) {
     $file = drupal_get_path('module', 'ultimate_cron') . '/icons/lock_open.png';
-    $status = theme('image', array('path' => $file));
+    $status = theme('image', ['path' => $file]);
     $title = t('unfinished but not locked?');
-    return array($status, $title);
+    return [$status, $title];
   }
 
   /**
diff --git a/src/Launcher/LauncherInterface.php b/src/Launcher/LauncherInterface.php
index ab2b10e..684c6d2 100644
--- a/src/Launcher/LauncherInterface.php
+++ b/src/Launcher/LauncherInterface.php
@@ -27,7 +27,7 @@ interface LauncherInterface extends PluginInspectionInterface, ConfigurableInter
    * @param \Drupal\ultimate_cron\CronJobInterface $job
    *   The job to lock.
    *
-   * @return string|FALSE
+   * @return string|false
    *   Lock ID or FALSE.
    */
   public function lock(CronJobInterface $job);
diff --git a/src/Lock/Lock.php b/src/Lock/Lock.php
index 5e5e7c2..cd67aae 100644
--- a/src/Lock/Lock.php
+++ b/src/Lock/Lock.php
@@ -18,6 +18,9 @@ class Lock implements LockInterface {
 
   private $connection;
 
+  /**
+   *
+   */
   public function __construct(Connection $connection) {
     $this->connection = $connection;
   }
@@ -59,11 +62,11 @@ class Lock implements LockInterface {
   public function lock($job_id, $timeout = 30.0) {
     // First, ensure cleanup.
     if (!isset($this->locks)) {
-      $this->locks = array();
-      ultimate_cron_register_shutdown_function(array(
+      $this->locks = [];
+      ultimate_cron_register_shutdown_function([
         $this,
-        'shutdown'
-      ));
+        'shutdown',
+      ]);
     }
 
     $this->connection->setTarget(_ultimate_cron_get_transactional_safe_connection());
@@ -79,19 +82,21 @@ class Lock implements LockInterface {
 
       // Now we try to acquire the lock.
       $lock_id = $this->connection->insert('ultimate_cron_lock')
-        ->fields(array(
+        ->fields([
           'name' => $job_id,
           'current' => 0,
           'expire' => $expire,
-        ))
-      ->execute();
+        ])
+        ->execute();
 
       $this->locks[$lock_id] = TRUE;
 
       return $lock_id;
-    } catch (PDOException $e) {
+    }
+    catch (PDOException $e) {
       return FALSE;
-    } catch (IntegrityConstraintViolationException $e) {
+    }
+    catch (IntegrityConstraintViolationException $e) {
       return FALSE;
     }
   }
@@ -139,7 +144,7 @@ class Lock implements LockInterface {
    * @param float $timeout
    *   The timeout in seconds for the lock.
    *
-   * @return boolean
+   * @return bool
    *   TRUE if relock was successful.
    */
   public function reLock($lock_id, $timeout = 30.0) {
@@ -147,9 +152,9 @@ class Lock implements LockInterface {
     $timeout = max($timeout, 0.001);
     $expire = microtime(TRUE) + $timeout;
     return (bool) $this->connection->update('ultimate_cron_lock')
-      ->fields(array(
+      ->fields([
         'expire' => $expire,
-      ))
+      ])
       ->condition('lid', $lock_id)
       ->condition('current', 0)
       ->execute();
@@ -160,7 +165,7 @@ class Lock implements LockInterface {
    *
    * @param string $job_id
    *   Name of the lock.
-   * @param boolean $ignore_expiration
+   * @param bool $ignore_expiration
    *   Ignore expiration, just check if it's present.
    *   Used for retrieving the lock id of an expired lock.
    *
@@ -170,7 +175,7 @@ class Lock implements LockInterface {
   public function isLocked($job_id, $ignore_expiration = FALSE) {
     $now = microtime(TRUE);
     $result = $this->connection->select('ultimate_cron_lock', 'l')
-      ->fields('l', array('lid', 'expire'))
+      ->fields('l', ['lid', 'expire'])
       ->condition('name', $job_id)
       ->condition('current', 0)
       ->execute()
@@ -190,7 +195,7 @@ class Lock implements LockInterface {
   public function isLockedMultiple($job_ids) {
     $now = microtime(TRUE);
     $result = $this->connection->select('ultimate_cron_lock', 'l')
-      ->fields('l', array('lid', 'name', 'expire'))
+      ->fields('l', ['lid', 'name', 'expire'])
       ->condition('name', $job_ids, 'IN')
       ->condition('current', 0)
       ->execute()
@@ -221,7 +226,7 @@ class Lock implements LockInterface {
 
     do {
       $lids = $this->connection->select('ultimate_cron_lock', 'l')
-        ->fields('l', array('lid'))
+        ->fields('l', ['lid'])
         ->where('l.current = l.lid')
         ->range(0, 100)
         ->execute()
@@ -245,4 +250,5 @@ class Lock implements LockInterface {
       \Drupal::logger('ultimate_cron_lock')->info('Cleaned up @count expired locks', ['@count' => $count]);
     }
   }
+
 }
diff --git a/src/Lock/LockInterface.php b/src/Lock/LockInterface.php
index cfd3544..447d9c5 100644
--- a/src/Lock/LockInterface.php
+++ b/src/Lock/LockInterface.php
@@ -2,13 +2,13 @@
 
 namespace Drupal\ultimate_cron\Lock;
 
-
 /**
  * Class for handling lock functions.
  *
  * This is a pseudo namespace really. Should probably be refactored...
  */
 interface LockInterface {
+
   /**
    * Shutdown handler for releasing locks.
    */
@@ -22,7 +22,7 @@ interface LockInterface {
    * @param float $timeout
    *   The timeout in seconds for the lock.
    *
-   * @return boolean
+   * @return bool
    *   TRUE if relock was successful.
    */
   public function reLock($lock_id, $timeout = 30.0);
@@ -64,7 +64,7 @@ interface LockInterface {
    *
    * @param string $job_id
    *   Name of the lock.
-   * @param boolean $ignore_expiration
+   * @param bool $ignore_expiration
    *   Ignore expiration, just check if it's present.
    *   Used for retrieving the lock id of an expired lock.
    *
@@ -95,4 +95,5 @@ interface LockInterface {
    * Cleanup expired locks.
    */
   public function cleanup();
+
 }
diff --git a/src/Lock/LockMemcache.php b/src/Lock/LockMemcache.php
index 07ad114..a986ac7 100644
--- a/src/Lock/LockMemcache.php
+++ b/src/Lock/LockMemcache.php
@@ -1,6 +1,7 @@
 <?php
 
 namespace Drupal\ultimate_cron\Lock;
+
 /**
  * Class for handling lock functions.
  *
@@ -12,7 +13,7 @@ class LockMemcache {
   /**
    * Shutdown handler for releasing locks.
    */
-  static public function shutdown() {
+  public static function shutdown() {
     if (self::$locks) {
       foreach (array_keys(self::$locks) as $lock_id) {
         self::unlock($lock_id);
@@ -26,7 +27,7 @@ class LockMemcache {
    * @param string $lock_id
    *   The lock id to persist.
    */
-  static public function persist($lock_id) {
+  public static function persist($lock_id) {
     if (isset(self::$locks)) {
       unset(self::$locks[$lock_id]);
     }
@@ -43,14 +44,14 @@ class LockMemcache {
    * @return string
    *   The lock id acquired.
    */
-  static public function lock($name, $timeout = 30.0) {
+  public static function lock($name, $timeout = 30.0) {
     // First, ensure cleanup.
     if (!isset(self::$locks)) {
-      self::$locks = array();
-      ultimate_cron_register_shutdown_function(array(
+      self::$locks = [];
+      ultimate_cron_register_shutdown_function([
         'Drupal\ultimate_cron\Lock\LockMemcache',
-        'shutdown'
-      ));
+        'shutdown',
+      ]);
     }
 
     // Ensure that the timeout is at least 1 sec. This is a limitation
@@ -74,7 +75,7 @@ class LockMemcache {
    * @param string $name
    *   The name of the lock.
    */
-  static public function expire($name) {
+  public static function expire($name) {
     // Nothing to do here. Memcache handles this internally.
   }
 
@@ -84,7 +85,7 @@ class LockMemcache {
    * @param string $lock_id
    *   The lock id to release.
    */
-  static public function unlock($lock_id) {
+  public static function unlock($lock_id) {
     if (!preg_match('/(.*):memcache-lock.*/', $lock_id, $matches)) {
       return FALSE;
     }
@@ -113,10 +114,10 @@ class LockMemcache {
    * @param string $name
    *   Name of lock.
    *
-   * @return boolean
+   * @return bool
    *   Result of unlock.
    */
-  static private function unlockRaw($name, $lock_id = NULL) {
+  private static function unlockRaw($name, $lock_id = NULL) {
     $bin = variable_get('ultimate_cron_lock_memcache_bin', 'semaphore');
     if ($lock_id) {
       unset(self::$locks[$lock_id]);
@@ -132,10 +133,10 @@ class LockMemcache {
    * @param float $timeout
    *   The timeout in seconds for the lock.
    *
-   * @return boolean
+   * @return bool
    *   TRUE if relock was successful.
    */
-  static public function reLock($lock_id, $timeout = 30.0) {
+  public static function reLock($lock_id, $timeout = 30.0) {
     if (!preg_match('/(.*):memcache-lock.*/', $lock_id, $matches)) {
       return FALSE;
     }
@@ -163,14 +164,14 @@ class LockMemcache {
    *
    * @param string $name
    *   Name of the lock.
-   * @param boolean $ignore_expiration
+   * @param bool $ignore_expiration
    *   Ignore expiration, just check if it's present.
    *   Used for retrieving the lock id of an expired lock.
    *
    * @return mixed
    *   The lock id if found, otherwise FALSE.
    */
-  static public function isLocked($name, $ignore_expiration = FALSE) {
+  public static function isLocked($name, $ignore_expiration = FALSE) {
     $bin = variable_get('ultimate_cron_lock_memcache_bin', 'semaphore');
     $result = dmemcache_get($name, $bin);
     return $result ? $result : FALSE;
@@ -185,7 +186,7 @@ class LockMemcache {
    * @return array
    *   Array of lock ids.
    */
-  static public function isLockedMultiple($names) {
+  public static function isLockedMultiple($names) {
     $bin = variable_get('ultimate_cron_lock_memcache_bin', 'semaphore');
     $locks = dmemcache_get_multi($names, $bin);
     foreach ($names as $name) {
@@ -199,7 +200,8 @@ class LockMemcache {
   /**
    * Cleanup expired locks.
    */
-  static public function cleanup() {
+  public static function cleanup() {
     // Nothing to do here. Memcache handles this internally.
   }
+
 }
diff --git a/src/Logger/LogEntry.php b/src/Logger/LogEntry.php
index b7e6d46..af51e07 100644
--- a/src/Logger/LogEntry.php
+++ b/src/Logger/LogEntry.php
@@ -24,10 +24,12 @@ class LogEntry {
   public $message = '';
   public $severity = -1;
 
-  // Default 1MiB log entry.
+  /**
+   * Default 1MiB log entry.
+   */
   public $log_entry_size = 1048576;
 
-  public $log_entry_fields = array(
+  public $log_entry_fields = [
     'lid',
     'uid',
     'log_type',
@@ -36,7 +38,7 @@ class LogEntry {
     'init_message',
     'message',
     'severity',
-  );
+  ];
 
   public $logger;
   public $job;
@@ -66,7 +68,7 @@ class LogEntry {
    *   Log entry data.
    */
   public function getData() {
-    $result = array();
+    $result = [];
     foreach ($this->log_entry_fields as $field) {
       $result[$field] = $this->$field;
     }
@@ -109,7 +111,7 @@ class LogEntry {
    * @param int $level
    *   The log level, see \Drupal\Core\Logger\RfcLogLevel.
    */
-  public function log($message, $variables = array(), $level = RfcLogLevel::NOTICE) {
+  public function log($message, $variables = [], $level = RfcLogLevel::NOTICE) {
 
     if ($variables !== NULL && gettype($message) === 'string') {
       $message = t($message, $variables);
@@ -189,7 +191,7 @@ class LogEntry {
     $username = t('anonymous') . ' (0)';
     if ($this->uid) {
       $user = User::load($this->uid);
-      $username = $user ? new FormattableMarkup('@username (@uid)', array('@username' => $user->getDisplayName(), '@uid' => $user->id())) : t('N/A');
+      $username = $user ? new FormattableMarkup('@username (@uid)', ['@username' => $user->getDisplayName(), '@uid' => $user->id()]) : t('N/A');
     }
     return $username;
   }
@@ -202,10 +204,10 @@ class LogEntry {
       return $this->init_message ? $this->init_message . ' ' . t('by') . ' ' . $this->formatUser() : t('N/A');
     }
     else {
-      $registered = variable_get('ultimate_cron_hooks_registered', array());
-      return !empty($registered[$this->name]) ? t('Registered at @datetime', array(
+      $registered = variable_get('ultimate_cron_hooks_registered', []);
+      return !empty($registered[$this->name]) ? t('Registered at @datetime', [
         '@datetime' => \Drupal::service('date.formatter')->format($registered[$this->name], 'custom', 'Y-m-d H:i:s'),
-      )) : t('N/A');
+      ]) : t('N/A');
     }
   }
 
@@ -236,11 +238,11 @@ class LogEntry {
         $file = 'core/misc/icons/73b355/check.svg';
     }
     $status = ['#theme' => 'image', '#uri' => $file];
-    $severity_levels = array(
-        -1 => t('no info'),
-      ) + RfcLogLevel::getLevels();
+    $severity_levels = [
+      -1 => t('no info'),
+    ] + RfcLogLevel::getLevels();
     $title = $severity_levels[$this->severity];
-    return array($status, $title);
+    return [$status, $title];
   }
 
   /**
@@ -249,4 +251,5 @@ class LogEntry {
   public function save() {
     $this->logger->save($this);
   }
+
 }
diff --git a/src/Logger/LoggerBase.php b/src/Logger/LoggerBase.php
index 1e8f97d..8ebb803 100644
--- a/src/Logger/LoggerBase.php
+++ b/src/Logger/LoggerBase.php
@@ -5,7 +5,7 @@ namespace Drupal\ultimate_cron\Logger;
 use Drupal\ultimate_cron\CronPlugin;
 
 /**
- * Abstract class for Ultimate Cron loggers
+ * Abstract class for Ultimate Cron loggers.
  *
  * Each logger must implement its own functions for getting/setting data
  * from the its storage backend.
@@ -38,7 +38,7 @@ abstract class LoggerBase extends CronPlugin implements LoggerInterface {
     $log_entry->lid = $lock_id;
     $log_entry->start_time = microtime(TRUE);
     $log_entry->init_message = $init_message;
-    //$log_entry->save();
+    // $log_entry->save();
     return $log_entry;
   }
 
@@ -46,7 +46,7 @@ abstract class LoggerBase extends CronPlugin implements LoggerInterface {
    * {@inheritdoc}
    */
   public function loadLatestLogEntries(array $jobs, array $log_types) {
-    $logs = array();
+    $logs = [];
     foreach ($jobs as $job) {
       $logs[$job->id()] = $job->loadLatestLogEntry($log_types);
     }
diff --git a/src/Logger/LoggerManager.php b/src/Logger/LoggerManager.php
index 0ac89d9..29b7631 100644
--- a/src/Logger/LoggerManager.php
+++ b/src/Logger/LoggerManager.php
@@ -4,7 +4,6 @@ namespace Drupal\ultimate_cron\Logger;
 
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
-use Drupal\Core\Language\LanguageManager;
 use Drupal\Core\Plugin\DefaultPluginManager;
 
 /**
diff --git a/src/Logger/WatchdogLogger.php b/src/Logger/WatchdogLogger.php
index 56d69ec..84b8e86 100644
--- a/src/Logger/WatchdogLogger.php
+++ b/src/Logger/WatchdogLogger.php
@@ -49,7 +49,7 @@ class WatchdogLogger implements PsrLoggerInterface {
   /**
    * {@inheritdoc}
    */
-  public function log($level, $message, array $context = array()) {
+  public function log($level, $message, array $context = []) {
 
     if ($this->logEntries) {
 
@@ -78,10 +78,10 @@ class WatchdogLogger implements PsrLoggerInterface {
     // we cannot use that. Use PHPs register_shutdown_function() instead.
     if (!$this->shutdownRegistered) {
       ultimate_cron_register_shutdown_function(
-        array(
+        [
           $this,
-          'catchMessagesShutdownWrapper'
-        ), 'catch_messages'
+          'catchMessagesShutdownWrapper',
+        ], 'catch_messages'
       );
       $this->shutdownRegistered = TRUE;
     }
diff --git a/src/Plugin/ultimate_cron/Launcher/SerialLauncher.php b/src/Plugin/ultimate_cron/Launcher/SerialLauncher.php
index 7c1beee..7ff3341 100644
--- a/src/Plugin/ultimate_cron/Launcher/SerialLauncher.php
+++ b/src/Plugin/ultimate_cron/Launcher/SerialLauncher.php
@@ -34,53 +34,53 @@ class SerialLauncher extends LauncherBase implements PluginCleanupInterface {
    * {@inheritdoc}
    */
   public function defaultConfiguration() {
-    return array(
-      'timeouts' => array(
+    return [
+      'timeouts' => [
         'lock_timeout' => 3600,
         'max_execution_time' => 3600,
-      ),
-      'launcher' => array(
+      ],
+      'launcher' => [
         'max_threads' => 1,
         'thread' => 'any',
-      ),
-    ) + parent::defaultConfiguration();
+      ],
+    ] + parent::defaultConfiguration();
   }
 
   /**
    * {@inheritdoc}
    */
   public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
-    $form['timeouts'] = array(
+    $form['timeouts'] = [
       '#type' => 'fieldset',
       '#title' => t('Timeouts'),
-    );
+    ];
 
-    $form['launcher'] = array(
+    $form['launcher'] = [
       '#type' => 'fieldset',
       '#title' => t('Launching options'),
-    );
+    ];
 
-    $form['timeouts']['lock_timeout'] = array(
+    $form['timeouts']['lock_timeout'] = [
       '#title' => t("Job lock timeout"),
       '#type' => 'textfield',
       '#default_value' => $this->configuration['timeouts']['lock_timeout'],
       '#description' => t('Number of seconds to keep lock on job.'),
       '#fallback' => TRUE,
       '#required' => TRUE,
-    );
+    ];
 
     // @todo: Figure this out when converting global settings to use plugin
     // classes.
     if (FALSE) {
-      $form['timeouts']['max_execution_time'] = array(
+      $form['timeouts']['max_execution_time'] = [
         '#title' => t("Maximum execution time"),
         '#type' => 'textfield',
         '#default_value' => $this->configuration['timeouts']['max_execution_time'],
         '#description' => t('Maximum execution time for a cron run in seconds.'),
         '#fallback' => TRUE,
         '#required' => TRUE,
-      );
-      $form['launcher']['max_threads'] = array(
+      ];
+      $form['launcher']['max_threads'] = [
         '#title' => t("Maximum number of launcher threads"),
         '#type' => 'number',
         '#default_value' => $this->configuration['launcher']['max_threads'],
@@ -88,7 +88,7 @@ class SerialLauncher extends LauncherBase implements PluginCleanupInterface {
         '#fallback' => TRUE,
         '#required' => TRUE,
         '#weight' => 1,
-      );
+      ];
 
       return $form;
     }
@@ -96,16 +96,15 @@ class SerialLauncher extends LauncherBase implements PluginCleanupInterface {
       $max_threads = isset($this->configuration['launcher']['max_threads']) ? $this->configuration['launcher']['max_threads'] : 1;
     }
 
-    $options = array(
+    $options = [
       'any' => t('-- Any -- '),
       'fixed' => t('-- Fixed -- '),
-    );
+    ];
     for ($i = 1; $i <= $max_threads; $i++) {
       $options[$i] = $i;
     }
 
-
-    $form['launcher']['thread'] = array(
+    $form['launcher']['thread'] = [
       '#title' => t("Run in thread"),
       '#type' => 'select',
       '#default_value' => isset($this->configuration['launcher']['thread']) ? $this->configuration['launcher']['thread'] : 'any',
@@ -114,7 +113,7 @@ class SerialLauncher extends LauncherBase implements PluginCleanupInterface {
       '#fallback' => TRUE,
       '#required' => TRUE,
       '#weight' => 2,
-    );
+    ];
     return $form;
   }
 
@@ -126,9 +125,9 @@ class SerialLauncher extends LauncherBase implements PluginCleanupInterface {
     $values = & $form_state['values']['configuration'][$this->type][$this->name];
     if (!$job) {
       if (intval($values['max_threads']) <= 0) {
-        form_set_error("settings[$this->type][$this->name", t('%title must be greater than 0', array(
-          '%title' => $elements['launcher']['max_threads']['#title']
-        )));
+        form_set_error("settings[$this->type][$this->name", t('%title must be greater than 0', [
+          '%title' => $elements['launcher']['max_threads']['#title'],
+        ]));
       }
     }
   }
@@ -174,7 +173,7 @@ class SerialLauncher extends LauncherBase implements PluginCleanupInterface {
    * {@inheritdoc}
    */
   public function isLockedMultiple(array $jobs) {
-    $names = array();
+    $names = [];
     foreach ($jobs as $job) {
       $names[] = $job->id();
     }
@@ -198,12 +197,12 @@ class SerialLauncher extends LauncherBase implements PluginCleanupInterface {
    * {@inheritdoc}
    */
   public function launch(CronJobInterface $job) {
-    \Drupal::moduleHandler()->invokeAll('cron_pre_launch', array($this));
+    \Drupal::moduleHandler()->invokeAll('cron_pre_launch', [$this]);
 
     if ($this->currentThread) {
-      $init_message = t('Launched in thread @current_thread', array(
+      $init_message = t('Launched in thread @current_thread', [
         '@current_thread' => $this->currentThread,
-      ));
+      ]);
     }
     else {
       $init_message = t('Launched manually');
@@ -211,7 +210,7 @@ class SerialLauncher extends LauncherBase implements PluginCleanupInterface {
 
     // Run job.
     $job_launch = $job->run($init_message);
-    \Drupal::moduleHandler()->invokeAll('cron_post_launch', array($this));
+    \Drupal::moduleHandler()->invokeAll('cron_post_launch', [$this]);
 
     return $job_launch;
   }
@@ -234,11 +233,11 @@ class SerialLauncher extends LauncherBase implements PluginCleanupInterface {
           if (!$lock_service->isLocked($lock_name)) {
             if ($lock) {
               if ($lock_id = $lock_service->lock($lock_name, $lock_timeout)) {
-                return array($thread, $lock_id);
+                return [$thread, $lock_id];
               }
             }
             else {
-              return array($thread, FALSE);
+              return [$thread, FALSE];
             }
           }
         }
@@ -251,7 +250,7 @@ class SerialLauncher extends LauncherBase implements PluginCleanupInterface {
         $sleep = min(500000, $sleep + 25000, $delay);
       }
     } while ($delay > 0);
-    return array(FALSE, FALSE);
+    return [FALSE, FALSE];
   }
 
   /**
@@ -286,9 +285,9 @@ class SerialLauncher extends LauncherBase implements PluginCleanupInterface {
         $lock_id = $lock->lock($lock_name, $lock_timeout);
       }
       if (!$lock_id) {
-        \Drupal::logger('serial_launcher')->warning("Thread @thread is already running", array(
+        \Drupal::logger('serial_launcher')->warning("Thread @thread is already running", [
           '@thread' => $thread,
-        ));
+        ]);
       }
     }
     else {
@@ -318,9 +317,9 @@ class SerialLauncher extends LauncherBase implements PluginCleanupInterface {
     $lock_name = 'ultimate_cron_serial_launcher_' . $thread;
     foreach ($jobs as $job) {
       $configuration = $job->getConfiguration('launcher');
-      $configuration['launcher'] += array(
+      $configuration['launcher'] += [
         'thread' => 'any',
-      );
+      ];
       switch ($configuration['launcher']['thread']) {
         case 'any':
           $configuration['launcher']['thread'] = $thread;
diff --git a/src/Plugin/ultimate_cron/Logger/CacheLogger.php b/src/Plugin/ultimate_cron/Logger/CacheLogger.php
index a97070c..8320a7e 100644
--- a/src/Plugin/ultimate_cron/Logger/CacheLogger.php
+++ b/src/Plugin/ultimate_cron/Logger/CacheLogger.php
@@ -37,19 +37,19 @@ class CacheLogger extends LoggerBase implements ContainerFactoryPluginInterface
   /**
    * {@inheritdoc}
    */
-  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition)  {
+  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
     $bin = isset($configuration['bin']) ? $configuration['bin'] : 'ultimate_cron_logger';
-    return new static ($configuration, $plugin_id, $plugin_definition, $container->get('cache.' . $bin));
+    return new static($configuration, $plugin_id, $plugin_definition, $container->get('cache.' . $bin));
   }
 
   /**
    * {@inheritdoc}
    */
   public function defaultConfiguration() {
-    return array(
+    return [
       'bin' => 'ultimate_cron_logger',
       'timeout' => Cache::PERMANENT,
-    );
+    ];
   }
 
   /**
@@ -58,7 +58,7 @@ class CacheLogger extends LoggerBase implements ContainerFactoryPluginInterface
   public function load($name, $lock_id = NULL, array $log_types = [ULTIMATE_CRON_LOG_TYPE_NORMAL]) {
     $log_entry = new LogEntry($name, $this);
     if (!$lock_id) {
-      $cache =  $this->cache->get('uc-name:' . $name, TRUE);
+      $cache = $this->cache->get('uc-name:' . $name, TRUE);
       if (empty($cache) || empty($cache->data)) {
         return $log_entry;
       }
@@ -78,30 +78,30 @@ class CacheLogger extends LoggerBase implements ContainerFactoryPluginInterface
    */
   public function getLogEntries($name, array $log_types, $limit = 10) {
     $log_entry = $this->load($name);
-    return $log_entry->lid ? array($log_entry) : array();
+    return $log_entry->lid ? [$log_entry] : [];
   }
 
   /**
    * {@inheritdoc}
    */
   public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
-    $form['bin'] = array(
+    $form['bin'] = [
       '#type' => 'textfield',
       '#title' => t('Cache bin'),
       '#description' => t('Select which cache bin to use for storing logs.'),
       '#default_value' => $this->configuration['bin'],
       '#fallback' => TRUE,
       '#required' => TRUE,
-    );
+    ];
 
-    $form['timeout'] = array(
+    $form['timeout'] = [
       '#type' => 'textfield',
       '#title' => t('Cache timeout'),
       '#description' => t('Seconds before cache entry expires (0 = never, -1 = on next general cache wipe).'),
       '#default_value' => $this->configuration['timeout'],
       '#fallback' => TRUE,
       '#required' => TRUE,
-    );
+    ];
 
     return $form;
   }
diff --git a/src/Plugin/ultimate_cron/Logger/DatabaseLogger.php b/src/Plugin/ultimate_cron/Logger/DatabaseLogger.php
index dbd5dfb..c04aa59 100644
--- a/src/Plugin/ultimate_cron/Logger/DatabaseLogger.php
+++ b/src/Plugin/ultimate_cron/Logger/DatabaseLogger.php
@@ -55,19 +55,18 @@ class DatabaseLogger extends LoggerBase implements PluginCleanupInterface, Conta
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
-    return new static ($configuration, $plugin_id, $plugin_definition, $container->get('database'));
+    return new static($configuration, $plugin_id, $plugin_definition, $container->get('database'));
   }
 
-
   /**
    * {@inheritdoc}
    */
   public function defaultConfiguration() {
-    return array(
+    return [
       'method' => static::CLEANUP_METHOD_RETAIN,
       'expire' => 86400 * 14,
       'retain' => 1000,
-    );
+    ];
   }
 
   /**
@@ -101,10 +100,10 @@ class DatabaseLogger extends LoggerBase implements PluginCleanupInterface, Conta
     }
     if ($count_deleted) {
       \Drupal::logger('database_logger')
-        ->info('@count_entries log entries removed for @jobs_count jobs', array(
+        ->info('@count_entries log entries removed for @jobs_count jobs', [
           '@count_entries' => array_sum($count_deleted),
           '@jobs_count' => count($count_deleted),
-        ));
+        ]);
     }
   }
 
@@ -125,9 +124,9 @@ class DatabaseLogger extends LoggerBase implements PluginCleanupInterface, Conta
 
       case static::CLEANUP_METHOD_RETAIN:
         $expire = 0;
-        $max = $this->connection->query("SELECT COUNT(lid) FROM {ultimate_cron_log} WHERE name = :name", array(
+        $max = $this->connection->query("SELECT COUNT(lid) FROM {ultimate_cron_log} WHERE name = :name", [
           ':name' => $job->id(),
-        ))->fetchField();
+        ])->fetchField();
         $max -= $this->configuration['retain'];
         if ($max <= 0) {
           return;
@@ -136,9 +135,9 @@ class DatabaseLogger extends LoggerBase implements PluginCleanupInterface, Conta
         break;
 
       default:
-        \Drupal::logger('ultimate_cron')->warning('Invalid cleanup method: @method', array(
+        \Drupal::logger('ultimate_cron')->warning('Invalid cleanup method: @method', [
           '@method' => $this->configuration['method'],
-        ));
+        ]);
         return;
     }
 
@@ -146,7 +145,7 @@ class DatabaseLogger extends LoggerBase implements PluginCleanupInterface, Conta
     $count = 0;
     do {
       $lids = $this->connection->select('ultimate_cron_log', 'l')
-        ->fields('l', array('lid'))
+        ->fields('l', ['lid'])
         ->condition('l.name', $job->id())
         ->condition('l.start_time', microtime(TRUE) - $expire, '<')
         ->range(0, $chunk)
@@ -170,45 +169,45 @@ class DatabaseLogger extends LoggerBase implements PluginCleanupInterface, Conta
    * {@inheritdoc}
    */
   public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
-    $form['method'] = array(
+    $form['method'] = [
       '#type' => 'select',
       '#title' => t('Log entry cleanup method'),
       '#description' => t('Select which method to use for cleaning up logs.'),
       '#options' => $this->getMethodOptions(),
       '#default_value' => $this->configuration['method'],
-    );
+    ];
 
-    $form['expire'] = array(
+    $form['expire'] = [
       '#type' => 'textfield',
       '#title' => t('Log entry expiration'),
       '#description' => t('Remove log entries older than X seconds.'),
       '#default_value' => $this->configuration['expire'],
       '#fallback' => TRUE,
-      '#states' => array(
-        'visible' => array(
-          ':input[name="logger[settings][method]"]' => array('value' => static::CLEANUP_METHOD_EXPIRE),
-        ),
-        'required' => array(
-          ':input[name="logger[settings][method]"]' => array('value' => static::CLEANUP_METHOD_EXPIRE),
-        ),
-      ),
-    );
-
-    $form['retain'] = array(
+      '#states' => [
+        'visible' => [
+          ':input[name="logger[settings][method]"]' => ['value' => static::CLEANUP_METHOD_EXPIRE],
+        ],
+        'required' => [
+          ':input[name="logger[settings][method]"]' => ['value' => static::CLEANUP_METHOD_EXPIRE],
+        ],
+      ],
+    ];
+
+    $form['retain'] = [
       '#type' => 'textfield',
       '#title' => t('Retain logs'),
       '#description' => t('Retain X amount of log entries.'),
       '#default_value' => $this->configuration['retain'],
       '#fallback' => TRUE,
-      '#states' => array(
-        'visible' => array(
-          ':input[name="logger[settings][method]"]' => array('value' => static::CLEANUP_METHOD_RETAIN),
-        ),
-        'required' => array(
-          ':input[name="logger[settings][method]"]' => array('value' => static::CLEANUP_METHOD_RETAIN),
-        ),
-      ),
-    );
+      '#states' => [
+        'visible' => [
+          ':input[name="logger[settings][method]"]' => ['value' => static::CLEANUP_METHOD_RETAIN],
+        ],
+        'required' => [
+          ':input[name="logger[settings][method]"]' => ['value' => static::CLEANUP_METHOD_RETAIN],
+        ],
+      ],
+    ];
 
     return $form;
   }
@@ -222,7 +221,7 @@ class DatabaseLogger extends LoggerBase implements PluginCleanupInterface, Conta
         ->fields('l')
         ->condition('l.lid', $lock_id)
         ->execute()
-        ->fetchObject(LogEntry::class, array($name, $this));
+        ->fetchObject(LogEntry::class, [$name, $this]);
     }
     else {
       $log_entry = $this->connection->select('ultimate_cron_log', 'l')
@@ -233,7 +232,7 @@ class DatabaseLogger extends LoggerBase implements PluginCleanupInterface, Conta
         ->orderBy('l.end_time', 'DESC')
         ->range(0, 1)
         ->execute()
-        ->fetchObject(LogEntry::class, array($name, $this));
+        ->fetchObject(LogEntry::class, [$name, $this]);
     }
     if ($log_entry) {
       $log_entry->finished = TRUE;
@@ -264,9 +263,9 @@ class DatabaseLogger extends LoggerBase implements PluginCleanupInterface, Conta
         LIMIT 1
       ) AS lid FROM {ultimate_cron_log} l3
       GROUP BY l3.name
-    ) l2 on l2.lid = l.lid", array(':log_types' => $log_types));
+    ) l2 on l2.lid = l.lid", [':log_types' => $log_types]);
 
-    $log_entries = array();
+    $log_entries = [];
     while ($object = $result->fetchObject()) {
       if (isset($jobs[$object->name])) {
         $log_entries[$object->name] = new LogEntry($object->name, $this);
@@ -295,11 +294,11 @@ class DatabaseLogger extends LoggerBase implements PluginCleanupInterface, Conta
       ->orderBy('l.start_time', 'DESC')
       ->execute();
 
-    $log_entries = array();
-    while ($object = $result->fetchObject(LogEntry::class, array(
+    $log_entries = [];
+    while ($object = $result->fetchObject(LogEntry::class, [
       $name,
-      $this
-    ))) {
+      $this,
+    ])) {
       $log_entries[$object->lid] = $object;
     }
 
@@ -349,9 +348,9 @@ class DatabaseLogger extends LoggerBase implements PluginCleanupInterface, Conta
         // Let's create a new log entry.
         $lid = $log_entry->lid . '-' . uniqid('', TRUE);
         $log_entry->message = (string) t('Lock #@original_lid was already closed and logged. Creating a new log entry #@lid', [
-            '@original_lid' => $log_entry->lid,
-            '@lid' => $lid,
-          ]) . "\n" . $log_entry->message;
+          '@original_lid' => $log_entry->lid,
+          '@lid' => $lid,
+        ]) . "\n" . $log_entry->message;
         $log_entry->severity = $log_entry->severity >= 0 && $log_entry->severity < RfcLogLevel::ERROR ? $log_entry->severity : RfcLogLevel::ERROR;
         $log_entry->lid = $lid;
 
@@ -390,11 +389,11 @@ class DatabaseLogger extends LoggerBase implements PluginCleanupInterface, Conta
    * @return array
    */
   protected function getMethodOptions() {
-    return array(
+    return [
       static::CLEANUP_METHOD_DISABLED => t('Disabled'),
       static::CLEANUP_METHOD_EXPIRE => t('Remove logs older than a specified age'),
       static::CLEANUP_METHOD_RETAIN => t('Retain only a specific amount of log entries'),
-    );
+    ];
   }
 
 }
diff --git a/src/Plugin/ultimate_cron/Scheduler/Crontab.php b/src/Plugin/ultimate_cron/Scheduler/Crontab.php
index 1795ad5..fb93a8d 100644
--- a/src/Plugin/ultimate_cron/Scheduler/Crontab.php
+++ b/src/Plugin/ultimate_cron/Scheduler/Crontab.php
@@ -3,7 +3,6 @@
 namespace Drupal\ultimate_cron\Plugin\ultimate_cron\Scheduler;
 
 use Drupal\Core\Form\FormStateInterface;
-use Drupal\ultimate_cron\CronJobInterface;
 use Drupal\ultimate_cron\CronRule;
 use Drupal\ultimate_cron\Entity\CronJob;
 
@@ -17,15 +16,17 @@ use Drupal\ultimate_cron\Entity\CronJob;
  * )
  */
 class Crontab extends SchedulerBase {
+
   /**
    * Default settings.
+   *
    * @todo: $catch_up is randomly failing when value is low in some situation. 0 value is ignoring catch_up checks.
    */
   public function defaultConfiguration() {
-    return array(
-      'rules' => array('0+@ */3 * * *'),
+    return [
+      'rules' => ['0+@ */3 * * *'],
       'catch_up' => '0',
-    );
+    ];
   }
 
   /**
@@ -54,9 +55,9 @@ class Crontab extends SchedulerBase {
         $next_schedule = $next_schedule > $result ? $result : $next_schedule;
       }
     }
-    $parsed .= t('Next scheduled run at @datetime', array(
-      '@datetime' => \Drupal::service('date.formatter')->format($next_schedule, 'custom', 'Y-m-d H:i:s')
-    ));
+    $parsed .= t('Next scheduled run at @datetime', [
+      '@datetime' => \Drupal::service('date.formatter')->format($next_schedule, 'custom', 'Y-m-d H:i:s'),
+    ]);
     return $parsed;
   }
 
@@ -64,36 +65,36 @@ class Crontab extends SchedulerBase {
    * {@inheritdoc}
    */
   public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
-    $form['rules'][0] = array(
+    $form['rules'][0] = [
       '#title' => t("Rules"),
       '#type' => 'textfield',
-      '#default_value' =>  $this->configuration['rules'],
+      '#default_value' => $this->configuration['rules'],
       '#description' => t('Comma separated list of crontab rules.'),
       '#fallback' => TRUE,
       '#required' => TRUE,
       // @todo: check this out.
-      //'#element_validate' => array('ultimate_cron_plugin_crontab_element_validate_rule'),
-    );
+      // '#element_validate' => array('ultimate_cron_plugin_crontab_element_validate_rule'),
+    ];
 
-    $form['rules_help'] = array(
+    $form['rules_help'] = [
       '#type' => 'fieldset',
       '#title' => t('Rules help'),
       '#collapsible' => TRUE,
       '#collapsed' => TRUE,
-    );
+    ];
 
-    $form['rules_help']['info'] = array(
+    $form['rules_help']['info'] = [
       '#markup' => file_get_contents(drupal_get_path('module', 'ultimate_cron') . '/help/rules.html'),
-    );
+    ];
 
-    $form['catch_up'] = array(
+    $form['catch_up'] = [
       '#title' => t("Catch up"),
       '#type' => 'textfield',
       '#default_value' => $this->configuration['catch_up'],
       '#description' => t("Don't run job after X seconds of rule."),
       '#fallback' => TRUE,
       '#required' => TRUE,
-    );
+    ];
 
     return $form;
   }
@@ -135,7 +136,7 @@ class Crontab extends SchedulerBase {
   /**
    * {@inheritdoc}
    */
-  static public function shouldRun($rules, $job_last_ran, $time = NULL, $catch_up = 0, $skew = 0) {
+  public static function shouldRun($rules, $job_last_ran, $time = NULL, $catch_up = 0, $skew = 0) {
     $time = is_null($time) ? time() : $time;
     foreach ($rules as $rule) {
       $cron = CronRule::factory($rule, $time, $skew);
@@ -190,4 +191,5 @@ class Crontab extends SchedulerBase {
   protected function getSkew(CronJob $job) {
     return $job->getUniqueID() & 0xff;
   }
+
 }
diff --git a/src/Plugin/ultimate_cron/Scheduler/SchedulerBase.php b/src/Plugin/ultimate_cron/Scheduler/SchedulerBase.php
index 8411c6e..e0f6253 100644
--- a/src/Plugin/ultimate_cron/Scheduler/SchedulerBase.php
+++ b/src/Plugin/ultimate_cron/Scheduler/SchedulerBase.php
@@ -1,12 +1,13 @@
 <?php
 
 namespace Drupal\ultimate_cron\Plugin\ultimate_cron\Scheduler;
+
 use Drupal\ultimate_cron\Entity\CronJob;
 use Drupal\ultimate_cron\CronPlugin;
 use Drupal\ultimate_cron\Scheduler\SchedulerInterface;
 
 /**
- * Abstract class for Ultimate Cron schedulers
+ * Abstract class for Ultimate Cron schedulers.
  *
  * A scheduler is responsible for telling Ultimate Cron whether a job should
  * run or not.
@@ -22,13 +23,14 @@ use Drupal\ultimate_cron\Scheduler\SchedulerInterface;
  *       in seconds.
  */
 abstract class SchedulerBase extends CronPlugin implements SchedulerInterface {
+
   /**
    * Check job schedule.
    *
-   * @param CronJob $job
+   * @param \Drupal\ultimate_cron\Entity\CronJob $job
    *   The job to check schedule for.
    *
-   * @return boolean
+   * @return bool
    *   TRUE if job is scheduled to run.
    */
   abstract public function isScheduled(CronJob $job);
@@ -43,4 +45,5 @@ abstract class SchedulerBase extends CronPlugin implements SchedulerInterface {
    *   FALSE if job is behind its schedule or number of seconds behind.
    */
   abstract public function isBehind(CronJob $job);
+
 }
diff --git a/src/Plugin/ultimate_cron/Scheduler/Simple.php b/src/Plugin/ultimate_cron/Scheduler/Simple.php
index b65b217..c15cb0c 100644
--- a/src/Plugin/ultimate_cron/Scheduler/Simple.php
+++ b/src/Plugin/ultimate_cron/Scheduler/Simple.php
@@ -1,8 +1,8 @@
 <?php
 
 namespace Drupal\ultimate_cron\Plugin\ultimate_cron\Scheduler;
+
 use Drupal\Core\Form\FormStateInterface;
-use Drupal\ultimate_cron\CronRule;
 use Drupal\ultimate_cron\Entity\CronJob;
 
 /**
@@ -16,7 +16,7 @@ use Drupal\ultimate_cron\Entity\CronJob;
  */
 class Simple extends Crontab {
 
-  public $presets = array(
+  public $presets = [
     '* * * * *' => 60,
     '*/5+@ * * * *' => 300,
     '*/15+@ * * * *' => 900,
@@ -27,15 +27,15 @@ class Simple extends Crontab {
     '0+@ */12 * * *' => 43200,
     '0+@ 0 * * *' => 86400,
     '0+@ 0 * * 0' => 604800,
-  );
+  ];
 
   /**
    * {@inheritdoc}
    */
   public function defaultConfiguration() {
-    return array(
-      'rules' => array('*/15+@ * * * *'),
-    ) + parent::defaultConfiguration();
+    return [
+      'rules' => ['*/15+@ * * * *'],
+    ] + parent::defaultConfiguration();
   }
 
   /**
@@ -53,9 +53,9 @@ class Simple extends Crontab {
    * {@inheritdoc}
    */
   public function formatLabel(CronJob $job) {
-    return t('Every @interval', array(
+    return t('Every @interval', [
       '@interval' => \Drupal::service('date.formatter')->formatInterval($this->presets[$this->configuration['rules'][0]]),
-    ));
+    ]);
   }
 
   /**
@@ -63,9 +63,9 @@ class Simple extends Crontab {
    */
   public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
     $date_formatter = \Drupal::service('date.formatter');
-    $intervals = array_map(array($date_formatter, 'formatInterval'), $this->presets);
+    $intervals = array_map([$date_formatter, 'formatInterval'], $this->presets);
 
-    $form['rules'][0] = array(
+    $form['rules'][0] = [
       '#type' => 'select',
       '#title' => t('Run cron every'),
       '#default_value' => $this->configuration['rules'][0],
@@ -73,8 +73,9 @@ class Simple extends Crontab {
       '#options' => $intervals,
       '#fallback' => TRUE,
       '#required' => TRUE,
-    );
+    ];
 
     return $form;
   }
+
 }
diff --git a/src/PluginCleanupInterface.php b/src/PluginCleanupInterface.php
index 4df5eee..b865629 100644
--- a/src/PluginCleanupInterface.php
+++ b/src/PluginCleanupInterface.php
@@ -10,6 +10,6 @@ interface PluginCleanupInterface {
   /**
    * Cleans and purges data stored by this plugin.
    */
-  function cleanup();
+  public function cleanup();
 
 }
diff --git a/src/Progress/Progress.php b/src/Progress/Progress.php
index 859a370..a567959 100644
--- a/src/Progress/Progress.php
+++ b/src/Progress/Progress.php
@@ -2,9 +2,11 @@
 
 namespace Drupal\ultimate_cron\Progress;
 
-use Drupal\Core\KeyValueStore\KeyValueFactory;
 use Drupal\Core\KeyValueStore\KeyValueFactoryInterface;
 
+/**
+ *
+ */
 class Progress implements ProgressInterface {
   protected $progressUpdated = 0;
   protected $interval = 1;
@@ -36,7 +38,7 @@ class Progress implements ProgressInterface {
   /**
    * {@inheritdoc}
    */
-   public function getProgressMultiple($job_ids) {
+  public function getProgressMultiple($job_ids) {
     $values = $this->keyValue->getMultiple($job_ids);
 
     return $values;
@@ -54,4 +56,5 @@ class Progress implements ProgressInterface {
     }
     return FALSE;
   }
+
 }
diff --git a/src/Progress/ProgressInterface.php b/src/Progress/ProgressInterface.php
index e4661c1..5c0a863 100644
--- a/src/Progress/ProgressInterface.php
+++ b/src/Progress/ProgressInterface.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\ultimate_cron\Progress;
 
+/**
+ *
+ */
 interface ProgressInterface {
 
   /**
@@ -36,4 +39,5 @@ interface ProgressInterface {
    *   The progress of this job.
    */
   public function getProgress($job_id);
+
 }
diff --git a/src/Progress/ProgressMemcache.php b/src/Progress/ProgressMemcache.php
index dedb9c3..cad7c1b 100644
--- a/src/Progress/ProgressMemcache.php
+++ b/src/Progress/ProgressMemcache.php
@@ -2,13 +2,14 @@
 
 namespace Drupal\ultimate_cron\Progress;
 
-use Drupal\ultimate_cron\Progress;
-
+/**
+ *
+ */
 class ProgressMemcache {
   public $name;
   public $progressUpdated = 0;
   public $interval = 1;
-  static public $instances = array();
+  static public $instances = [];
 
   /**
    * Constructor.
@@ -31,10 +32,10 @@ class ProgressMemcache {
    * @param float $interval
    *   How often the database should be updated with the progress.
    *
-   * @return Progress
+   * @return \Drupal\ultimate_cron\Progress
    *   The object.
    */
-  static public function factory($name, $interval = 1) {
+  public static function factory($name, $interval = 1) {
     if (!isset(self::$instances[$name])) {
       self::$instances[$name] = new ProgressMemcache($name, $interval);
     }
@@ -63,15 +64,15 @@ class ProgressMemcache {
    * @return array
    *   Progress of jobs, keyed by job name.
    */
-  static public function getProgressMultiple($names) {
-    $keys = array();
+  public static function getProgressMultiple($names) {
+    $keys = [];
     foreach ($names as $name) {
       $keys[] = 'uc-progress:' . $name;
     }
     $bin = variable_get('ultimate_cron_progress_memcache_bin', 'progress');
     $values = dmemcache_get_multi($keys, $bin);
 
-    $result = array();
+    $result = [];
     foreach ($names as $name) {
       $result[$name] = isset($values['uc-progress:' . $name]) ? $values['uc-progress:' . $name] : FALSE;
     }
@@ -94,4 +95,5 @@ class ProgressMemcache {
     }
     return FALSE;
   }
+
 }
diff --git a/src/ProxyClass/UltimateCron.php b/src/ProxyClass/UltimateCron.php
index ec959a6..9b27664 100644
--- a/src/ProxyClass/UltimateCron.php
+++ b/src/ProxyClass/UltimateCron.php
@@ -1,75 +1,74 @@
 <?php
 
+use Drupal\Core\CronInterface;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+
 namespace Drupal\ultimate_cron\ProxyClass {
 
+  /**
+   * Provides a proxy class for \Drupal\ultimate_cron\UltimateCron.
+   *
+   * @see \Drupal\Component\ProxyBuilder
+   */
+  class UltimateCron implements CronInterface {
+
+    use \Drupal\Core\DependencyInjection\DependencySerializationTrait;
+
     /**
-     * Provides a proxy class for \Drupal\ultimate_cron\UltimateCron.
+     * The id of the original proxied service.
      *
-     * @see \Drupal\Component\ProxyBuilder
+     * @var string
      */
-    class UltimateCron implements \Drupal\Core\CronInterface
-    {
-
-        use \Drupal\Core\DependencyInjection\DependencySerializationTrait;
-
-        /**
-         * The id of the original proxied service.
-         *
-         * @var string
-         */
-        protected $drupalProxyOriginalServiceId;
-
-        /**
-         * The real proxied service, after it was lazy loaded.
-         *
-         * @var \Drupal\ultimate_cron\UltimateCron
-         */
-        protected $service;
+    protected $drupalProxyOriginalServiceId;
 
-        /**
-         * The service container.
-         *
-         * @var \Symfony\Component\DependencyInjection\ContainerInterface
-         */
-        protected $container;
+    /**
+     * The real proxied service, after it was lazy loaded.
+     *
+     * @var \Drupal\ultimate_cron\UltimateCron
+     */
+    protected $service;
 
-        /**
-         * Constructs a ProxyClass Drupal proxy object.
-         *
-         * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
-         *   The container.
-         * @param string $drupal_proxy_original_service_id
-         *   The service ID of the original service.
-         */
-        public function __construct(\Symfony\Component\DependencyInjection\ContainerInterface $container, $drupal_proxy_original_service_id)
-        {
-            $this->container = $container;
-            $this->drupalProxyOriginalServiceId = $drupal_proxy_original_service_id;
-        }
+    /**
+     * The service container.
+     *
+     * @var \Symfony\Component\DependencyInjection\ContainerInterface
+     */
+    protected $container;
 
-        /**
-         * Lazy loads the real service from the container.
-         *
-         * @return object
-         *   Returns the constructed real service.
-         */
-        protected function lazyLoadItself()
-        {
-            if (!isset($this->service)) {
-                $this->service = $this->container->get($this->drupalProxyOriginalServiceId);
-            }
+    /**
+     * Constructs a ProxyClass Drupal proxy object.
+     *
+     * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+     *   The container.
+     * @param string $drupal_proxy_original_service_id
+     *   The service ID of the original service.
+     */
+    public function __construct(ContainerInterface $container, $drupal_proxy_original_service_id) {
+      $this->container = $container;
+      $this->drupalProxyOriginalServiceId = $drupal_proxy_original_service_id;
+    }
 
-            return $this->service;
-        }
+    /**
+     * Lazy loads the real service from the container.
+     *
+     * @return object
+     *   Returns the constructed real service.
+     */
+    protected function lazyLoadItself() {
+      if (!isset($this->service)) {
+        $this->service = $this->container->get($this->drupalProxyOriginalServiceId);
+      }
 
-        /**
-         * {@inheritdoc}
-         */
-        public function run()
-        {
-            return $this->lazyLoadItself()->run();
-        }
+      return $this->service;
+    }
 
+    /**
+     * {@inheritdoc}
+     */
+    public function run() {
+      return $this->lazyLoadItself()->run();
     }
 
+  }
+
 }
diff --git a/src/QueueSettings.php b/src/QueueSettings.php
index cb334d4..6d1d8e3 100644
--- a/src/QueueSettings.php
+++ b/src/QueueSettings.php
@@ -3,14 +3,12 @@
 namespace Drupal\ultimate_cron;
 
 use Drupal\Core\Logger\RfcLogLevel;
-use Drupal\ultimate_cron\Entity\CronJob;
-use Drupal\ultimate_cron\TaggedSettings;
 
 /**
  * Queue settings plugin class.
  */
 class QueueSettings extends TaggedSettings {
-  static private $throttled = array();
+  static private $throttled = [];
   static private $queues = NULL;
 
   /**
@@ -24,7 +22,7 @@ class QueueSettings extends TaggedSettings {
    */
   private function get_queues() {
     if (!isset(self::$queues)) {
-      $queues = array();
+      $queues = [];
       foreach (module_implements('cron_queue_info') as $module) {
         $items = module_invoke($module, 'cron_queue_info');
         if (is_array($items)) {
@@ -44,7 +42,7 @@ class QueueSettings extends TaggedSettings {
    * Implements hook_cronapi().
    */
   public function cronapi() {
-    $items = array();
+    $items = [];
     if (!variable_get($this->key . '_enabled', TRUE)) {
       return $items;
     }
@@ -57,26 +55,26 @@ class QueueSettings extends TaggedSettings {
         continue;
       }
 
-      $items['queue_' . $name] = array(
-        'title' => t('Queue: @name', array('@name' => $name)),
-        'callback' => array(get_class($this), 'worker_callback'),
-        'scheduler' => array(
-          'simple' => array(
-            'rules' => array('* * * * *'),
-          ),
-          'crontab' => array(
-            'rules' => array('* * * * *'),
-          ),
-        ),
-        'settings' => array(
-          'queue' => array(
+      $items['queue_' . $name] = [
+        'title' => t('Queue: @name', ['@name' => $name]),
+        'callback' => [get_class($this), 'worker_callback'],
+        'scheduler' => [
+          'simple' => [
+            'rules' => ['* * * * *'],
+          ],
+          'crontab' => [
+            'rules' => ['* * * * *'],
+          ],
+        ],
+        'settings' => [
+          'queue' => [
             'name' => $name,
             'worker callback' => $info['worker callback'],
-          ),
-        ),
-        'tags' => array('queue', 'core', 'killable'),
+          ],
+        ],
+        'tags' => ['queue', 'core', 'killable'],
         'module' => $info['module'],
-      );
+      ];
       if (isset($info['time'])) {
         $items['queue_' . $name]['settings']['queue']['time'] = $info['time'];
       }
@@ -90,10 +88,10 @@ class QueueSettings extends TaggedSettings {
    *
    * This is a wrapper around the cron queues "worker callback".
    *
-   * @param CronJob $job
+   * @param \Drupal\ultimate_cron\Entity\CronJob $job
    *   The job being run.
    */
-  static public function worker_callback($job) {
+  public static function worker_callback($job) {
     $settings = $job->getPluginSettings('settings');
     $queue = DrupalQueue::get($settings['queue']['name']);
     $function = $settings['queue']['worker callback'];
@@ -133,17 +131,17 @@ class QueueSettings extends TaggedSettings {
       }
       catch (Exception $e) {
         // Just continue ...
-        \Drupal::logger($job->hook['module'])->error("Queue item @item_id from queue @queue failed with message @message", array(
+        \Drupal::logger($job->hook['module'])->error("Queue item @item_id from queue @queue failed with message @message", [
           '@item_id' => $item->item_id,
           '@queue' => $settings['queue']['name'],
-          '@message' => $e->getMessage()
-        ));
+          '@message' => $e->getMessage(),
+        ]);
       }
     }
-    \Drupal::logger($job->hook['module'])->info('Processed @items items from queue @queue', array(
+    \Drupal::logger($job->hook['module'])->info('Processed @items items from queue @queue', [
       '@items' => $items,
       '@queue' => $settings['queue']['name'],
-    ));
+    ]);
 
     // Re-throttle.
     $job->getPlugin('settings', 'queue')->throttle($job);
@@ -155,7 +153,7 @@ class QueueSettings extends TaggedSettings {
    * Implements hook_cron_alter().
    */
   public function cron_alter(&$jobs) {
-    $new_jobs = array();
+    $new_jobs = [];
     foreach ($jobs as $job) {
       if (!$this->isValid($job)) {
         continue;
@@ -198,7 +196,7 @@ class QueueSettings extends TaggedSettings {
    * Default settings.
    */
   public function defaultSettings() {
-    return array(
+    return [
       'lease_time' => 30,
       'empty_delay' => 0,
       'item_delay' => 0,
@@ -206,7 +204,7 @@ class QueueSettings extends TaggedSettings {
       'threads' => 4,
       'threshold' => 10,
       'time' => 15,
-    );
+    ];
   }
 
   /**
@@ -216,113 +214,113 @@ class QueueSettings extends TaggedSettings {
     $elements = &$form['settings'][$this->type][$this->name];
     $values = &$form_state['values']['settings'][$this->type][$this->name];
 
-    $states = array();
+    $states = [];
     if (!$job) {
-      $elements['enabled'] = array(
+      $elements['enabled'] = [
         '#title' => t('Enable cron queue processing'),
         '#description' => t('If enabled, cron queues will be processed by this plugin. If another cron queue plugin is installed, it may be necessary/beneficial to disable this plugin.'),
         '#type' => 'checkbox',
         '#default_value' => variable_get($this->key . '_enabled', TRUE),
         '#fallback' => TRUE,
-      );
-      $states = array(
-        '#states' => array(
-          'visible' => array(
-            ':input[name="settings[' . $this->type . '][' . $this->name . '][enabled]"]' => array(
+      ];
+      $states = [
+        '#states' => [
+          'visible' => [
+            ':input[name="settings[' . $this->type . '][' . $this->name . '][enabled]"]' => [
               'checked' => TRUE,
-            ),
-          ),
-        ),
-      );
+            ],
+          ],
+        ],
+      ];
     }
 
-    $elements['timeouts'] = array(
+    $elements['timeouts'] = [
       '#type' => 'fieldset',
       '#title' => t('Timeouts'),
-    ) + $states;
-    $elements['timeouts']['lease_time'] = array(
-      '#parents' => array('settings', $this->type, $this->name, 'lease_time'),
+    ] + $states;
+    $elements['timeouts']['lease_time'] = [
+      '#parents' => ['settings', $this->type, $this->name, 'lease_time'],
       '#title' => t("Queue lease time"),
       '#type' => 'textfield',
       '#default_value' => $values['lease_time'],
       '#description' => t('Seconds to claim a cron queue item.'),
       '#fallback' => TRUE,
       '#required' => TRUE,
-    );
-    $elements['timeouts']['time'] = array(
-      '#parents' => array('settings', $this->type, $this->name, 'time'),
+    ];
+    $elements['timeouts']['time'] = [
+      '#parents' => ['settings', $this->type, $this->name, 'time'],
       '#title' => t('Time'),
       '#type' => 'textfield',
       '#default_value' => $values['time'],
       '#description' => t('Time in seconds to process items during a cron run.'),
       '#fallback' => TRUE,
       '#required' => TRUE,
-    );
+    ];
 
-    $elements['delays'] = array(
+    $elements['delays'] = [
       '#type' => 'fieldset',
       '#title' => t('Delays'),
-    ) + $states;
-    $elements['delays']['empty_delay'] = array(
-      '#parents' => array('settings', $this->type, $this->name, 'empty_delay'),
+    ] + $states;
+    $elements['delays']['empty_delay'] = [
+      '#parents' => ['settings', $this->type, $this->name, 'empty_delay'],
       '#title' => t("Empty delay"),
       '#type' => 'textfield',
       '#default_value' => $values['empty_delay'],
       '#description' => t('Seconds to delay processing of queue if queue is empty (0 = end job).'),
       '#fallback' => TRUE,
       '#required' => TRUE,
-    );
-    $elements['delays']['item_delay'] = array(
-      '#parents' => array('settings', $this->type, $this->name, 'item_delay'),
+    ];
+    $elements['delays']['item_delay'] = [
+      '#parents' => ['settings', $this->type, $this->name, 'item_delay'],
       '#title' => t("Item delay"),
       '#type' => 'textfield',
       '#default_value' => $values['item_delay'],
       '#description' => t('Seconds to wait between processing each item in a queue.'),
       '#fallback' => TRUE,
       '#required' => TRUE,
-    );
+    ];
 
-    $elements['throttle'] = array(
+    $elements['throttle'] = [
       '#title' => t('Throttle'),
       '#type' => 'checkbox',
       '#default_value' => $values['throttle'],
       '#description' => t('Throttle queues using multiple threads.'),
-    );
+    ];
 
-    $states = !$job ? $states : array(
-      '#states' => array(
-        'visible' => array(':input[name="settings[' . $this->type . '][' . $this->name . '][throttle]"]' => array('checked' => TRUE))
-      ),
-    );
+    $states = !$job ? $states : [
+      '#states' => [
+        'visible' => [':input[name="settings[' . $this->type . '][' . $this->name . '][throttle]"]' => ['checked' => TRUE]],
+      ],
+    ];
 
-    $elements['throttling'] = array(
+    $elements['throttling'] = [
       '#type' => 'fieldset',
       '#title' => t('Throttling'),
-    ) + $states;
-    $elements['throttling']['threads'] = array(
-      '#parents' => array('settings', $this->type, $this->name, 'threads'),
+    ] + $states;
+    $elements['throttling']['threads'] = [
+      '#parents' => ['settings', $this->type, $this->name, 'threads'],
       '#title' => t('Threads'),
       '#type' => 'textfield',
       '#default_value' => $values['threads'],
       '#description' => t('Number of threads to use for queues.'),
-      '#states' => array(
-        'visible' => array(':input[name="settings[' . $this->type . '][' . $this->name . '][throttle]"]' => array('checked' => TRUE))
-      ),
+      '#states' => [
+        'visible' => [':input[name="settings[' . $this->type . '][' . $this->name . '][throttle]"]' => ['checked' => TRUE]],
+      ],
       '#fallback' => TRUE,
       '#required' => TRUE,
-    );
-    $elements['throttling']['threshold'] = array(
-      '#parents' => array('settings', $this->type, $this->name, 'threshold'),
+    ];
+    $elements['throttling']['threshold'] = [
+      '#parents' => ['settings', $this->type, $this->name, 'threshold'],
       '#title' => t('Threshold'),
       '#type' => 'textfield',
       '#default_value' => $values['threshold'],
       '#description' => t('Number of items in queue required to activate the next cron job.'),
-      '#states' => array(
-        'visible' => array(':input[name="settings[' . $this->type . '][' . $this->name . '][throttle]"]' => array('checked' => TRUE))
-      ),
+      '#states' => [
+        'visible' => [':input[name="settings[' . $this->type . '][' . $this->name . '][throttle]"]' => ['checked' => TRUE]],
+      ],
       '#fallback' => TRUE,
       '#required' => TRUE,
-    );
+    ];
   }
 
   /**
@@ -361,12 +359,12 @@ class QueueSettings extends TaggedSettings {
       $old_status = ultimate_cron_job_get_status($name) ? TRUE : FALSE;
       if ($old_status !== $new_status) {
         $log_entry = $job->startLog(uniqid($job->id(), TRUE), 'throttling', ULTIMATE_CRON_LOG_TYPE_ADMIN);
-        $log_entry->log('Job @status by queue throttling (items:@items, boundary:@boundary, threshold:@threshold)', array(
+        $log_entry->log('Job @status by queue throttling (items:@items, boundary:@boundary, threshold:@threshold)', [
           '@status' => $new_status ? t('disabled') : t('enabled'),
           '@items' => $items,
           '@boundary' => ($thread - 1) * $settings['queue']['threshold'],
           '@threshold' => $settings['queue']['threshold'],
-        ), RfcLogLevel::INFO);
+        ], RfcLogLevel::INFO);
         $log_entry->finish();
         $job->dont_log = TRUE;
         ultimate_cron_job_set_status($job, $new_status);
@@ -374,4 +372,5 @@ class QueueSettings extends TaggedSettings {
       }
     }
   }
+
 }
diff --git a/src/QueueWorker.php b/src/QueueWorker.php
index d5a819e..56902fb 100644
--- a/src/QueueWorker.php
+++ b/src/QueueWorker.php
@@ -14,7 +14,7 @@ use Drupal\Core\Queue\SuspendQueueException;
 class QueueWorker {
 
   /**
-   * Queue worker plugin manager
+   * Queue worker plugin manager.
    *
    * @var Drupal\Core\Queue\QueueWorkerManager
    */
diff --git a/src/Scheduler/SchedulerInterface.php b/src/Scheduler/SchedulerInterface.php
index 6b878c9..1837c21 100644
--- a/src/Scheduler/SchedulerInterface.php
+++ b/src/Scheduler/SchedulerInterface.php
@@ -19,6 +19,7 @@ interface SchedulerInterface extends PluginInspectionInterface, ConfigurableInte
    * @return mixed
    */
   public function defaultConfiguration();
+
   /**
    * Label for schedule.
    *
diff --git a/src/Scheduler/SchedulerManager.php b/src/Scheduler/SchedulerManager.php
index a115234..e4ababb 100644
--- a/src/Scheduler/SchedulerManager.php
+++ b/src/Scheduler/SchedulerManager.php
@@ -5,7 +5,6 @@ namespace Drupal\ultimate_cron\Scheduler;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Plugin\DefaultPluginManager;
-use Drupal\payment\Plugin\Payment\OperationsProviderPluginManagerTrait;
 
 /**
  * A plugin manager for scheduler plugins.
diff --git a/src/Settings.php b/src/Settings.php
index b31aee3..2212744 100644
--- a/src/Settings.php
+++ b/src/Settings.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\ultimate_cron;
 
-use Drupal\Core\Form\FormBase;
-
 /**
  * Base class for settings.
  *
diff --git a/src/Signal/SignalCache.php b/src/Signal/SignalCache.php
index 6542f02..60f7ecb 100644
--- a/src/Signal/SignalCache.php
+++ b/src/Signal/SignalCache.php
@@ -4,8 +4,10 @@ namespace Drupal\ultimate_cron\Signal;
 
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Lock\LockBackendInterface;
-use Drupal\ultimate_cron\Signal\SignalInterface;
 
+/**
+ *
+ */
 class SignalCache implements SignalInterface {
 
   /**
@@ -18,6 +20,9 @@ class SignalCache implements SignalInterface {
    */
   public $lockBackend;
 
+  /**
+   *
+   */
   public function __construct(CacheBackendInterface $cache_backend, LockBackendInterface $lock_backend) {
     $this->cacheBackend = $cache_backend;
     $this->lockBackend = $lock_backend;
@@ -75,7 +80,7 @@ class SignalCache implements SignalInterface {
    * @param string $signal
    *   The name of the signal.
    *
-   * @return boolean
+   * @return bool
    *   TRUE if the signal was set.
    */
   public function set($job_id, $signal) {
@@ -103,4 +108,5 @@ class SignalCache implements SignalInterface {
   public function flush($job_id) {
     $this->cacheBackend->set("flushed-$job_id", microtime(TRUE));
   }
+
 }
diff --git a/src/Signal/SignalInterface.php b/src/Signal/SignalInterface.php
index 3da1540..991457f 100644
--- a/src/Signal/SignalInterface.php
+++ b/src/Signal/SignalInterface.php
@@ -2,7 +2,11 @@
 
 namespace Drupal\ultimate_cron\Signal;
 
+/**
+ *
+ */
 interface SignalInterface {
+
   /**
    * Get a signal without claiming it.
    *
@@ -24,7 +28,7 @@ interface SignalInterface {
    * @param string $signal
    *   The name of the signal.
    *
-   * @return boolean
+   * @return bool
    *   TRUE if the signal was set.
    */
   public function set($job_id, $signal);
@@ -60,4 +64,5 @@ interface SignalInterface {
    *   The name of the signal.
    */
   public function clear($job_id, $signal);
+
 }
diff --git a/src/TaggedSettings.php b/src/TaggedSettings.php
index 4cae649..f523447 100644
--- a/src/TaggedSettings.php
+++ b/src/TaggedSettings.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\ultimate_cron;
 
-use Drupal\ultimate_cron\Entity\CronJob;
-
 /**
  * Base class for tagged settings.
  *
@@ -11,10 +9,12 @@ use Drupal\ultimate_cron\Entity\CronJob;
  * to jobs having the same tag as the name of the plugin.
  */
 class TaggedSettings extends Settings {
+
   /**
    * Only valid for jobs tagged with the proper tag.
    */
   public function isValid($job = NULL) {
-    return $job ? in_array($this->name, $job->hook['tags']) : \Drupal\ultimate_cron\parent::isValid();
+    return $job ? in_array($this->name, $job->hook['tags']) : parent::isValid();
   }
+
 }
diff --git a/src/UltimateCron.php b/src/UltimateCron.php
index c801062..66f15a5 100644
--- a/src/UltimateCron.php
+++ b/src/UltimateCron.php
@@ -4,14 +4,7 @@ namespace Drupal\ultimate_cron;
 
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Cron;
-use Drupal\Core\Extension\ModuleHandlerInterface;
-use Drupal\Core\Lock\LockBackendInterface;
-use Drupal\Core\Queue\QueueFactory;
-use Drupal\Core\Queue\QueueWorkerManagerInterface;
-use Drupal\Core\Session\AccountSwitcherInterface;
-use Drupal\Core\State\StateInterface;
 use Drupal\ultimate_cron\Entity\CronJob;
-use Psr\Log\LoggerInterface;
 
 /**
  * The Ultimate Cron service.
@@ -45,7 +38,7 @@ class UltimateCron extends Cron {
 
       ->execute();
 
-    $launcher_jobs = array();
+    $launcher_jobs = [];
     foreach (CronJob::loadMultiple($job_ids) as $job) {
       /* @var \Drupal\Core\Plugin\DefaultPluginManager $manager */
       $manager = \Drupal::service('plugin.manager.ultimate_cron.' . 'launcher');
@@ -54,9 +47,9 @@ class UltimateCron extends Cron {
 
       if (!isset($launchers) || in_array($launcher->getPluginId(), $launchers)) {
         $launcher_jobs[$launcher_definition['id']]['launcher'] = $launcher;
-        $launcher_jobs[$launcher_definition['id']]['sort'] = array($launcher_definition['weight']);
+        $launcher_jobs[$launcher_definition['id']]['sort'] = [$launcher_definition['weight']];
         $launcher_jobs[$launcher_definition['id']]['jobs'][$job->id()] = $job;
-        $launcher_jobs[$launcher_definition['id']]['jobs'][$job->id()]->sort = array($job->loadLatestLogEntry()->start_time);
+        $launcher_jobs[$launcher_definition['id']]['jobs'][$job->id()]->sort = [$job->loadLatestLogEntry()->start_time];
       }
     }
 
@@ -73,4 +66,5 @@ class UltimateCron extends Cron {
 
     return TRUE;
   }
+
 }
diff --git a/src/UltimateCronDatabaseFactory.php b/src/UltimateCronDatabaseFactory.php
index 7dad5ff..73b7a8d 100644
--- a/src/UltimateCronDatabaseFactory.php
+++ b/src/UltimateCronDatabaseFactory.php
@@ -5,9 +5,10 @@ namespace Drupal\ultimate_cron;
 use Drupal\Core\Database\Database;
 
 /**
- * Class DatabaseFactory
+ * Class DatabaseFactory.
  */
 class UltimateCronDatabaseFactory {
+
   /**
    * Factory method that returns a Connection object with the correct target.
    *
diff --git a/templates/page-admin-settings-cron-log.tpl.php b/templates/page-admin-settings-cron-log.tpl.php
index c8a49fa..b4dc7f3 100644
--- a/templates/page-admin-settings-cron-log.tpl.php
+++ b/templates/page-admin-settings-cron-log.tpl.php
@@ -1,4 +1,5 @@
 <?php
+
 /**
  * @file
  */
diff --git a/tests/src/Functional/CronJobFormTest.php b/tests/src/Functional/CronJobFormTest.php
index 5c0d131..d602432 100644
--- a/tests/src/Functional/CronJobFormTest.php
+++ b/tests/src/Functional/CronJobFormTest.php
@@ -20,7 +20,7 @@ class CronJobFormTest extends BrowserTestBase {
    *
    * @var array
    */
-  public static $modules = array('ultimate_cron', 'block', 'cron_queue_test');
+  public static $modules = ['ultimate_cron', 'block', 'cron_queue_test'];
 
   /**
    * A user with permission to create and edit books and to administer blocks.
@@ -56,7 +56,7 @@ class CronJobFormTest extends BrowserTestBase {
     $this->drupalPlaceBlock('local_actions_block');
 
     // Create user with correct permission.
-    $this->adminUser = $this->drupalCreateUser(array('administer ultimate cron', 'administer site configuration'));
+    $this->adminUser = $this->drupalCreateUser(['administer ultimate cron', 'administer site configuration']);
     $this->drupalLogin($this->adminUser);
 
     // Cron Jobs overview.
@@ -76,14 +76,14 @@ class CronJobFormTest extends BrowserTestBase {
     $job = CronJob::load($this->jobId);
     $old_job_name = $job->label();
     $this->jobName = 'edited job name';
-    $edit = array('title' => $this->jobName);
+    $edit = ['title' => $this->jobName];
 
     // Save the new job.
     $this->drupalPostForm(NULL, $edit, t('Save'));
     // Assert the edited Job hasn't run yet.
     $this->assertText('Never');
     // Assert messenger service message for successful updated job.
-    $this->assertText(t('job @name has been updated.', array('@name' => $this->jobName)));
+    $this->assertText(t('job @name has been updated.', ['@name' => $this->jobName]));
 
     // Run the Jobs.
     $this->cronRun();
@@ -111,7 +111,7 @@ class CronJobFormTest extends BrowserTestBase {
     $this->drupalPostForm(NULL, NULL, t('Disable'));
 
     // Assert messenger service message for successful disabled job.
-    $this->assertText(t('Disabled cron job @name.', array('@name' => $this->jobName)));
+    $this->assertText(t('Disabled cron job @name.', ['@name' => $this->jobName]));
     $this->drupalGet('admin/config/system/cron/jobs');
     $this->assertFieldByXPath('//table/tbody/tr[1]/td[6]', 'Disabled');
     $this->assertFieldByXPath('//table/tbody/tr[1]/td[8]/div/div/ul/li[1]/a', 'Enable');
@@ -123,25 +123,25 @@ class CronJobFormTest extends BrowserTestBase {
     $this->drupalPostForm(NULL, NULL, t('Enable'));
 
     // Assert messenger service message for successful enabled job.
-    $this->assertText(t('Enabled cron job @name.', array('@name' => $this->jobName)));
+    $this->assertText(t('Enabled cron job @name.', ['@name' => $this->jobName]));
     $this->drupalGet('admin/config/system/cron/jobs');
     $expected_checkmark_image_url = file_url_transform_relative(file_create_url('core/misc/icons/73b355/check.svg'));
     $this->assertEquals($expected_checkmark_image_url, $this->xpath('//table/tbody/tr[1]/td[6]/img')[0]->getAttribute('src'));
     $this->assertFieldByXPath('//table/tbody/tr[1]/td[8]/div/div/ul/li[1]/a', 'Run');
 
     // Test disabling a job with the checkbox on the edit page.
-    $edit = array(
+    $edit = [
       'status' => FALSE,
-    );
+    ];
     $this->drupalPostForm('admin/config/system/cron/jobs/manage/' . $this->jobId, $edit, t('Save'));
     $this->assertFieldByXPath('//table/tbody/tr[1]/td[6]', 'Disabled');
     $this->assertFieldByXPath('//table/tbody/tr[1]/td[8]/div/div/ul/li[1]/a', 'Enable');
     $this->assertNoFieldByXPath('//table/tbody/tr[1]/td[8]/div/div/ul/li[1]/a', 'Run');
 
     // Test enabling a job with the checkbox on the edit page.
-    $edit = array(
+    $edit = [
       'status' => TRUE,
-    );
+    ];
     $this->drupalPostForm('admin/config/system/cron/jobs/manage/' . $this->jobId, $edit, t('Save'));
     $this->assertEquals($expected_checkmark_image_url, $this->xpath('//table/tbody/tr[1]/td[6]/img')[0]->getAttribute('src'));
     $this->assertFieldByXPath('//table/tbody/tr[1]/td[8]/div/div/ul/li[1]/a', 'Run');
@@ -150,9 +150,9 @@ class CronJobFormTest extends BrowserTestBase {
 
     // Save new job.
     $this->clickLink(t('Edit'), 0);
-    $job_configuration = array(
+    $job_configuration = [
       'scheduler[id]' => 'crontab',
-    );
+    ];
     $this->drupalPostForm(NULL, $job_configuration, t('Save'));
     $this->drupalPostForm('admin/config/system/cron/jobs/manage/' . $this->jobId, ['scheduler[configuration][rules][0]' => '0+@ * * * *'], t('Save'));
     $this->assertText('0+@ * * * *');
@@ -179,7 +179,7 @@ class CronJobFormTest extends BrowserTestBase {
     // Test deleting a job (only possible if invalid cron job).
     $this->clickLink(t('Delete'), 0);
     $this->drupalPostForm(NULL, NULL, t('Delete'));
-    $this->assertText(t('The cron job @name has been deleted.', array('@name' => $job->label())));
+    $this->assertText(t('The cron job @name has been deleted.', ['@name' => $job->label()]));
     $this->drupalGet('admin/config/system/cron/jobs');
     $this->assertNoText($job->label());
 
diff --git a/tests/src/Functional/CronJobInstallTest.php b/tests/src/Functional/CronJobInstallTest.php
index f89dd34..6c441c4 100644
--- a/tests/src/Functional/CronJobInstallTest.php
+++ b/tests/src/Functional/CronJobInstallTest.php
@@ -8,7 +8,7 @@ use Drupal\ultimate_cron\CronRule;
 use Drupal\ultimate_cron\Entity\CronJob;
 
 /**
- * Cron Job Form Testing
+ * Cron Job Form Testing.
  *
  * @group ultimate_cron
  */
@@ -19,7 +19,7 @@ class CronJobInstallTest extends BrowserTestBase {
    *
    * @var array
    */
-  public static $modules = array('ultimate_cron');
+  public static $modules = ['ultimate_cron'];
 
   /**
    * A user with permission to create and edit books and to administer blocks.
@@ -38,23 +38,23 @@ class CronJobInstallTest extends BrowserTestBase {
    */
   public function testManageJob() {
     // Create user with correct permission.
-    $this->adminUser = $this->drupalCreateUser(array('administer ultimate cron'));
+    $this->adminUser = $this->drupalCreateUser(['administer ultimate cron']);
     $this->drupalLogin($this->adminUser);
 
-    // Check default modules
-    \Drupal::service('module_installer')->install(array('field'));
+    // Check default modules.
+    \Drupal::service('module_installer')->install(['field']);
     $this->drupalGet('admin/config/system/cron/jobs');
     $this->assertText('Purges deleted Field API data');
     $this->assertText('Cleanup (caches, batch, flood, temp-files, etc.)');
     $this->assertNoText('Deletes temporary files');
 
     // Install new module.
-    \Drupal::service('module_installer')->install(array('file'));
+    \Drupal::service('module_installer')->install(['file']);
     $this->drupalGet('admin/config/system/cron/jobs');
     $this->assertText('Deletes temporary files');
 
     // Uninstall new module.
-    \Drupal::service('module_installer')->uninstall(array('file'));
+    \Drupal::service('module_installer')->uninstall(['file']);
     $this->drupalGet('admin/config/system/cron/jobs');
     $this->assertNoText('Deletes temporary files');
   }
@@ -67,13 +67,12 @@ class CronJobInstallTest extends BrowserTestBase {
     $this->assertEqual($element['value'], t("Cron is running properly."));
     $this->assertEqual($element['severity'], REQUIREMENT_OK);
 
-
-    $values = array(
+    $values = [
       'title' => 'ultimate cron fake cronjob title',
       'id' => 'ultimate_cron_fake_job',
       'module' => 'ultimate_cron_fake',
       'callback' => 'ultimate_cron_fake_cron',
-    );
+    ];
 
     $job = new CronJob($values, 'ultimate_cron_job');
     $job->save();
@@ -85,7 +84,7 @@ class CronJobInstallTest extends BrowserTestBase {
     $scheduled_cron_time = $cron->getLastSchedule();
     // Generate a new start time by adding two seconds to the initial scheduled cron time.
     $log_entry_past = $scheduled_cron_time - 10000;
-      \Drupal::database()->update('ultimate_cron_log')
+    \Drupal::database()->update('ultimate_cron_log')
       ->fields([
         'start_time' => $log_entry_past,
       ])
diff --git a/tests/src/Functional/LoggerWebTest.php b/tests/src/Functional/LoggerWebTest.php
index 1b27455..e3aa883 100644
--- a/tests/src/Functional/LoggerWebTest.php
+++ b/tests/src/Functional/LoggerWebTest.php
@@ -126,7 +126,6 @@ class LoggerWebTest extends BrowserTestBase {
     $this->assertRaw('This is a warning message');
   }
 
-
   /**
    * Tests that the logger handles an exception correctly.
    */
diff --git a/tests/src/Kernel/CronJobKernelTest.php b/tests/src/Kernel/CronJobKernelTest.php
index 2124810..d3e7354 100644
--- a/tests/src/Kernel/CronJobKernelTest.php
+++ b/tests/src/Kernel/CronJobKernelTest.php
@@ -17,8 +17,11 @@ class CronJobKernelTest extends KernelTestBase {
    *
    * @var array
    */
-  public static $modules = array('system', 'ultimate_cron');
+  public static $modules = ['system', 'ultimate_cron'];
 
+  /**
+   *
+   */
   protected function setup() {
     parent::setUp();
 
@@ -32,11 +35,11 @@ class CronJobKernelTest extends KernelTestBase {
    * Tests CRUD operations for cron jobs.
    */
   public function testCRUD() {
-    $values = array(
+    $values = [
       'id' => 'example',
       'title' => $this->randomMachineName(),
       'description' => $this->randomMachineName(),
-    );
+    ];
 
     /** @var \Drupal\ultimate_cron\Entity\CronJob $cron_job */
     $cron_job = CronJob::create($values);
diff --git a/tests/src/Kernel/CronJobTest.php b/tests/src/Kernel/CronJobTest.php
index fdea092..66d4ab9 100644
--- a/tests/src/Kernel/CronJobTest.php
+++ b/tests/src/Kernel/CronJobTest.php
@@ -13,27 +13,30 @@ use Drupal\ultimate_cron\Entity\CronJob;
  */
 class CronJobTest extends KernelTestBase {
 
-  public static $modules = array('ultimate_cron');
+  public static $modules = ['ultimate_cron'];
 
+  /**
+   *
+   */
   public function setup() {
     parent::setUp();
 
-    $this->installSchema('ultimate_cron', array(
-        'ultimate_cron_log',
-        'ultimate_cron_lock'
-      ));
+    $this->installSchema('ultimate_cron', [
+      'ultimate_cron_log',
+      'ultimate_cron_lock',
+    ]);
   }
 
   /**
    * Tests adding and editing a cron job.
    */
-  function testGeneratedJob() {
-    $values = array(
+  public function testGeneratedJob() {
+    $values = [
       'title' => 'ultimate cron fake cronjob title',
       'id' => 'ultimate_cron_fake_job',
       'module' => 'ultimate_cron_fake',
       'callback' => 'ultimate_cron_fake_cron',
-    );
+    ];
 
     $job = CronJob::create($values);
     $job->save();
@@ -65,7 +68,7 @@ class CronJobTest extends KernelTestBase {
 
     // Update new start_time in the future so the next cron job should not run.
     \Drupal::database()->update('ultimate_cron_log')
-      ->fields(array('start_time' => $log_entry_future))
+      ->fields(['start_time' => $log_entry_future])
       ->condition('name', $values['id'])
       ->execute();
 
@@ -84,7 +87,7 @@ class CronJobTest extends KernelTestBase {
 
     // Update new start_time in the past so the next cron job should run.
     \Drupal::database()->update('ultimate_cron_log')
-      ->fields(array('start_time' => $log_entry_past))
+      ->fields(['start_time' => $log_entry_past])
       ->condition('name', $values['id'])
       ->execute();
 
@@ -95,4 +98,5 @@ class CronJobTest extends KernelTestBase {
     $this->assertNotEquals($log_entry_past, $latest_log_entry);
     $this->assertEquals(2, \Drupal::state()->get('ultimate_cron.cron_run_counter'));
   }
+
 }
diff --git a/tests/src/Kernel/LauncherPluginTest.php b/tests/src/Kernel/LauncherPluginTest.php
index d9cedbd..73702dc 100644
--- a/tests/src/Kernel/LauncherPluginTest.php
+++ b/tests/src/Kernel/LauncherPluginTest.php
@@ -17,12 +17,12 @@ class LauncherPluginTest extends KernelTestBase {
    *
    * @var array
    */
-  public static $modules = array('ultimate_cron');
+  public static $modules = ['ultimate_cron'];
 
   /**
    * Tests that scheduler plugins are discovered correctly.
    */
-  function testDiscovery() {
+  public function testDiscovery() {
     /* @var \Drupal\Core\Plugin\DefaultPluginManager $manager */
     $manager = \Drupal::service('plugin.manager.ultimate_cron.launcher');
 
@@ -33,4 +33,5 @@ class LauncherPluginTest extends KernelTestBase {
     $this->assertTrue($serial instanceof SerialLauncher);
     $this->assertEquals('serial', $serial->getPluginId());
   }
+
 }
diff --git a/tests/src/Kernel/LoggerPluginTest.php b/tests/src/Kernel/LoggerPluginTest.php
index 00fbe41..4c8dd61 100644
--- a/tests/src/Kernel/LoggerPluginTest.php
+++ b/tests/src/Kernel/LoggerPluginTest.php
@@ -20,12 +20,12 @@ class LoggerPluginTest extends KernelTestBase {
    *
    * @var array
    */
-  public static $modules = array('ultimate_cron', 'ultimate_cron_logger_test', 'system');
+  public static $modules = ['ultimate_cron', 'ultimate_cron_logger_test', 'system'];
 
   /**
    * Tests that scheduler plugins are discovered correctly.
    */
-  function testDiscovery() {
+  public function testDiscovery() {
     /* @var \Drupal\Core\Plugin\DefaultPluginManager $manager */
     $manager = \Drupal::service('plugin.manager.ultimate_cron.logger');
 
@@ -44,7 +44,7 @@ class LoggerPluginTest extends KernelTestBase {
   /**
    * Tests log cleanup of the database logger.
    */
-  function testCleanup() {
+  public function testCleanup() {
 
     $this->installSchema('ultimate_cron', ['ultimate_cron_log', 'ultimate_cron_lock']);
 
@@ -82,7 +82,7 @@ class LoggerPluginTest extends KernelTestBase {
     $ids = array_slice(array_keys($log_entries), 5);
 
     // Date back 5 log entries.
-      \Drupal::database()->update('ultimate_cron_log')
+    \Drupal::database()->update('ultimate_cron_log')
       ->expression('start_time', 'start_time - 65')
       ->condition('lid', $ids, 'IN')
       ->execute();
@@ -99,7 +99,7 @@ class LoggerPluginTest extends KernelTestBase {
   /**
    * Tests cache logger.
    */
-  function testCacheLogger() {
+  public function testCacheLogger() {
     // @todo Set default logger and do not enable the log table.
     $this->installSchema('ultimate_cron', ['ultimate_cron_log', 'ultimate_cron_lock']);
 
diff --git a/tests/src/Kernel/SchedulerPluginTest.php b/tests/src/Kernel/SchedulerPluginTest.php
index 0065cd6..96c41de 100644
--- a/tests/src/Kernel/SchedulerPluginTest.php
+++ b/tests/src/Kernel/SchedulerPluginTest.php
@@ -18,12 +18,12 @@ class SchedulerPluginTest extends KernelTestBase {
    *
    * @var array
    */
-  public static $modules = array('ultimate_cron');
+  public static $modules = ['ultimate_cron'];
 
   /**
    * Tests that scheduler plugins are discovered correctly.
    */
-  function testDiscovery() {
+  public function testDiscovery() {
     /* @var \Drupal\Core\Plugin\DefaultPluginManager $manager */
     $manager = \Drupal::service('plugin.manager.ultimate_cron.scheduler');
 
@@ -38,4 +38,5 @@ class SchedulerPluginTest extends KernelTestBase {
     $this->assertTrue($crontab instanceof Crontab);
     $this->assertEquals('crontab', $crontab->getPluginId());
   }
+
 }
diff --git a/tests/src/Kernel/UltimateCronQueueTest.php b/tests/src/Kernel/UltimateCronQueueTest.php
index 39cbfb8..95ee29d 100644
--- a/tests/src/Kernel/UltimateCronQueueTest.php
+++ b/tests/src/Kernel/UltimateCronQueueTest.php
@@ -18,7 +18,7 @@ class UltimateCronQueueTest extends CronQueueTest {
    *
    * @var array
    */
-  public static $modules = array('ultimate_cron');
+  public static $modules = ['ultimate_cron'];
 
   /**
    * {@inheritdoc}
@@ -41,7 +41,7 @@ class UltimateCronQueueTest extends CronQueueTest {
     $queue = $this->container->get('queue')->get('cron_queue_test_exception');
 
     // Enqueue an item for processing.
-    $queue->createItem(array($this->randomMachineName() => $this->randomMachineName()));
+    $queue->createItem([$this->randomMachineName() => $this->randomMachineName()]);
 
     // Run cron; the worker for this queue should throw an exception and handle
     // it.
@@ -99,7 +99,6 @@ class UltimateCronQueueTest extends CronQueueTest {
     $this->assertEquals(0, $queue->numberOfItems());
   }
 
-
   /**
    * Tests behavior when ultimate_cron overrides the cron processing.
    */
diff --git a/tests/src/Unit/RulesUnitTest.php b/tests/src/Unit/RulesUnitTest.php
index 5fafc4a..8111f11 100644
--- a/tests/src/Unit/RulesUnitTest.php
+++ b/tests/src/Unit/RulesUnitTest.php
@@ -13,18 +13,25 @@ use Drupal\ultimate_cron\Plugin\ultimate_cron\Scheduler\Crontab;
  */
 class RulesUnitTest extends UnitTestCase {
 
+  /**
+   *
+   */
   private function getIntervals($rule) {
     $cron = CronRule::factory($rule, $_SERVER['REQUEST_TIME']);
     return $cron->getIntervals();
   }
 
+  /**
+   *
+   */
   private function assertRule($options) {
-    // Setup values
-    $options['rules'] = is_array($options['rules']) ? $options['rules'] : array($options['rules']);
-    $options['catch_up'] = isset($options['catch_up']) ? $options['catch_up'] : 86400 * 365; // @todo Adapting Elysia Cron test cases with a catchup of 1 year
+    // Setup values.
+    $options['rules'] = is_array($options['rules']) ? $options['rules'] : [$options['rules']];
+    // @todo Adapting Elysia Cron test cases with a catchup of 1 year
+    $options['catch_up'] = isset($options['catch_up']) ? $options['catch_up'] : 86400 * 365;
 
-    // Generate result message
-    $message = array();
+    // Generate result message.
+    $message = [];
     foreach ($options['rules'] as $rule) {
       $cron = CronRule::factory($rule, strtotime($options['now']));
       $intervals = $cron->getIntervals();
@@ -32,7 +39,7 @@ class RulesUnitTest extends UnitTestCase {
       foreach ($intervals as $key => $value) {
         $parsed_rule .= "$key: " . implode(',', $value) . "\n";
       }
-      #$parsed_rule = str_replace(" ", "\n", $cron->rebuildRule($cron->getIntervals()));
+      // $parsed_rule = str_replace(" ", "\n", $cron->rebuildRule($cron->getIntervals()));
       $last_scheduled = $cron->getLastSchedule();
       $message[] = "<span title=\"$parsed_rule\">$rule</span> @ " . date('Y-m-d H:i:s', $last_scheduled);
     }
@@ -41,13 +48,16 @@ class RulesUnitTest extends UnitTestCase {
     $message[] = 'catch-up @ ' . $options['catch_up'];
     $message[] = ($options['result'] ? '' : 'not ') . 'expected to run';
 
-    // Do the actual test
+    // Do the actual test.
     $result = Crontab::shouldRun($options['rules'], strtotime($options['last_run']), strtotime($options['now']), $options['catch_up']);
 
-    return array($options['result'] == $result, implode('<br/>', $message));
+    return [$options['result'] == $result, implode('<br/>', $message)];
   }
 
-  function testIntervals2MinuteRange() {
+  /**
+   *
+   */
+  public function testIntervals2MinuteRange() {
     $intervals = $this->getIntervals('10-11 12 * * *');
     $this->assertEquals(range(11, 10, -1), $intervals['minutes'], 'Expected minutes to be 10, 11');
     $intervals = $this->getIntervals('0-1 12 * * *');
@@ -56,714 +66,744 @@ class RulesUnitTest extends UnitTestCase {
     $this->assertEquals(range(59, 58, -1), $intervals['minutes'], 'Expected minutes to be 58, 59');
   }
 
-  function testIntervals2MinuteRangeWithOffset() {
+  /**
+   *
+   */
+  public function testIntervals2MinuteRangeWithOffset() {
     $intervals = $this->getIntervals('0-1+1 12 * * *');
     $this->assertEquals(range(2, 1, -1), $intervals['minutes'], 'Expected minutes to be 1, 2');
     $intervals = $this->getIntervals('10-11+1 12 * * *');
     $this->assertEquals(range(12, 11, -1), $intervals['minutes'], 'Expected minutes to be 11, 12');
     // Note, this test is testing for correct behaviour when the minutes wrap around
-    // Previously, this test would generate 43, 0 due to a bug in expandRange/expandInterval
+    // Previously, this test would generate 43, 0 due to a bug in expandRange/expandInterval.
     $intervals = $this->getIntervals('42-43+1 12 * * *');
-    $this->assertEquals(array(44, 43), $intervals['minutes'], 'Expected minutes to be 43, 44');
-    // Note, this test is testing for correct behaviour when the minutes wrap around
+    $this->assertEquals([44, 43], $intervals['minutes'], 'Expected minutes to be 43, 44');
+    // Note, this test is testing for correct behaviour when the minutes wrap around.
     $intervals = $this->getIntervals('58-59+1 12 * * *');
-    $this->assertEquals(array(59, 0), $intervals['minutes'], 'Expected minutes to be 59, 0');
+    $this->assertEquals([59, 0], $intervals['minutes'], 'Expected minutes to be 59, 0');
   }
 
-  function testIntervalsSpecificMinute() {
+  /**
+   *
+   */
+  public function testIntervalsSpecificMinute() {
     $intervals = $this->getIntervals('0 12 * * *');
-    $this->assertEquals(array(0), $intervals['minutes'], 'Expected minutes to be 0');
+    $this->assertEquals([0], $intervals['minutes'], 'Expected minutes to be 0');
     $intervals = $this->getIntervals('10 12 * * *');
-    $this->assertEquals(array(10), $intervals['minutes'], 'Expected minutes to be 10');
+    $this->assertEquals([10], $intervals['minutes'], 'Expected minutes to be 10');
     $intervals = $this->getIntervals('59 12 * * *');
-    $this->assertEquals(array(59), $intervals['minutes'], 'Expected minutes to be 59');
+    $this->assertEquals([59], $intervals['minutes'], 'Expected minutes to be 59');
   }
 
-  function testRules() {
-    $result = $this->assertRule(array(
+  /**
+   *
+   */
+  public function testRules() {
+    $result = $this->assertRule([
       'result' => FALSE,
       'rules' => '0 12 * * *',
       'last_run' => '2008-01-02 12:00:00',
-      'now' => '2008-01-02 12:01:00'
-    ));
+      'now' => '2008-01-02 12:01:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
+    $result = $this->assertRule([
       'result' => FALSE,
       'rules' => '0 12 * * *',
       'last_run' => '2008-01-02 12:00:00',
-      'now' => '2008-01-02 15:00:00'
-    ));
+      'now' => '2008-01-02 15:00:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
+    $result = $this->assertRule([
       'result' => FALSE,
       'rules' => '0 12 * * *',
       'last_run' => '2008-01-02 12:00:00',
-      'now' => '2008-01-03 11:59:00'
-    ));
+      'now' => '2008-01-03 11:59:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '0 12 * * *',
       'last_run' => '2008-01-02 12:00:00',
-      'now' => '2008-01-03 12:00:00'
-    ));
+      'now' => '2008-01-03 12:00:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
+    $result = $this->assertRule([
       'result' => FALSE,
       'rules' => '59 23 * * *',
       'last_run' => '2008-01-02 23:59:00',
-      'now' => '2008-01-03 00:00:00'
-    ));
+      'now' => '2008-01-03 00:00:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '59 23 * * *',
       'last_run' => '2008-01-02 23:59:00',
-      'now' => '2008-01-03 23:59:00'
-    ));
+      'now' => '2008-01-03 23:59:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '59 23 * * *',
       'last_run' => '2008-01-02 23:59:00',
-      'now' => '2008-01-04 00:00:00'
-    ));
+      'now' => '2008-01-04 00:00:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '59 23 * * *',
       'last_run' => '2008-01-02 23:58:00',
-      'now' => '2008-01-02 23:59:00'
-    ));
+      'now' => '2008-01-02 23:59:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '59 23 * * *',
       'last_run' => '2008-01-02 23:58:00',
-      'now' => '2008-01-03 00:00:00'
-    ));
+      'now' => '2008-01-03 00:00:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
+    $result = $this->assertRule([
       'result' => FALSE,
       'rules' => '59 23 * * 0',
       'last_run' => '2008-01-05 23:58:00',
-      'now' => '2008-01-05 23:59:00'
-    ));
+      'now' => '2008-01-05 23:59:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
+    $result = $this->assertRule([
       'result' => FALSE,
       'rules' => '59 23 * * 0',
       'last_run' => '2008-01-05 23:58:00',
-      'now' => '2008-01-06 00:00:00'
-    ));
+      'now' => '2008-01-06 00:00:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '59 23 * * 0',
       'last_run' => '2008-01-05 23:58:00',
-      'now' => '2008-01-06 23:59:00'
-    ));
+      'now' => '2008-01-06 23:59:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '59 23 * * 0',
       'last_run' => '2008-01-05 23:58:00',
-      'now' => '2008-01-07 00:00:00'
-    ));
+      'now' => '2008-01-07 00:00:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '29,59 23 * * 0',
       'last_run' => '2008-01-05 23:58:00',
-      'now' => '2008-01-06 23:29:00'
-    ));
+      'now' => '2008-01-06 23:29:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '29,59 23 * * 0',
       'last_run' => '2008-01-05 23:58:00',
-      'now' => '2008-01-06 23:59:00'
-    ));
+      'now' => '2008-01-06 23:59:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
+    $result = $this->assertRule([
       'result' => FALSE,
       'rules' => '29,59 23 * * 0',
       'last_run' => '2008-01-05 23:58:00',
-      'now' => '2008-01-05 23:59:00'
-    ));
+      'now' => '2008-01-05 23:59:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '29,59 23 * * 0',
       'last_run' => '2008-01-05 23:58:00',
-      'now' => '2008-01-06 23:58:00'
-    ));
+      'now' => '2008-01-06 23:58:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
+    $result = $this->assertRule([
       'result' => FALSE,
       'rules' => '29,59 23 * * 0',
       'last_run' => '2008-01-05 23:58:00',
-      'now' => '2008-01-06 23:28:00'
-    ));
+      'now' => '2008-01-06 23:28:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
+    $result = $this->assertRule([
       'result' => FALSE,
       'rules' => '29,59 23 * * 0',
       'last_run' => '2008-01-05 23:28:00',
-      'now' => '2008-01-05 23:29:00'
-    ));
+      'now' => '2008-01-05 23:29:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
+    $result = $this->assertRule([
       'result' => FALSE,
       'rules' => '29,59 23 * * 0',
       'last_run' => '2008-01-05 23:28:00',
-      'now' => '2008-01-05 23:30:00'
-    ));
+      'now' => '2008-01-05 23:30:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
+    $result = $this->assertRule([
       'result' => FALSE,
       'rules' => '29,59 23 * * 0',
       'last_run' => '2008-01-05 23:28:00',
-      'now' => '2008-01-05 23:59:00'
-    ));
+      'now' => '2008-01-05 23:59:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '29,59 23 * * 0',
       'last_run' => '2008-01-05 23:28:00',
-      'now' => '2008-01-06 23:29:00'
-    ));
+      'now' => '2008-01-06 23:29:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
+    $result = $this->assertRule([
       'result' => FALSE,
       'rules' => '29,59 23 * * 5',
       'last_run' => '2008-02-22 23:59:00',
-      'now' => '2008-02-28 23:59:00'
-    ));
+      'now' => '2008-02-28 23:59:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '29,59 23 * * 5',
       'last_run' => '2008-02-22 23:59:00',
-      'now' => '2008-02-29 23:59:00'
-    ));
+      'now' => '2008-02-29 23:59:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '29,59 23 * * 5',
       'last_run' => '2008-02-22 23:59:00',
-      'now' => '2008-03-01 00:00:00'
-    ));
+      'now' => '2008-03-01 00:00:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
+    $result = $this->assertRule([
       'result' => FALSE,
       'rules' => '59 23 * * 3',
       'last_run' => '2008-12-31 23:59:00',
-      'now' => '2009-01-01 00:00:00'
-    ));
+      'now' => '2009-01-01 00:00:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
+    $result = $this->assertRule([
       'result' => FALSE,
       'rules' => '59 23 * * 3',
       'last_run' => '2008-12-31 23:59:00',
-      'now' => '2009-01-07 00:00:00'
-    ));
+      'now' => '2009-01-07 00:00:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '59 23 * * 3',
       'last_run' => '2008-12-31 23:59:00',
-      'now' => '2009-01-07 23:59:00'
-    ));
+      'now' => '2009-01-07 23:59:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '59 23 * 2 5',
       'last_run' => '2008-02-22 23:59:00',
-      'now' => '2008-02-29 23:59:00'
-    ));
+      'now' => '2008-02-29 23:59:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '59 23 * 2 5',
       'last_run' => '2008-02-22 23:59:00',
-      'now' => '2008-03-01 00:00:00'
-    ));
+      'now' => '2008-03-01 00:00:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
+    $result = $this->assertRule([
       'result' => FALSE,
       'rules' => '59 23 * 2 5',
       'last_run' => '2008-02-29 23:59:00',
-      'now' => '2008-03-07 23:59:00'
-    ));
+      'now' => '2008-03-07 23:59:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
+    $result = $this->assertRule([
       'result' => FALSE,
       'rules' => '59 23 * 2 5',
       'last_run' => '2008-02-29 23:59:00',
-      'now' => '2009-02-06 23:58:00'
-    ));
+      'now' => '2009-02-06 23:58:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '59 23 * 2 5',
       'last_run' => '2008-02-29 23:59:00',
-      'now' => '2009-02-06 23:59:00'
-    ));
+      'now' => '2009-02-06 23:59:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
+    $result = $this->assertRule([
       'result' => FALSE,
       'rules' => '59 23 */10 * *',
       'last_run' => '2008-01-10 23:58:00',
-      'now' => '2008-01-10 23:59:00'
-    ));
+      'now' => '2008-01-10 23:59:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '59 23 */10 * *',
       'last_run' => '2008-01-10 23:59:00',
-      'now' => '2008-01-11 23:59:00'
-    ));
+      'now' => '2008-01-11 23:59:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '59 23 */10 * *',
       'last_run' => '2008-01-10 23:59:00',
-      'now' => '2008-01-20 23:59:00'
-    ));
+      'now' => '2008-01-20 23:59:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '59 23 1-5,10-15 * *',
       'last_run' => '2008-01-04 23:59:00',
-      'now' => '2008-01-05 23:59:00'
-    ));
+      'now' => '2008-01-05 23:59:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '59 23 1-5,10-15 * *',
       'last_run' => '2008-01-04 23:59:00',
-      'now' => '2008-01-06 23:59:00'
-    ));
+      'now' => '2008-01-06 23:59:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
+    $result = $this->assertRule([
       'result' => FALSE,
       'rules' => '59 23 1-5,10-15 * *',
       'last_run' => '2008-01-05 23:59:00',
-      'now' => '2008-01-06 23:59:00'
-    ));
+      'now' => '2008-01-06 23:59:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
+    $result = $this->assertRule([
       'result' => FALSE,
       'rules' => '59 23 1-5,10-15 * *',
       'last_run' => '2008-01-05 23:59:00',
-      'now' => '2008-01-10 23:58:00'
-    ));
+      'now' => '2008-01-10 23:58:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '59 23 1-5,10-15 * *',
       'last_run' => '2008-01-05 23:59:00',
-      'now' => '2008-01-10 23:59:00'
-    ));
+      'now' => '2008-01-10 23:59:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '59 23 1-5,10-15 * *',
       'last_run' => '2008-01-05 23:59:00',
-      'now' => '2008-01-16 23:59:00'
-    ));
+      'now' => '2008-01-16 23:59:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '59 23 1-5 1 0',
       'last_run' => '2008-01-04 23:59:00',
-      'now' => '2008-01-05 23:59:00'
-    ));
+      'now' => '2008-01-05 23:59:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '59 23 1-5 1 0',
       'last_run' => '2008-01-05 23:59:00',
-      'now' => '2008-01-06 23:59:00'
-    ));
+      'now' => '2008-01-06 23:59:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
+    $result = $this->assertRule([
       'result' => FALSE,
       'rules' => '59 23 1-5 1 0',
       'last_run' => '2008-01-06 23:59:00',
-      'now' => '2008-01-07 23:59:00'
-    ));
+      'now' => '2008-01-07 23:59:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '59 23 1-5 1 0',
       'last_run' => '2008-01-06 23:59:00',
-      'now' => '2008-01-13 23:59:00'
-    ));
+      'now' => '2008-01-13 23:59:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
+    $result = $this->assertRule([
       'result' => FALSE,
       'rules' => '59 23 1-5 1 0',
       'last_run' => '2008-02-04 23:59:00',
-      'now' => '2008-02-05 23:59:00'
-    ));
+      'now' => '2008-02-05 23:59:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
+    $result = $this->assertRule([
       'result' => FALSE,
       'rules' => '59 23 1-5 1 0',
       'last_run' => '2008-02-05 23:59:00',
-      'now' => '2008-02-10 23:59:00'
-    ));
+      'now' => '2008-02-10 23:59:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
+    $result = $this->assertRule([
       'result' => FALSE,
       'rules' => '59 23 1-5 1 0',
       'last_run' => '2008-02-10 23:59:00',
-      'now' => '2008-02-17 23:59:00'
-    ));
+      'now' => '2008-02-17 23:59:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '* 0,1,2,3,4,5,6,7,8,18,19,20,21,22,23 * * *',
       'last_run' => '2008-02-10 08:58:00',
-      'now' => '2008-02-10 08:59:00'
-    ));
+      'now' => '2008-02-10 08:59:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
+    $result = $this->assertRule([
       'result' => FALSE,
       'rules' => '* 0,1,2,3,4,5,6,7,8,18,19,20,21,22,23 * * *',
       'last_run' => '2008-02-10 08:59:00',
-      'now' => '2008-02-10 09:00:00'
-    ));
+      'now' => '2008-02-10 09:00:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
+    $result = $this->assertRule([
       'result' => FALSE,
       'rules' => '* 0,1,2,3,4,5,6,7,8,18,19,20,21,22,23 * * *',
       'last_run' => '2008-02-10 08:59:00',
-      'now' => '2008-02-10 17:59:00'
-    ));
+      'now' => '2008-02-10 17:59:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '* 0,1,2,3,4,5,6,7,8,18,19,20,21,22,23 * * *',
       'last_run' => '2008-02-10 08:59:00',
-      'now' => '2008-02-10 18:00:00'
-    ));
+      'now' => '2008-02-10 18:00:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '* 0,1,2,3,4,5,6,7,8,18,19,20,21,22,23 * * *',
       'last_run' => '2008-02-10 18:00:00',
-      'now' => '2008-02-10 18:01:00'
-    ));
+      'now' => '2008-02-10 18:01:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '* 0,1,2,3,4,5,6,7,8,18,19,20,21,22,23 * * *',
       'last_run' => '2008-02-10 18:00:00',
-      'now' => '2008-02-10 19:00:00'
-    ));
+      'now' => '2008-02-10 19:00:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '* 0,1,2,3,4,5,6,7,8,18,19,20,21,22,23 * * *',
       'last_run' => '2008-02-10 18:00:00',
-      'now' => '2008-03-10 09:00:00'
-    ));
+      'now' => '2008-03-10 09:00:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
   }
 
-  function testRules1MinuteRange() {
-    // Test a 1 minute range
-    $result = $this->assertRule(array(
+  /**
+   *
+   */
+  public function testRules1MinuteRange() {
+    // Test a 1 minute range.
+    $result = $this->assertRule([
       'result' => FALSE,
       'rules' => '10-10 12 * * *',
       'last_run' => '2008-01-03 12:00:00',
       'now' => '2008-01-03 12:09:00',
-      'catch_up' => 1
-    ));
+      'catch_up' => 1,
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '10-10 12 * * *',
       'last_run' => '2008-01-03 12:00:00',
       'now' => '2008-01-03 12:10:00',
-      'catch_up' => 1
-    ));
+      'catch_up' => 1,
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
+    $result = $this->assertRule([
       'result' => FALSE,
       'rules' => '10-10 12 * * *',
       'last_run' => '2008-01-03 12:00:00',
       'now' => '2008-01-03 12:11:00',
-      'catch_up' => 1
-    ));
+      'catch_up' => 1,
+    ]);
     $this->assertTrue($result[0], $result[1]);
   }
 
-  function testRules2MinuteRange() {
-    // Test a 1 minute range
-    $result = $this->assertRule(array(
+  /**
+   *
+   */
+  public function testRules2MinuteRange() {
+    // Test a 1 minute range.
+    $result = $this->assertRule([
       'result' => FALSE,
       'rules' => '10-11 12 * * *',
       'last_run' => '2008-01-03 12:00:00',
       'now' => '2008-01-03 12:09:00',
-      'catch_up' => 1
-    ));
+      'catch_up' => 1,
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '10-11 12 * * *',
       'last_run' => '2008-01-03 12:00:00',
       'now' => '2008-01-03 12:10:00',
-      'catch_up' => 1
-    ));
+      'catch_up' => 1,
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '10-11 12 * * *',
       'last_run' => '2008-01-03 12:00:00',
       'now' => '2008-01-03 12:11:00',
-      'catch_up' => 1
-    ));
+      'catch_up' => 1,
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
+    $result = $this->assertRule([
       'result' => FALSE,
       'rules' => '10-11 12 * * *',
       'last_run' => '2008-01-03 12:00:00',
       'now' => '2008-01-03 12:12:00',
-      'catch_up' => 1
-    ));
+      'catch_up' => 1,
+    ]);
     $this->assertTrue($result[0], $result[1]);
   }
 
-  function testRules2MinuteRangeWithOffset() {
-    // Test a 1 minute range
-    $result = $this->assertRule(array(
+  /**
+   *
+   */
+  public function testRules2MinuteRangeWithOffset() {
+    // Test a 1 minute range.
+    $result = $this->assertRule([
       'result' => FALSE,
       'rules' => '10-11+1 12 * * *',
       'last_run' => '2008-01-03 12:00:00',
       'now' => '2008-01-03 12:10:00',
-      'catch_up' => 1
-    ));
+      'catch_up' => 1,
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '10-11+1 12 * * *',
       'last_run' => '2008-01-03 12:00:00',
       'now' => '2008-01-03 12:11:00',
-      'catch_up' => 1
-    ));
+      'catch_up' => 1,
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '10-11+1 12 * * *',
       'last_run' => '2008-01-03 12:00:00',
       'now' => '2008-01-03 12:12:00',
-      'catch_up' => 1
-    ));
+      'catch_up' => 1,
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
+    $result = $this->assertRule([
       'result' => FALSE,
       'rules' => '10-11+1 12 * * *',
       'last_run' => '2008-01-03 12:00:00',
       'now' => '2008-01-03 12:13:00',
-      'catch_up' => 1
-    ));
+      'catch_up' => 1,
+    ]);
     $this->assertTrue($result[0], $result[1]);
   }
 
-  function testRules5MinuteRange() {
-    // Test a 5 minute range
-    $result = $this->assertRule(array(
+  /**
+   *
+   */
+  public function testRules5MinuteRange() {
+    // Test a 5 minute range.
+    $result = $this->assertRule([
       'result' => FALSE,
       'rules' => '10-15 12 * * *',
       'last_run' => '2008-01-03 12:00:00',
       'now' => '2008-01-03 12:09:00',
-      'catch_up' => 1
-    ));
+      'catch_up' => 1,
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '10-15 12 * * *',
       'last_run' => '2008-01-03 12:00:00',
       'now' => '2008-01-03 12:10:00',
-      'catch_up' => 1
-    ));
+      'catch_up' => 1,
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '10-15 12 * * *',
       'last_run' => '2008-01-03 12:00:00',
       'now' => '2008-01-03 12:11:00',
-      'catch_up' => 1
-    ));
+      'catch_up' => 1,
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '10-15 12 * * *',
       'last_run' => '2008-01-03 12:00:00',
       'now' => '2008-01-03 12:12:00',
-      'catch_up' => 1
-    ));
+      'catch_up' => 1,
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '10-15 12 * * *',
       'last_run' => '2008-01-03 12:00:00',
       'now' => '2008-01-03 12:13:00',
-      'catch_up' => 1
-    ));
+      'catch_up' => 1,
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '10-15 12 * * *',
       'last_run' => '2008-01-03 12:00:00',
       'now' => '2008-01-03 12:14:00',
-      'catch_up' => 1
-    ));
+      'catch_up' => 1,
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '10-15 12 * * *',
       'last_run' => '2008-01-03 12:00:00',
       'now' => '2008-01-03 12:15:00',
-      'catch_up' => 1
-    ));
+      'catch_up' => 1,
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    // This should not run, as it last ran one minute ago
-    $result = $this->assertRule(array(
+    // This should not run, as it last ran one minute ago.
+    $result = $this->assertRule([
       'result' => FALSE,
       'rules' => '10-15 12 * * *',
       'last_run' => '2008-01-03 12:15:00',
-      'now' => '2008-01-03 12:16:00'
-    ));
+      'now' => '2008-01-03 12:16:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
     // This should run, as catch_up defaults to 1 year and it last ran 16 minutes ago.
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '10-15 12 * * *',
       'last_run' => '2008-01-03 12:00:00',
-      'now' => '2008-01-03 12:16:00'
-    ));
+      'now' => '2008-01-03 12:16:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
   }
 
-  function testRules5MinuteStep() {
-    // Test a 5 minute step
-    $result = $this->assertRule(array(
+  /**
+   *
+   */
+  public function testRules5MinuteStep() {
+    // Test a 5 minute step.
+    $result = $this->assertRule([
       'result' => FALSE,
       'rules' => '*/5 12 * * *',
       'last_run' => '2008-01-03 12:00:00',
-      'now' => '2008-01-03 12:01:00'
-    ));
+      'now' => '2008-01-03 12:01:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
+    $result = $this->assertRule([
       'result' => FALSE,
       'rules' => '*/5 12 * * *',
       'last_run' => '2008-01-03 12:00:00',
-      'now' => '2008-01-03 12:02:00'
-    ));
+      'now' => '2008-01-03 12:02:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
+    $result = $this->assertRule([
       'result' => FALSE,
       'rules' => '*/5 12 * * *',
       'last_run' => '2008-01-03 12:00:00',
-      'now' => '2008-01-03 12:03:00'
-    ));
+      'now' => '2008-01-03 12:03:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
+    $result = $this->assertRule([
       'result' => FALSE,
       'rules' => '*/5 12 * * *',
       'last_run' => '2008-01-03 12:00:00',
-      'now' => '2008-01-03 12:04:00'
-    ));
+      'now' => '2008-01-03 12:04:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '*/5 12 * * *',
       'last_run' => '2008-01-03 12:00:00',
-      'now' => '2008-01-03 12:05:00'
-    ));
+      'now' => '2008-01-03 12:05:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
   }
 
-  function testRulesExtended() {
-    $result = $this->assertRule(array(
+  /**
+   *
+   */
+  public function testRulesExtended() {
+    $result = $this->assertRule([
       'result' => FALSE,
       'rules' => '0 0 * jan,oct *',
       'last_run' => '2008-01-31 00:00:00',
-      'now' => '2008-03-10 09:00:00'
-    ));
+      'now' => '2008-03-10 09:00:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '0 0 * jan,oct *',
       'last_run' => '2008-01-31 00:00:00',
-      'now' => '2008-10-01 00:00:00'
-    ));
+      'now' => '2008-10-01 00:00:00',
+    ]);
     $this->assertTrue($result[0], $result[1]);
   }
 
-  function testRulesMinuteWithOffset() {
-    // Test a 1 minute range
-    $result = $this->assertRule(array(
+  /**
+   *
+   */
+  public function testRulesMinuteWithOffset() {
+    // Test a 1 minute range.
+    $result = $this->assertRule([
       'result' => FALSE,
       'rules' => '10+1 12 * * *',
       'last_run' => '2008-01-01 12:00:00',
       'now' => '2008-01-03 12:10:00',
-      'catch_up' => 1
-    ));
+      'catch_up' => 1,
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '10+1 12 * * *',
       'last_run' => '2008-01-01 12:00:00',
       'now' => '2008-01-03 12:11:00',
-      'catch_up' => 1
-    ));
+      'catch_up' => 1,
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
+    $result = $this->assertRule([
       'result' => FALSE,
       'rules' => '10+1 12 * * *',
       'last_run' => '2008-01-01 12:00:00',
       'now' => '2008-01-03 12:12:00',
-      'catch_up' => 1
-    ));
+      'catch_up' => 1,
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
+    $result = $this->assertRule([
       'result' => FALSE,
       'rules' => '59+1 12 * * *',
       'last_run' => '2008-01-01 12:00:00',
       'now' => '2008-01-03 12:59:00',
-      'catch_up' => 1
-    ));
+      'catch_up' => 1,
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
-      'result' => True,
+    $result = $this->assertRule([
+      'result' => TRUE,
       'rules' => '59+1 12 * * *',
       'last_run' => '2008-01-01 12:00:00',
       'now' => '2008-01-03 12:00:00',
-      'catch_up' => 1
-    ));
+      'catch_up' => 1,
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
+    $result = $this->assertRule([
       'result' => FALSE,
       'rules' => '59+1 12 * * *',
       'last_run' => '2008-01-01 12:00:00',
       'now' => '2008-01-03 13:00:00',
-      'catch_up' => 1
-    ));
+      'catch_up' => 1,
+    ]);
     $this->assertTrue($result[0], $result[1]);
-    $result = $this->assertRule(array(
+    $result = $this->assertRule([
       'result' => FALSE,
       'rules' => '59+1 12 * * *',
       'last_run' => '2008-01-01 12:00:00',
       'now' => '2008-01-03 13:01:00',
-      'catch_up' => 1
-    ));
+      'catch_up' => 1,
+    ]);
     $this->assertTrue($result[0], $result[1]);
   }
-}
 
+}
diff --git a/ultimate_cron.api.php b/ultimate_cron.api.php
index 8f3e7d7..2a9195b 100644
--- a/ultimate_cron.api.php
+++ b/ultimate_cron.api.php
@@ -1,9 +1,9 @@
 <?php
+
 /**
  * @file
  * Hooks provided by Ultimate Cron.
  */
-use Drupal\ultimate_cron\Entity\CronJob;
 
 /**
  * @addtogroup hooks
@@ -15,7 +15,7 @@ use Drupal\ultimate_cron\Entity\CronJob;
  *
  * To add additional/multiple cron jobs from a custom module, provide
  * a default configuration in the module with the needed settings.
- * Example: ultimate_cron.job.custom_module_cron.yml
+ * Example: ultimate_cron.job.custom_module_cron.yml.
  *
  * Note that the result of this hook is cached.
  *
@@ -68,40 +68,40 @@ use Drupal\ultimate_cron\Entity\CronJob;
  *      ),
  */
 function hook_cronapi() {
-  $items = array();
+  $items = [];
 
-  $items['example_my_cron_job_1'] = array(
+  $items['example_my_cron_job_1'] = [
     'title' => t('This is my cron job #1'),
     'file' => 'example.jobs.inc',
     'file path' => drupal_get_path('module', 'example') . '/cron',
     'callback' => 'example_my_cron_job_callback',
-    'callback arguments' => array('cronjob1'),
+    'callback arguments' => ['cronjob1'],
     'enabled' => FALSE,
-    'tags' => array('example'),
-    'settings' => array(
-      'example_plugin' => array(
+    'tags' => ['example'],
+    'settings' => [
+      'example_plugin' => [
         'example_setting' => 'example_value',
-      ),
-    ),
-    'scheduler' => array(
+      ],
+    ],
+    'scheduler' => [
       'name' => 'crontab',
-      'crontab' => array(
-        'rules' => array('* * * * *'),
-      ),
-    ),
-    'launcher' => array(
+      'crontab' => [
+        'rules' => ['* * * * *'],
+      ],
+    ],
+    'launcher' => [
       'name' => 'serial',
-      'serial' => array(
+      'serial' => [
         'thread' => 'any',
-      ),
-    ),
-    'logger' => array(
+      ],
+    ],
+    'logger' => [
       'name' => 'cache',
-      'cache' => array(
+      'cache' => [
         'bin' => 'my_cache_bin',
-      ),
-    ),
-  );
+      ],
+    ],
+  ];
 
   return $items;
 }
@@ -139,17 +139,17 @@ function hook_cron_alter(&$items) {
  *   Array of easy hook definitions.
  */
 function hook_cron_easy_hooks() {
-  return array(
-    'cron_fullmoonly' => array(
+  return [
+    'cron_fullmoonly' => [
       'title' => 'Run at full moon',
-      'scheduler' => array(
+      'scheduler' => [
         'name' => 'moonphase',
-        'moonphase' => array(
+        'moonphase' => [
           'phase' => 'full',
-        ),
-      ),
-    )
-  );
+        ],
+      ],
+    ],
+  ];
 }
 
 /**
@@ -164,9 +164,9 @@ function hook_cron_easy_hooks_alter(&$easy_hooks) {
 
 /**
  * The following hooks are invoked during the jobs life cycle,
- * from schedule to finish. The chronological order is:
+ * from schedule to finish. The chronological order is:.
  *
- * cron_pre_schedule
+ * Cron_pre_schedule
  * cron_post_schedule
  * cron_pre_launch
  * cron_pre_launch(*)
@@ -189,7 +189,7 @@ function hook_cron_easy_hooks_alter(&$easy_hooks) {
 /**
  * Invoked just before a job is asked for its schedule.
  *
- * @param CronJob $job
+ * @param \Drupal\ultimate_cron\Entity\CronJob $job
  *   The job being queried.
  */
 function hook_pre_schedule($job) {
@@ -198,7 +198,7 @@ function hook_pre_schedule($job) {
 /**
  * Invoked after a job has been asked for its schedule.
  *
- * @param CronJob $job
+ * @param \Drupal\ultimate_cron\Entity\CronJob $job
  *   The job being queried.
  */
 function hook_post_schedule($job) {
@@ -207,7 +207,7 @@ function hook_post_schedule($job) {
 /**
  * Invoked just before a job is launched.
  *
- * @param CronJob $job
+ * @param \Drupal\ultimate_cron\Entity\CronJob $job
  *   The job being launched.
  */
 function hook_pre_launch($job) {
@@ -216,7 +216,7 @@ function hook_pre_launch($job) {
 /**
  * Invoked after a job has been launched.
  *
- * @param CronJob $job
+ * @param \Drupal\ultimate_cron\Entity\CronJob $job
  *   The job that was launched.
  */
 function hook_post_launch($job) {
@@ -225,7 +225,7 @@ function hook_post_launch($job) {
 /**
  * Invoked just before a job is being run.
  *
- * @param CronJob $job
+ * @param \Drupal\ultimate_cron\Entity\CronJob $job
  *   The job being run.
  */
 function hook_pre_run($job) {
@@ -234,7 +234,7 @@ function hook_pre_run($job) {
 /**
  * Invoked after a job has been run.
  *
- * @param CronJob $job
+ * @param \Drupal\ultimate_cron\Entity\CronJob $job
  *   The job that was run.
  */
 function hook_post_run($job) {
@@ -243,7 +243,7 @@ function hook_post_run($job) {
 /**
  * Invoked just before a job is asked for its schedule.
  *
- * @param CronJob $job
+ * @param \Drupal\ultimate_cron\Entity\CronJob $job
  *   The job being invoked.
  */
 function hook_pre_invoke($job) {
@@ -252,7 +252,7 @@ function hook_pre_invoke($job) {
 /**
  * Invoked after a job has been invoked.
  *
- * @param CronJob $job
+ * @param \Drupal\ultimate_cron\Entity\CronJob $job
  *   The job that was invoked.
  */
 function hook_post_invoke($job) {
@@ -265,7 +265,7 @@ function hook_post_invoke($job) {
  * build_operations_alter($job, &$allowed_operations). It will only be
  * run for the currently active plugin for the job.
  *
- * @param CronJob $job
+ * @param \Drupal\ultimate_cron\Entity\CronJob $job
  *   The job in question.
  * @param array &$allowed_operations
  *   Allowed operations for this job.
diff --git a/ultimate_cron.drush.inc b/ultimate_cron.drush.inc
index 0610083..2c0584c 100644
--- a/ultimate_cron.drush.inc
+++ b/ultimate_cron.drush.inc
@@ -1,8 +1,10 @@
 <?php
+
 /**
  * @file
  * Drush commands for Ultimate Cron!
  */
+
 use Drupal\ultimate_cron\CronPlugin;
 use Drupal\ultimate_cron\Entity\CronJob;
 
@@ -10,25 +12,25 @@ use Drupal\ultimate_cron\Entity\CronJob;
  * Implements hook_drush_command().
  */
 function ultimate_cron_drush_command() {
-  $items = array();
+  $items = [];
 
-  $items['cron-logs'] = array(
+  $items['cron-logs'] = [
     'description' => 'Show a cron jobs logs',
-    'arguments' => array(
+    'arguments' => [
       'name' => 'Job to show logs for',
-    ),
-    'options' => array(
+    ],
+    'options' => [
       'limit' => 'Number of log entries to show',
       'compact' => 'Only show the first line of each log entry',
-    ),
-    'examples' => array(
+    ],
+    'examples' => [
       'drush cron-logs node_cron --limit=20' => 'Show 20 last logs for the node_cron job',
-    ),
-  );
+    ],
+  ];
 
-  $items['cron-list'] = array(
+  $items['cron-list'] = [
     'description' => 'List cron jobs',
-    'options' => array(
+    'options' => [
       'module' => 'Comma separated list of modules to show jobs from',
       'enabled' => 'Show enabled jobs',
       'disabled' => 'Show enabled jobs',
@@ -37,80 +39,80 @@ function ultimate_cron_drush_command() {
       'extended' => 'Show extended information',
       'name' => 'Show name instead of title',
       'scheduled' => 'Show scheduled jobs',
-    ),
-    'examples' => array(
+    ],
+    'examples' => [
       'drush cron-list --status=running --module=node' => 'Show jobs from the node module that are currently running',
-    ),
-    'aliases' => array('cl'),
-  );
+    ],
+    'aliases' => ['cl'],
+  ];
 
-  $items['cron-run'] = array(
+  $items['cron-run'] = [
     'description' => 'Run cron job',
-    'arguments' => array(
+    'arguments' => [
       'name' => 'Job to run',
-    ),
-    'options' => array(
+    ],
+    'options' => [
       'force' => 'Skip the schedule check for each job. Locks are still respected.',
       'options' => 'Custom options for plugins, e.g. --options=thread=1 for serial launcher',
-    ),
-    'examples' => array(
+    ],
+    'examples' => [
       'drush cron-run node_cron' => 'Run the node_cron job',
       'drush cron-run --options=thread=1' => 'Run all scheduled jobs and instruct serial launcher only to launch thread 1 jobs',
-    ),
-    'aliases' => array('crun'),
-  );
+    ],
+    'aliases' => ['crun'],
+  ];
 
-  $items['cron-is-running'] = array(
+  $items['cron-is-running'] = [
     'description' => 'Tell whether cron is running. Exit status is set in concordance with the cron running status.',
-    'examples' => array(
+    'examples' => [
       'drush cron-is-running' => 'Check if cron is running.',
       'drush cron-is-running --quiet' => 'Check if cron is running and don\'t show an informative message.',
       'while `drush cron-is-running --quiet`; do echo "Waiting cron to finish"; sleep 1; done' => 'Bash loop to wait until cron finishes.',
-    ),
-    'aliases' => array('cir'),
-  );
+    ],
+    'aliases' => ['cir'],
+  ];
 
-  $items['cron-enable'] = array(
+  $items['cron-enable'] = [
     'description' => 'Enable cron job',
-    'arguments' => array(
+    'arguments' => [
       'name' => 'Job to enable',
-    ),
-    'options' => array(
+    ],
+    'options' => [
       'all' => 'Enabled all jobs',
-    ),
-    'examples' => array(
+    ],
+    'examples' => [
       'drush cron-enable node_cron' => 'Enable the node_cron job',
-    ),
-    'aliases' => array('ce'),
-  );
+    ],
+    'aliases' => ['ce'],
+  ];
 
-  $items['cron-disable'] = array(
+  $items['cron-disable'] = [
     'description' => 'Disable cron job',
-    'arguments' => array(
+    'arguments' => [
       'name' => 'Job to disable',
-    ),
-    'options' => array(
+    ],
+    'options' => [
       'all' => 'Enabled all jobs',
-    ),
-    'examples' => array(
+    ],
+    'examples' => [
       'drush cron-disable node_cron' => 'Disable the node_cron job',
-    ),
-    'aliases' => array('cd'),
-  );
+    ],
+    'aliases' => ['cd'],
+  ];
 
-  $items['cron-unlock'] = array(
+  $items['cron-unlock'] = [
     'description' => 'Unlock cron job',
-    'arguments' => array(
+    'arguments' => [
       'name' => 'Job to unlock',
-    ),
-    'options' => array(
+    ],
+    'options' => [
       'all' => 'Enabled all jobs',
-    ),
-    'examples' => array(
+    ],
+    'examples' => [
       'drush cron-unlock node_cron' => 'Unlock the node_cron job',
-    ),
-    'aliases' => array('cu'),
-  );
+    ],
+    'aliases' => ['cu'],
+  ];
 
   return $items;
 }
@@ -150,13 +152,13 @@ function drush_ultimate_cron_cron_list() {
   $scheduled = drush_get_option('scheduled');
   $showname = drush_get_option('name');
 
-  $modules = $modules ? explode(',', $modules) : array();
-  $statuses = $statuses ? explode(',', $statuses) : array();
+  $modules = $modules ? explode(',', $modules) : [];
+  $statuses = $statuses ? explode(',', $statuses) : [];
 
   $title = $showname ? dt('Name') : dt('Title');
 
-  $table = array();
-  $table[] = array(
+  $table = [];
+  $table[] = [
     '',
     dt('ID'),
     dt('Module'),
@@ -165,7 +167,7 @@ function drush_ultimate_cron_cron_list() {
     dt('Started'),
     dt('Duration'),
     dt('Status'),
-  );
+  ];
 
   $print_legend = FALSE;
 
@@ -212,7 +214,7 @@ function drush_ultimate_cron_cron_list() {
       $print_legend = TRUE;
     }
     elseif ($log_entry->start_time && !$log_entry->end_time) {
-     list(, $status) = $job->getPlugin('launcher')->formatUnfinished($job);
+      list(, $status) = $job->getPlugin('launcher')->formatUnfinished($job);
     }
     else {
       list(, $status) = $log_entry->formatSeverity();
@@ -256,19 +258,19 @@ function drush_ultimate_cron_cron_logs($name = NULL) {
     return drush_set_error(dt('No job specified?'));
   }
 
-  /** @var CronJob $job */
+  /** @var \Drupal\ultimate_cron\Entity\CronJob $job */
   $job = Cronjob::load($name);
 
   if (!$job) {
-    return drush_set_error(dt('@name not found', array('@name' => $name)));
+    return drush_set_error(dt('@name not found', ['@name' => $name]));
   }
 
   $compact = drush_get_option('compact');
   $limit = drush_get_option('limit');
   $limit = $limit ? $limit : 10;
 
-  $table = array();
-  $table[] = array(
+  $table = [];
+  $table[] = [
     '',
     dt('Started'),
     dt('Duration'),
@@ -276,7 +278,7 @@ function drush_ultimate_cron_cron_logs($name = NULL) {
     dt('Initial message'),
     dt('Message'),
     dt('Status'),
-  );
+  ];
 
   $lock_id = $job->isLocked();
   $log_entries = $job->getLogEntries(ULTIMATE_CRON_LOG_TYPE_ALL, $limit);
@@ -337,8 +339,8 @@ function drush_ultimate_cron_cron_run($name = NULL) {
     // Run all jobs.
     $jobs = CronJob::loadMultiple();
 
-    /** @var CronJob $job */
-    foreach($jobs as $job) {
+    /** @var \Drupal\ultimate_cron\Entity\CronJob $job */
+    foreach ($jobs as $job) {
       if ($force || $job->isScheduled()) {
         $job->run(t('Launched by drush'));
       }
@@ -350,7 +352,7 @@ function drush_ultimate_cron_cron_run($name = NULL) {
     $job = CronJob::load($name);
 
     if (!$job) {
-      return drush_set_error(dt('@name not found', array('@name' => $name)));
+      return drush_set_error(dt('@name not found', ['@name' => $name]));
     }
 
     if ($force || $job->isScheduled()) {
@@ -391,7 +393,7 @@ function drush_ultimate_cron_cron_enable($name = NULL) {
     if (!drush_get_option('all')) {
       return drush_set_error(dt('No job specified?'));
     }
-    /** @var CronJob $job */
+    /** @var \Drupal\ultimate_cron\Entity\CronJob $job */
     foreach (CronJob::loadMultiple() as $job) {
       $job->enable()->save();
     }
@@ -400,7 +402,7 @@ function drush_ultimate_cron_cron_enable($name = NULL) {
 
   $job = CronJob::load($name);
   if ($job->enable()->save()) {
-    drush_print(dt('@name enabled', array('@name' => $name)));
+    drush_print(dt('@name enabled', ['@name' => $name]));
   }
 }
 
@@ -420,7 +422,7 @@ function drush_ultimate_cron_cron_disable($name = NULL) {
 
   $job = CronJob::load($name);
   if ($job->disable()->save()) {
-    drush_print(dt('@name disabled', array('@name' => $name)));
+    drush_print(dt('@name disabled', ['@name' => $name]));
   }
 }
 
@@ -432,7 +434,7 @@ function drush_ultimate_cron_cron_unlock($name = NULL) {
     if (!drush_get_option('all')) {
       return drush_set_error(dt('No job specified?'));
     }
-    /** @var CronJob $job */
+    /** @var \Drupal\ultimate_cron\Entity\CronJob $job */
     foreach (CronJob::loadMultiple() as $job) {
       if ($job->isLocked()) {
         $job->unlock();
@@ -441,31 +443,31 @@ function drush_ultimate_cron_cron_unlock($name = NULL) {
     return;
   }
 
-  /** @var CronJob $job */
+  /** @var \Drupal\ultimate_cron\Entity\CronJob $job */
   $job = CronJob::load($name);
   if (!$job) {
-    return drush_set_error(dt('@name not found', array('@name' => $name)));
+    return drush_set_error(dt('@name not found', ['@name' => $name]));
   }
 
   $lock_id = $job->isLocked();
   if (!$lock_id) {
-    return drush_set_error(dt('@name is not running', array('@name' => $name)));
+    return drush_set_error(dt('@name is not running', ['@name' => $name]));
   }
 
   // Unlock the process.
   if ($job->unlock($lock_id, TRUE)) {
     $log_entry = $job->resumeLog($lock_id);
     global $user;
-    \Drupal::logger('ultimate_cron')->warning('@name manually unlocked by user @username (@uid)', array(
+    \Drupal::logger('ultimate_cron')->warning('@name manually unlocked by user @username (@uid)', [
       '@name' => $job->id(),
       '@username' => $user->getDisplayName(),
       '@uid' => $user->id(),
-    ));
+    ]);
     $log_entry->finish();
 
-    drush_print(dt('Cron job @name unlocked', array('@name' => $name)));
+    drush_print(dt('Cron job @name unlocked', ['@name' => $name]));
   }
   else {
-    drush_set_error(dt('Could not unlock cron job @name', array('@name' => $name)));
+    drush_set_error(dt('Could not unlock cron job @name', ['@name' => $name]));
   }
 }
diff --git a/ultimate_cron.nagios.inc b/ultimate_cron.nagios.inc
index e600c93..2f16c16 100644
--- a/ultimate_cron.nagios.inc
+++ b/ultimate_cron.nagios.inc
@@ -1,4 +1,9 @@
 <?php
+
+/**
+ * @file
+ */
+
 use Drupal\Core\Logger\RfcLogLevel;
 use Drupal\ultimate_cron\CronJobDiscovery;
 
@@ -6,18 +11,18 @@ use Drupal\ultimate_cron\CronJobDiscovery;
  * Implements hook_nagios_info().
  */
 function ultimate_cron_nagios_info() {
-  return array(
+  return [
     'name'   => t('Ultimate Cron Monitoring'),
     'id'     => 'ULTIMATE_CRON',
-  );
+  ];
 }
 
 /**
  * Implementation of hook_nagios().
  */
 function ultimate_cron_nagios($check = 'nagios') {
-  $status = array();
-  foreach(ultimate_cron_nagios_functions() as $function => $description) {
+  $status = [];
+  foreach (ultimate_cron_nagios_functions() as $function => $description) {
     if (variable_get('ultimate_cron_nagios_func_' . $function, TRUE) && ($check == 'nagios' || $check == $function)) {
       $func = $function . '_check';
       $result = $func();
@@ -32,48 +37,48 @@ function ultimate_cron_nagios($check = 'nagios') {
  * Implementation of hook_nagios_settings().
  */
 function ultimate_cron_nagios_settings() {
-  $form = array();
-  
-  foreach(ultimate_cron_nagios_functions() as $function => $description) {
+  $form = [];
+
+  foreach (ultimate_cron_nagios_functions() as $function => $description) {
     $var = 'ultimate_cron_nagios_func_' . $function;
-    $form[$var] = array(
+    $form[$var] = [
       '#type'          => 'checkbox',
       '#title'         => $function,
       '#default_value' => variable_get($var, TRUE),
       '#description' => $description,
-    );
+    ];
   }
- 
+
   $group = 'thresholds';
-  $form[$group] = array(
+  $form[$group] = [
     '#type'        => 'fieldset',
     '#collapsible' => TRUE,
     '#collapsed'   => FALSE,
     '#title'       => t('Thresholds'),
     '#description' => t('Thresholds for reporting critical alerts to Nagios.'),
-  );
+  ];
 
-  $form[$group]['ultimate_cron_nagios_running_threshold'] = array(
+  $form[$group]['ultimate_cron_nagios_running_threshold'] = [
     '#type'          => 'textfield',
     '#title'         => t('Running jobs count'),
     '#default_value' => variable_get('ultimate_cron_nagios_running_threshold', 50),
     '#description'   => t('Issue a critical alert when more than this number of jobs are running. Default is 50.'),
-  );
-  
-  $form[$group]['ultimate_cron_nagios_failed_threshold'] = array(
+  ];
+
+  $form[$group]['ultimate_cron_nagios_failed_threshold'] = [
     '#type'          => 'textfield',
     '#title'         => t('Failed jobs count'),
     '#default_value' => variable_get('ultimate_cron_nagios_failed_threshold', 10),
     '#description'   => t('Issue a critical alert when more than this number of jobs failed their last run. Default is 10.'),
-  );
-  
-  $form[$group]['ultimate_cron_nagios_longrunning_threshold'] = array(
+  ];
+
+  $form[$group]['ultimate_cron_nagios_longrunning_threshold'] = [
     '#type'          => 'textfield',
     '#title'         => t('Long running jobs'),
     '#default_value' => variable_get('ultimate_cron_nagios_longrunning_threshold', 0),
-    '#description'   => t('Issue a critical alert when more than this number of jobs are running longer than usual. Default is 0.')
-  );
-  
+    '#description'   => t('Issue a critical alert when more than this number of jobs are running longer than usual. Default is 0.'),
+  ];
+
   return $form;
 }
 
@@ -96,43 +101,48 @@ function ultimate_cron_nagios_check($function) {
   return $status;
 }
 
-/************** HELPER FUNCTIONS ***********************************/
+/**************
+ * HELPER FUNCTIONS .***********************************/
+
 /**
- * Return a list of nagios check functions 
+ * Return a list of nagios check functions .
+ *
  * @see ultimate_cron_nagios()
  */
 function ultimate_cron_nagios_functions() {
-  return array(
+  return [
     'ultimate_cron_running' => t('Check number of currently running jobs'),
     'ultimate_cron_failed' => t('Check the number of jobs that failed last run'),
     'ultimate_cron_longrunning' => t('Check the number of jobs that are running longer than usual'),
-  );
+  ];
 }
 
 /**
  * Get information about running jobs - currently running or failed.
  *
  * @staticvar array $overview
- * @param string $mode Which mode to get info about; 'running' or 'error'
- * @return int 
+ * @param string $mode
+ *   Which mode to get info about; 'running' or 'error'.
+ *
+ * @return int
  */
 function ultimate_cron_nagios_get_job_info($mode = 'running') {
-  // Ensure valid mode
-  if (!in_array($mode, array('running', 'error'))) {
+  // Ensure valid mode.
+  if (!in_array($mode, ['running', 'error'])) {
     $mode = 'running';
   }
-  static $overview = array();
+  static $overview = [];
 
   if (!isset($overview[$mode])) {
     $overview[$mode] = 0;
-    // Get hooks and their data
+    // Get hooks and their data.
     $hooks = CronJobDiscovery::getHooks();
 
-    $modules = array();
+    $modules = [];
     foreach ($hooks as $name => $hook) {
       if (!$module || $module == $hook['module']) {
         $log = ultimate_cron_get_log($name);
-        
+
         if ($hook['background_process']) {
           $overview['running']++;
         }
@@ -141,105 +151,103 @@ function ultimate_cron_nagios_get_job_info($mode = 'running') {
       }
     }
   }
-  
+
   return $overview[$mode];
 }
 
-/*************** NAGIOS CHECK FUNCTIONS ********************************/
+/***************
+ * NAGIOS CHECK FUNCTIONS .********************************/
+
 /**
  * Check number of running jobs.
- * 
+ *
  * @return array
  */
 function ultimate_cron_running_check() {
   $running = ultimate_cron_nagios_get_job_info('running');
   $threshold = variable_get('ultimate_cron_nagios_running_threshold', 50);
   if (count($running) > $threshold) {
-    $data = array(
+    $data = [
       'status' => NAGIOS_STATUS_CRITICAL,
       'type'   => 'state',
-      'text'   => t('@jobs currently running - it is more than @threshold', array('@jobs' => $running, '@threshold' => $threshold)),
-    );
+      'text'   => t('@jobs currently running - it is more than @threshold', ['@jobs' => $running, '@threshold' => $threshold]),
+    ];
   }
   else {
-    $data = array(
-      'status' => NAGIOS_STATUS_OK, 
+    $data = [
+      'status' => NAGIOS_STATUS_OK,
       'type'   => 'state',
-      'text'   => t('@jobs currently running', array('@jobs' => $running)),
-    );
+      'text'   => t('@jobs currently running', ['@jobs' => $running]),
+    ];
   }
 
-  return array(
+  return [
     'key' => 'ULTIMATE_CRON_RUNNING',
     'data' => $data,
-  );
+  ];
 }
 
 /**
  * Check number of jobs that failed last run.
- * 
+ *
  * @return array
  */
 function ultimate_cron_failed_check() {
   $failed = ultimate_cron_nagios_get_job_info('errors');
   $threshold = variable_get('ultimate_cron_nagios_failed_threshold', 10);
   if (count($failed) > $threshold) {
-    $data = array(
+    $data = [
       'status' => NAGIOS_STATUS_CRITICAL,
       'type'   => 'state',
-      'text'   => t('@jobs failed their last run - it is more than @threshold', array('@jobs' => $failed, '@threshold' => $threshold)),
-    );
+      'text'   => t('@jobs failed their last run - it is more than @threshold', ['@jobs' => $failed, '@threshold' => $threshold]),
+    ];
   }
   else {
-    $data = array(
-      'status' => NAGIOS_STATUS_OK, 
+    $data = [
+      'status' => NAGIOS_STATUS_OK,
       'type'   => 'state',
-      'text'   => t('@jobs failed their last run', array('@jobs' => $failed)),
-    );
+      'text'   => t('@jobs failed their last run', ['@jobs' => $failed]),
+    ];
   }
 
-  return array(
+  return [
     'key' => 'ULTIMATE_CRON_FAILED',
     'data' => $data,
-  );
+  ];
 }
 
 /**
  * Check number of jobs running longer than usual.
- * 
+ *
  * @return array
- * 
+ *
  * @todo Implement the logic
  */
 function ultimate_cron_longrunning_check() {
   $longrunning = 0;
-  
-  // Get running jobs
-  
-  // Find out how long they have been running
-  
+
+  // Get running jobs.
+  // Find out how long they have been running.
   // Calculate average run time per job (over a threshold? E.g. queues run very fast if there is nothing to process)
-  
-  // If 
-  
+  // If.
   $threshold = variable_get('ultimate_cron_nagios_longrunning_threshold', 0);
   if ($longrunning > $threshold) {
-    $data = array(
+    $data = [
       'status' => NAGIOS_STATUS_CRITICAL,
       'type'   => 'state',
-      'text'   => t('@jobs jobs are running longer than usual - it is more than @threshold', array('@jobs' => $longrunning, '@threshold' => $threshold)),
-    );
+      'text'   => t('@jobs jobs are running longer than usual - it is more than @threshold', ['@jobs' => $longrunning, '@threshold' => $threshold]),
+    ];
   }
   else {
-    $data = array(
-      'status' => NAGIOS_STATUS_OK, 
+    $data = [
+      'status' => NAGIOS_STATUS_OK,
       'type'   => 'state',
-      'text'   => t('@jobs jobs are running longer than usual', array('@jobs' => $longrunning)),
-    );
+      'text'   => t('@jobs jobs are running longer than usual', ['@jobs' => $longrunning]),
+    ];
   }
 
-  return array(
+  return [
     'key' => 'ULTIMATE_CRON_LONGRUNNING',
     'data' => $data,
-  );
+  ];
 }
